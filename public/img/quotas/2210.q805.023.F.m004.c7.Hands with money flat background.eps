%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: fast2_Монтажная область 1.eps
%%Creator: Adobe Illustrator(R) 23.1
%%For: Fiv
%%CreationDate: 10/26/2022
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.1.0 x670 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">РћСЃРЅРѕРІРЅС‹Рµ RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 23.1 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2022-10-26T22:11:05+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2022-10-26T22:11:05+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2022-10-26T22:11:05+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9SXVpbXdu9vcxiWGQUdG6EYJRBFFlGRibHN5d5r8oz6PKZ4Ky6e5+F+6E9Ff&#xA;+BzV59OYbjk7vS6oZBR+pjmYzmOxVlfkDXvqOomxmalreEBSeiy9FP8Asun3Zl6XLwyo8i4GuwcU&#xA;eIcw9OzZuldirsVdiqhd3traR87iQRjsD1PyGV5M0YC5GkEgN2l7aXcQltpkmjP7SMG7kdvcHDDJ&#xA;GYuJtQQeStk0vLfPXmAalqP1WBq2loSoI6PJ0Zvl2H9uavVZeI0OQd5osHBGzzLGMxXNZh+W+ki4&#xA;1GXUJBVLQcY6/wC/HqK/QtfvzM0eO5X3Ou7Qy1Hh73pObJ07sVYr+ZnlP/E/lG7sI1BvYh9YsT/x&#xA;dGDRf9mpKfTleWHFGm/TZeCYPR8lEEEgihGxB61zWO/TvyRqB07zjot5WixXkHqH/IZwr/8ACk5P&#xA;GakGvNG4EeT7EzaPOpF5k8zRaapt7ekl6w6dowRsW9/AYuRhwcW55MDHK7uHa4mHOSrSSyb1NO/6&#xA;skA5szwR2Fpx5a80yaYVtLwmTT+iSbs0I/Wye3UYGrNg4txzZ/HJHJGskbB43AZHU1BB3BBGB15C&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:7997b017-3890-f24f-a060-5419d98a6a92</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:7997b017-3890-f24f-a060-5419d98a6a92</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:8dd9dc70-1c26-1144-a0e9-edbe1a1726b4</stRef:instanceID>
            <stRef:documentID>xmp.did:8dd9dc70-1c26-1144-a0e9-edbe1a1726b4</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:90e6f1a1-fb6c-a648-b3cb-686fb6a90c96</stEvt:instanceID>
                  <stEvt:when>2022-10-26T21:46:27+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7997b017-3890-f24f-a060-5419d98a6a92</stEvt:instanceID>
                  <stEvt:when>2022-10-26T22:11:05+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>РћС‚С‚РµРЅРєРё СЃРµСЂРѕРіРѕ</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
84.2388 399.542 mo
78.4956 407.257 li
78.4956 407.257 93.8652 415.412 100.731 418.057 cv
107.596 420.701 117.341 426.212 121.77 426.873 cv
148.056 381.249 li
107.536 359.944 li
84.2388 399.542 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.745098 .878431 .537255 rgb
f
103.193 364.394 mo
103.193 364.394 89.0371 392.141 78.4956 402.94 cv
78.4956 402.94 116.226 424.32 119.884 424.541 cv
139.708 391.259 li
103.193 364.394 li
cp
.513726 .713726 .270588 rgb
f
142.205 305.629 mo
142.205 305.629 133.852 324.349 125.595 336.527 cv
156.901 369.783 li
184.948 321.777 li
184.948 321.777 169.224 313.412 160.586 311.725 cv
151.95 310.037 142.205 305.629 142.205 305.629 cv
.745098 .878431 .537255 rgb
f
125.595 331.285 mo
139.769 308.935 li
139.769 308.935 165.902 316.518 172.324 320.11 cv
178.747 323.702 184.062 325.029 184.062 325.029 cv
163.687 357.629 li
125.595 331.285 li
.513726 .713726 .270588 rgb
f
123.998 367.965 mo
119.684 369.964 112.556 368.737 105.906 367.51 cv
100.137 366.446 94.7281 365.382 91.8252 366.423 cv
83.8622 369.275 68.1626 377.492 58.7452 377.585 cv
49.33 377.675 41.7227 378.418 26.2451 384.577 cv
17.3701 388.11 7.12504 391.665 0 394.055 cv
0 352.98 li
15.3677 351.22 37.435 347.947 44.9248 342.793 cv
56.7299 334.665 76.9752 324.74 81.3775 324.045 cv
91.5873 322.435 103.355 324.265 111.197 324.878 cv
119.35 325.513 140.755 325.687 141.832 341.025 cv
142.908 356.362 130.44 364.98 123.998 367.965 cv
.839216 .580392 .462745 rgb
f
87.1187 331.52 mo
87.0981 331.473 85.0322 326.805 83.2485 325.251 cv
83.5825 324.877 li
85.4517 326.505 87.4971 331.126 87.5825 331.322 cv
87.1187 331.52 li
cp
.768627 .482353 .372549 rgb
f
92.2368 364.341 mo
92.2339 364.201 92.1807 360.892 93.9395 358.875 cv
94.0913 358.701 li
95.687 356.875 96.7412 355.669 96.1416 353.729 cv
96.626 353.585 li
97.3071 355.788 96.1196 357.147 94.4761 359.029 cv
94.3242 359.202 li
92.6929 361.073 92.7427 364.3 92.7432 364.333 cv
92.2368 364.341 li
cp
f
86.2349 366.455 mo
86.5742 365.526 87.3594 360.807 86.1104 358.79 cv
86.542 358.531 li
87.8999 360.725 87.0801 365.618 86.7109 366.627 cv
86.2349 366.455 li
cp
f
96.4448 356.803 mo
96.5049 356.307 li
106.032 357.48 li
105.973 357.977 li
96.4448 356.803 li
cp
f
177.732 324.876 mo
177.732 324.876 175.122 331.032 171.516 338.951 cv
168.114 346.414 163.824 355.444 159.999 362.345 cv
157.688 366.514 153.128 372.97 147.83 380.014 cv
147.58 380.348 147.327 380.682 147.075 381.018 cv
146.811 381.364 146.548 381.71 146.283 382.06 cv
133.731 398.597 118.031 417.405 118.031 417.405 cv
118.031 417.405 109.391 411.444 96.8213 408.328 cv
83.938 405.14 76.6772 399.256 76.6772 399.256 cv
76.6772 399.256 88.1186 383.61 101.835 367.469 cv
106.754 361.685 110.639 356.1 113.75 350.932 cv
113.997 350.519 114.24 350.107 114.48 349.702 cv
114.601 349.494 114.722 349.286 114.841 349.081 cv
115.101 348.632 115.354 348.185 115.604 347.743 cv
120.022 339.87 122.648 333.155 124.503 328.463 cv
127.768 320.182 133.755 310.067 133.755 310.067 cv
133.755 310.067 139.71 313.083 154.792 316.39 cv
168.452 319.383 177.732 324.876 177.732 324.876 cv
.745098 .878431 .537255 rgb
f
82.2251 396.876 mo
82.9785 397.544 84.8218 399.043 87.8423 400.656 cv
91.1337 402.417 94.8657 403.82 98.9356 404.828 cv
103.62 405.988 108.341 407.533 112.967 409.421 cv
115.974 410.645 118.059 411.658 118.941 412.103 cv
119.588 411.325 121.146 409.448 123.271 406.857 cv
131.785 396.475 152.197 371.226 157.842 361.04 cv
162.444 352.736 167.355 341.578 170.664 333.679 cv
171.893 330.738 172.787 328.519 173.165 327.571 cv
172.307 327.068 170.257 325.925 167.259 324.617 cv
162.709 322.631 157.888 321.071 152.928 319.982 cv
148.53 319.018 144.651 317.982 141.4 316.905 cv
137.872 315.735 135.929 314.798 135.045 314.316 cv
134.481 315.291 133.241 317.464 131.825 320.143 cv
129.648 324.263 127.94 327.881 126.75 330.898 cv
126.659 331.128 li
123.497 339.141 118.205 352.553 105.415 367.602 cv
97.7153 376.667 90.7984 385.537 86.3516 391.381 cv
84.2988 394.077 82.8462 396.034 82.2251 396.876 cv
119.267 413.723 mo
118.803 413.477 li
118.78 413.464 116.391 412.2 112.479 410.608 cv
107.909 408.744 103.248 407.219 98.624 406.073 cv
94.4502 405.04 90.6177 403.598 87.2319 401.787 cv
82.9775 399.514 80.9863 397.485 80.9039 397.4 cv
80.5278 397.013 li
80.8462 396.577 li
80.8628 396.555 82.5468 394.253 85.3232 390.606 cv
89.7798 384.75 96.7119 375.86 104.431 366.772 cv
117.083 351.886 122.326 338.598 125.459 330.658 cv
125.549 330.429 li
126.757 327.368 128.485 323.706 130.684 319.545 cv
132.626 315.87 134.242 313.137 134.258 313.109 cv
134.608 312.517 li
135.179 312.906 li
135.194 312.916 136.936 314.071 141.808 315.688 cv
145.017 316.751 148.852 317.774 153.206 318.73 cv
158.248 319.836 163.15 321.422 167.776 323.442 cv
171.899 325.239 174.216 326.701 174.313 326.763 cv
174.759 327.046 li
174.565 327.538 li
174.555 327.564 173.506 330.223 171.854 334.172 cv
168.533 342.101 163.602 353.306 158.971 361.659 cv
153.48 371.567 134.873 394.738 124.271 407.669 cv
121.444 411.113 119.621 413.298 119.603 413.32 cv
119.267 413.723 li
.513726 .713726 .270588 rgb
f
147.243 372.623 mo
143.609 378.887 133.705 379.967 125.121 375.034 cv
116.538 370.102 112.525 361.026 116.159 354.762 cv
119.792 348.497 129.697 347.418 138.281 352.35 cv
146.865 357.282 150.877 366.358 147.243 372.623 cv
f
116.451 383.417 mo
119.013 385.39 119.668 388.817 117.915 391.073 cv
116.161 393.328 112.663 393.557 110.101 391.583 cv
107.539 389.61 106.883 386.183 108.637 383.927 cv
110.39 381.672 113.889 381.443 116.451 383.417 cv
cp
f
148.873 334.687 mo
151.581 336.458 152.5 339.825 150.927 342.208 cv
149.353 344.591 145.883 345.088 143.175 343.317 cv
140.468 341.547 139.548 338.18 141.122 335.797 cv
142.695 333.413 146.165 332.917 148.873 334.687 cv
f
141.606 316.377 mo
141.606 319.547 139.028 322.112 135.846 322.112 cv
133.972 322.112 132.307 321.224 131.254 319.844 cv
133.212 316.14 134.813 313.436 134.813 313.436 cv
134.813 313.436 136.545 314.619 141.604 316.296 cv
141.606 316.377 li
cp
f
173.965 327.304 mo
173.965 327.304 172.927 329.936 171.259 333.926 cv
168.176 333.815 165.71 331.293 165.71 328.198 cv
165.71 326.556 166.404 325.075 167.518 324.029 cv
171.642 325.828 173.965 327.304 173.965 327.304 cv
cp
f
90.02 396.508 mo
90.02 398.462 89.0396 400.188 87.5371 401.222 cv
83.3223 398.97 81.3677 396.955 81.3677 396.955 cv
81.3677 396.955 83.0327 394.677 85.8374 390.994 cv
88.2534 391.675 90.02 393.887 90.02 396.508 cv
cp
f
123.771 407.264 mo
120.914 410.745 119.107 412.91 119.107 412.91 cv
119.107 412.91 116.717 411.64 112.723 410.015 cv
112.706 409.842 112.697 409.665 112.697 409.486 cv
112.697 406.319 115.275 403.753 118.457 403.753 cv
120.847 403.753 122.898 405.199 123.771 407.264 cv
cp
f
147.831 380.013 mo
147.831 380.013 147.831 380.013 147.831 380.012 cv
148.805 378.717 149.754 377.443 150.668 376.198 cv
149.754 377.443 148.805 378.718 147.831 380.013 cv
.698824 .757878 .616148 rgb
f
158.754 364.465 mo
159.221 363.706 159.638 362.998 159.999 362.345 cv
160.922 360.681 161.871 358.894 162.828 357.035 cv
162.828 357.035 li
161.871 358.895 160.922 360.682 159.999 362.346 cv
159.638 362.998 159.22 363.707 158.754 364.465 cv
.572549 .698039 .384314 rgb
f
162.828 357.035 mo
162.828 357.035 li
165.841 351.182 168.934 344.615 171.516 338.951 cv
171.516 338.951 li
171.517 338.951 171.517 338.951 171.517 338.951 cv
168.935 344.615 165.842 351.181 162.828 357.035 cv
.454902 .615686 .25098 rgb
f
147.831 380.012 mo
147.602 379.906 147.201 379.715 146.661 379.441 cv
152.036 372.334 156.663 365.825 158.971 361.659 cv
162.909 354.555 167.065 345.39 170.262 337.93 cv
170.68 338.273 171.099 338.613 171.516 338.951 cv
171.516 338.951 171.516 338.951 171.516 338.951 cv
168.934 344.615 165.841 351.182 162.828 357.035 cv
161.871 358.894 160.922 360.681 159.999 362.345 cv
159.638 362.998 159.221 363.706 158.754 364.465 cv
156.789 367.659 153.95 371.733 150.668 376.198 cv
149.754 377.443 148.805 378.717 147.831 380.012 cv
145.493 378.833 mo
144.583 378.346 143.468 377.72 142.214 376.959 cv
144.35 376.039 146.105 374.585 147.243 372.623 cv
150.877 366.358 146.865 357.282 138.281 352.35 cv
134.654 350.266 130.792 349.255 127.266 349.255 cv
123.363 349.255 119.871 350.495 117.57 352.889 cv
117.286 352.508 117.02 352.149 116.774 351.812 cv
117.197 351.105 117.606 350.407 117.999 349.717 cv
118.982 349.595 119.706 349.482 120.068 349.39 cv
121.416 349.044 125.516 347.995 127.222 345.591 cv
127.951 344.564 128.155 343.41 127.83 342.164 cv
127.62 341.353 127.131 340.665 126.351 340.088 cv
127.973 338.628 129.537 337.018 130.874 335.291 cv
135.153 329.773 144.08 322.637 148.814 319.022 cv
150.128 319.349 151.501 319.669 152.928 319.982 cv
153.667 320.145 154.403 320.317 155.135 320.5 cv
157.133 322.928 159.867 326.367 162.769 330.366 cv
164.673 332.992 166.918 335.115 169.229 337.069 cv
166.024 344.562 161.818 353.866 157.842 361.04 cv
155.557 365.164 150.85 371.758 145.493 378.833 cv
145.391 333.626 mo
143.67 333.626 142.059 334.377 141.122 335.797 cv
139.548 338.18 140.468 341.547 143.175 343.317 cv
144.27 344.033 145.488 344.378 146.656 344.378 cv
148.378 344.378 149.989 343.628 150.927 342.208 cv
152.5 339.825 151.581 336.458 148.873 334.687 cv
147.779 333.972 146.559 333.626 145.391 333.626 cv
115.951 350.673 mo
115.777 350.43 115.618 350.204 115.473 349.997 cv
115.795 349.965 116.106 349.933 116.405 349.901 cv
116.256 350.157 116.104 350.415 115.951 350.673 cv
153.766 318.855 mo
153.579 318.812 153.393 318.771 153.206 318.73 cv
152.151 318.498 151.126 318.263 150.133 318.024 cv
151.248 317.187 151.918 316.703 151.918 316.703 cv
151.918 316.703 152.607 317.479 153.766 318.855 cv
.572549 .698039 .384314 rgb
f
146.661 379.441 mo
146.324 379.271 145.932 379.068 145.493 378.833 cv
150.85 371.758 155.557 365.164 157.842 361.04 cv
161.818 353.866 166.024 344.562 169.229 337.069 cv
169.572 337.359 169.917 337.646 170.262 337.93 cv
167.065 345.39 162.909 354.555 158.971 361.659 cv
156.663 365.825 152.036 372.334 146.661 379.441 cv
116.774 351.812 mo
116.471 351.398 116.196 351.018 115.951 350.673 cv
116.104 350.415 116.256 350.157 116.405 349.901 cv
116.989 349.838 117.524 349.776 117.999 349.717 cv
117.606 350.407 117.197 351.105 116.774 351.812 cv
155.135 320.5 mo
154.403 320.317 153.667 320.145 152.928 319.982 cv
151.501 319.669 150.128 319.349 148.814 319.022 cv
149.302 318.65 149.744 318.315 150.133 318.024 cv
151.126 318.263 152.151 318.498 153.206 318.73 cv
153.393 318.771 153.579 318.812 153.766 318.855 cv
154.169 319.333 154.628 319.884 155.135 320.5 cv
.454902 .615686 .25098 rgb
f
142.214 376.959 mo
138.117 374.47 132.533 370.525 127.722 365.184 cv
123.183 360.144 119.795 355.865 117.57 352.889 cv
119.871 350.495 123.363 349.255 127.266 349.255 cv
130.792 349.255 134.654 350.266 138.281 352.35 cv
146.865 357.282 150.877 366.358 147.243 372.623 cv
146.105 374.585 144.35 376.039 142.214 376.959 cv
f
146.656 344.378 mo
145.488 344.378 144.27 344.033 143.175 343.317 cv
140.468 341.547 139.548 338.18 141.122 335.797 cv
142.059 334.377 143.67 333.626 145.391 333.626 cv
146.559 333.626 147.779 333.972 148.873 334.687 cv
151.581 336.458 152.5 339.825 150.927 342.208 cv
149.989 343.628 148.378 344.378 146.656 344.378 cv
f
120.004 349.141 mo
117.68 349.735 100.03 351.203 95.4282 350.698 cv
90.8252 350.192 82.4325 357.632 75.5132 361.048 cv
68.5938 364.464 59.6455 365.597 55.1084 364.411 cv
50.5727 363.224 57.3828 345.786 68.0967 338.141 cv
78.81 330.494 82.3789 332.174 82.3789 332.174 cv
83.2041 334.591 90.6225 337.003 103.322 337.432 cv
111.933 337.723 119.479 337.754 123.81 339.148 cv
123.821 339.15 li
125.874 339.814 127.205 340.781 127.58 342.228 cv
127.913 343.505 127.634 344.565 127.011 345.443 cv
125.437 347.661 121.668 348.715 120.004 349.141 cv
.839216 .580392 .462745 rgb
f
59.3916 365.123 mo
57.7021 365.123 56.2144 364.966 55.0425 364.659 cv
55.1738 364.163 li
59.4033 365.268 68.3379 364.304 75.3984 360.817 cv
77.8672 359.599 80.5502 357.849 83.1445 356.155 cv
87.9111 353.046 92.4151 350.11 95.4566 350.443 cv
99.9536 350.936 117.592 349.492 119.94 348.893 cv
123.433 347.998 125.741 346.788 126.8 345.295 cv
127.437 344.396 127.616 343.387 127.331 342.292 cv
126.999 341.018 125.83 340.071 123.756 339.399 cv
123.754 339.398 li
120.017 338.197 113.858 338.011 106.727 337.796 cv
105.611 337.762 104.472 337.728 103.313 337.689 cv
91.6201 337.293 83.1088 335.11 82.1348 332.257 cv
82.6231 332.091 li
83.3525 334.228 90.1435 336.729 103.331 337.176 cv
104.489 337.215 105.628 337.249 106.742 337.282 cv
113.903 337.499 120.087 337.685 123.873 338.898 cv
123.901 338.906 li
126.165 339.637 127.451 340.702 127.83 342.164 cv
128.155 343.41 127.951 344.564 127.222 345.591 cv
125.516 347.995 121.416 349.044 120.068 349.39 cv
117.702 349.994 99.9297 351.449 95.4004 350.954 cv
92.5395 350.641 88.1138 353.527 83.4273 356.585 cv
80.8204 358.286 78.124 360.045 75.6279 361.277 cv
70.292 363.912 64.0689 365.123 59.3916 365.123 cv
.768627 .482353 .372549 rgb
f
126.521 346.496 mo
125.742 346.674 125.16 346.683 125.16 346.683 cv
124.799 346.823 122.421 346.989 119.48 346.828 cv
116.539 346.667 114.939 344.443 115.516 341.874 cv
116.095 339.306 118.506 338.884 120.558 339.027 cv
120.558 339.027 122.751 339.117 124.165 339.459 cv
124.177 339.462 li
127.533 340.059 127.898 341.237 128.058 342.655 cv
128.161 343.579 128.062 344.551 127.81 345.345 cv
127.625 345.927 127.124 346.357 126.521 346.496 cv
cp
1 .678431 .670588 rgb
f
147.534 382.66 mo
147.517 382.653 147.438 382.618 147.303 382.556 cv
147.947 381.438 li
148.018 381.471 148.056 381.488 148.06 381.489 cv
147.534 382.66 li
.692918 .76772 .584652 rgb
f
147.303 382.556 mo
147.093 382.458 146.746 382.293 146.283 382.06 cv
146.283 382.06 li
146.283 382.06 li
146.548 381.71 146.811 381.364 147.075 381.018 cv
147.075 381.018 li
147.497 381.229 147.796 381.369 147.947 381.438 cv
147.303 382.556 li
.564706 .705882 .352941 rgb
f
146.283 382.06 mo
145.953 381.894 145.565 381.695 145.125 381.461 cv
145.391 381.114 145.653 380.77 145.915 380.424 cv
146.366 380.662 146.756 380.859 147.075 381.018 cv
146.811 381.364 146.548 381.71 146.283 382.06 cv
146.283 382.06 li
143.972 380.833 mo
143.233 380.422 142.402 379.941 141.498 379.39 cv
140.762 378.94 139.963 378.434 139.118 377.873 cv
139.709 377.768 140.284 377.63 140.839 377.461 cv
141.303 377.758 141.749 378.037 142.174 378.296 cv
143.122 378.874 143.994 379.377 144.759 379.8 cv
144.498 380.143 144.235 380.488 143.972 380.833 cv
116.288 354.545 mo
116.062 354.237 115.847 353.94 115.644 353.657 cv
115.893 353.259 116.137 352.863 116.377 352.469 cv
116.594 352.775 116.828 353.1 117.077 353.442 cv
116.791 353.789 116.527 354.156 116.288 354.545 cv
114.835 352.517 mo
114.367 351.847 113.999 351.305 113.75 350.932 cv
113.913 350.659 114.074 350.388 114.234 350.118 cv
114.398 350.102 114.562 350.087 114.723 350.071 cv
114.911 350.355 115.197 350.78 115.567 351.316 cv
115.328 351.714 115.084 352.113 114.835 352.517 cv
f
145.125 381.461 mo
144.773 381.274 144.387 381.065 143.972 380.833 cv
144.235 380.488 144.498 380.143 144.759 379.8 cv
145.178 380.032 145.565 380.24 145.915 380.424 cv
145.653 380.77 145.391 381.114 145.125 381.461 cv
115.644 353.657 mo
115.348 353.247 115.078 352.865 114.835 352.517 cv
115.084 352.113 115.328 351.714 115.567 351.316 cv
115.803 351.658 116.074 352.045 116.377 352.469 cv
116.137 352.863 115.893 353.259 115.644 353.657 cv
.45098 .623529 .219608 rgb
f
139.118 377.873 mo
135.467 375.446 130.96 371.982 126.984 367.568 cv
122.235 362.299 118.759 357.86 116.674 355.067 cv
116.542 354.89 116.414 354.715 116.288 354.545 cv
116.527 354.156 116.791 353.789 117.077 353.442 cv
117.279 353.718 117.491 354.006 117.711 354.302 cv
119.777 357.074 123.229 361.478 127.943 366.711 cv
132.207 371.443 137.101 375.065 140.839 377.461 cv
140.284 377.63 139.709 377.768 139.118 377.873 cv
f
114.234 350.118 mo
114.316 349.979 114.398 349.84 114.48 349.702 cv
114.516 349.758 114.598 349.884 114.723 350.071 cv
114.562 350.087 114.398 350.102 114.234 350.118 cv
.576471 .509804 .270588 rgb
f
181.815 351.012 mo
181.815 351.012 162.579 373.709 148.055 381.562 cv
148.055 381.562 147.389 381.267 146.254 380.676 cv
145.859 380.473 145.411 380.234 144.91 379.962 cv
144.09 379.514 143.138 378.967 142.094 378.33 cv
138.008 375.835 132.486 371.915 127.722 366.627 cv
123.102 361.498 119.674 357.154 117.451 354.171 cv
116.77 353.258 116.203 352.47 115.749 351.827 cv
115.452 351.412 115.207 351.055 115.008 350.768 cv
114.598 350.169 114.392 349.849 114.392 349.849 cv
114.392 349.849 124.897 344.45 130.876 336.736 cv
136.855 329.022 151.918 318.146 151.918 318.146 cv
151.918 318.146 157.013 323.875 162.77 331.81 cv
168.527 339.744 177.387 343.1 181.815 351.012 cv
cp
.745098 .878431 .537255 rgb
f
179.35 350.985 mo
179.042 351.327 li
179.022 351.35 176.93 353.66 173.711 356.982 cv
167.229 363.672 155.266 375.403 146.254 380.676 cv
145.859 380.473 145.411 380.234 144.91 379.962 cv
153.845 375 166.177 362.909 172.783 356.089 cv
175.267 353.527 177.075 351.571 177.771 350.813 cv
176.745 349.086 175.377 347.453 173.505 345.713 cv
173.206 345.595 li
173.206 345.44 li
171.986 344.329 170.701 343.295 169.344 342.204 cv
166.373 339.809 163.301 337.331 160.83 333.925 cv
159.349 331.887 157.796 329.841 156.213 327.844 cv
153.971 325.01 152.202 322.936 151.454 322.073 cv
150.58 322.718 148.586 324.204 146.187 326.111 cv
141.887 329.533 136.115 334.438 133.048 338.395 cv
127.931 344.997 117.335 350.957 115.749 351.827 cv
115.452 351.412 115.207 351.055 115.008 350.768 cv
115.914 350.272 126.963 344.142 132.027 337.608 cv
135.173 333.556 141.026 328.573 145.382 325.11 cv
148.63 322.525 151.145 320.705 151.17 320.687 cv
151.645 320.343 li
152.032 320.779 li
152.055 320.805 154.227 323.257 157.227 327.048 cv
158.821 329.061 160.384 331.122 161.877 333.176 cv
164.248 336.443 167.252 338.864 170.157 341.205 cv
171.379 342.191 172.638 343.205 173.819 344.263 cv
173.825 344.258 li
174.292 344.688 li
176.458 346.688 177.993 348.563 179.125 350.585 cv
179.35 350.985 li
cp
.513726 .713726 .270588 rgb
f
153.976 344.872 mo
156.163 347.251 156.223 350.74 154.108 352.665 cv
151.995 354.59 148.508 354.222 146.321 351.843 cv
144.134 349.464 144.075 345.976 146.189 344.051 cv
148.303 342.126 151.79 342.494 153.976 344.872 cv
cp
f
196.973 404.298 mo
195.808 413.575 175.225 447.438 172.77 454.175 cv
171.138 458.66 166.803 481.978 164.442 500 cv
120.428 500 li
125.612 488.875 136.685 464.628 138.987 455.6 cv
144.723 433.122 140.63 416.935 141.96 409.935 cv
144.087 398.725 144.51 396.508 144.51 396.508 cv
144.51 396.508 143.438 394.718 141.897 391.938 cv
147.908 381.46 li
148.04 381.52 li
155.06 377.728 163.393 370.385 169.68 364.018 cv
174.86 366.822 181.763 370.577 183.01 371.79 cv
185.025 373.75 198.135 395.018 196.973 404.298 cv
cp
.839216 .580392 .462745 rgb
f
158.686 365.449 mo
157.324 361.71 152.331 361.02 150 363.066 cv
147.668 365.112 147.061 383.083 144.51 396.509 cv
141.96 409.934 142.935 419.522 153.552 421.759 cv
164.168 423.994 165.491 408.463 165.491 408.463 cv
165.491 408.463 162.025 379.604 160.521 372.4 cv
159.569 367.842 158.686 365.449 158.686 365.449 cv
cp
f
153.934 377.074 mo
150.847 377.44 148.993 375.528 148.656 373.394 cv
148.656 373.394 148.36 369.229 148.487 366.727 cv
148.53 365.271 149.076 361.406 151.946 360.837 cv
155.427 360.145 157.234 364.152 157.431 366.011 cv
157.876 370.209 158.21 376.567 153.934 377.074 cv
cp
1 .678431 .670588 rgb
f
144.539 397.617 mo
144.032 397.521 li
145.146 391.656 145.919 384.919 146.602 378.974 cv
147.625 370.055 148.434 363.011 149.978 361.655 cv
150.319 362.04 li
148.924 363.265 148.085 370.571 147.114 379.032 cv
146.431 384.985 145.657 391.733 144.539 397.617 cv
cp
.768627 .482353 .372549 rgb
f
165.491 408.463 mo
164.96 405.892 164.499 401.405 163.965 396.21 cv
162.997 386.794 161.792 375.074 159.569 369.398 cv
160.359 369.101 li
162.624 374.882 163.835 386.663 164.808 396.131 cv
165.34 401.303 165.799 405.77 166.322 408.3 cv
165.491 408.463 li
cp
f
177.464 391.71 mo
172.227 382.158 161.621 374.085 161.514 374.005 cv
162.026 373.341 li
162.134 373.422 172.883 381.601 178.208 391.314 cv
177.464 391.71 li
cp
f
167.162 396.508 mo
166.832 395.574 165.124 393.814 164.494 393.215 cv
165.08 392.613 li
165.327 392.848 167.506 394.944 167.962 396.236 cv
167.162 396.508 li
cp
f
165.417 398.848 mo
164.947 398.148 li
164.996 398.116 169.836 394.969 174.262 393.066 cv
178.862 391.091 181.162 392.138 185.745 394.223 cv
185.792 394.245 li
185.441 395.006 li
185.394 394.984 li
180.905 392.94 178.857 392.007 174.604 393.836 cv
170.245 395.708 165.465 398.816 165.417 398.848 cv
cp
f
166.48 400.382 mo
166.31 399.561 li
166.529 399.517 171.733 398.524 176.637 400.646 cv
176.301 401.412 li
171.64 399.397 166.532 400.372 166.48 400.382 cv
cp
f
173.435 384.31 mo
172.771 383.785 li
174.729 381.353 178.267 380.74 178.417 380.716 cv
178.563 381.542 li
178.529 381.547 175.189 382.129 173.435 384.31 cv
cp
f
154.651 391.319 mo
154.558 391.409 li
153.455 392.479 150.5 392.246 150.47 392.243 cv
150.339 392.232 li
150.277 392.973 li
150.408 392.983 li
150.544 392.995 153.744 393.252 155.1 391.937 cv
155.193 391.847 li
154.651 391.319 li
cp
f
153.689 394.267 mo
153.583 394.341 li
152.123 395.349 149.974 395.184 149.705 395.049 cv
149.592 394.99 li
149.215 395.63 li
149.33 395.693 li
149.427 395.737 li
149.929 395.917 152.26 396.169 154.028 394.947 cv
154.135 394.873 li
153.689 394.267 li
cp
f
98.3813 344.066 mo
98.3052 343.979 li
97.4023 342.949 97.6606 340.242 97.6636 340.215 cv
97.6753 340.095 li
97.0376 340.023 li
97.0249 340.145 li
97.0122 340.269 96.7295 343.2 97.8394 344.468 cv
97.915 344.555 li
98.3813 344.066 li
cp
f
95.8535 343.132 mo
95.7915 343.032 li
94.9492 341.676 95.1328 339.706 95.2549 339.462 cv
95.3071 339.359 li
94.7627 339.002 li
94.7046 339.106 li
94.6655 339.195 li
94.5005 339.652 94.2383 341.786 95.2593 343.431 cv
95.3208 343.53 li
95.8535 343.132 li
cp
f
178.563 350.898 mo
178.563 350.898 176.494 353.186 173.247 356.535 cv
171.08 355.604 169.563 353.46 169.563 350.96 cv
169.563 348.236 171.367 345.932 173.85 345.158 cv
173.853 345.158 li
175.674 346.84 177.314 348.668 178.563 350.898 cv
cp
.513726 .713726 .270588 rgb
f
156.719 327.446 mo
155.623 329.05 153.773 330.103 151.676 330.103 cv
148.854 330.103 146.481 328.198 145.785 325.61 cv
149.058 323.005 151.55 321.205 151.55 321.205 cv
151.55 321.205 153.698 323.623 156.719 327.446 cv
cp
f
142.094 378.33 mo
138.008 375.835 132.486 371.915 127.722 366.627 cv
123.102 361.498 119.674 357.154 117.451 354.171 cv
123.2 350.604 132.138 353.307 137.998 360.597 cv
142.607 366.331 144.018 373.285 142.094 378.33 cv
cp
f
500 324.81 mo
500 364.585 li
499.77 364.6 499.645 364.607 499.645 364.607 cv
499.645 364.607 493.795 349.428 472.848 341.277 cv
451.897 333.128 434.183 332.055 428.143 328.735 cv
422.225 325.482 418.362 310.572 415.915 299.165 cv
415.915 299.165 452.95 297.077 453.747 297.235 cv
459.482 298.383 469.213 302.15 474.795 304.622 cv
483.355 308.415 481.173 313.418 500 324.81 cv
cp
1 .847059 .709804 rgb
f
360.877 222.788 mo
360.877 222.788 375.734 227.372 387.395 239.543 cv
399.055 251.715 410.492 261.333 416.777 264.6 cv
423.063 267.867 442.298 282.717 442.298 282.717 cv
442.298 282.717 443.033 290.735 440.256 299.754 cv
437.477 308.772 439.541 308.714 439.541 308.714 cv
439.541 308.714 401.808 293.935 390.347 287.668 cv
378.994 281.461 348.103 264.712 348.103 264.712 cv
348.103 264.712 350.068 251.605 353.469 241.638 cv
357.564 229.635 360.877 222.788 360.877 222.788 cv
.513726 .713726 .270588 rgb
f
362.374 220.616 mo
362.374 220.616 378.486 224.273 390.147 236.445 cv
401.808 248.617 413.244 258.235 419.529 261.502 cv
425.814 264.769 445.05 279.618 445.05 279.618 cv
445.05 279.618 445.786 287.637 443.008 296.655 cv
440.23 305.675 443.736 308.068 443.736 308.068 cv
443.736 308.068 404.56 290.836 393.099 284.569 cv
381.746 278.362 350.854 261.613 350.854 261.613 cv
350.854 261.613 352.821 248.507 356.222 238.54 cv
360.316 226.537 362.374 220.616 362.374 220.616 cv
.745098 .878431 .537255 rgb
f
364.365 218.277 mo
364.365 218.277 380.478 221.935 392.138 234.106 cv
403.798 246.278 415.235 255.896 421.52 259.163 cv
427.806 262.43 447.041 277.279 447.041 277.279 cv
447.041 277.279 447.776 285.298 444.999 294.317 cv
442.221 303.336 445.093 308.154 445.093 308.154 cv
445.093 308.154 405.391 289.133 394.022 282.956 cv
381.533 276.169 353.772 259.252 353.772 259.252 cv
353.772 259.252 354.811 246.168 358.213 236.202 cv
362.308 224.198 364.365 218.277 364.365 218.277 cv
.513726 .713726 .270588 rgb
f
366.016 216.257 mo
366.016 216.257 382.921 221.276 394.581 233.448 cv
406.242 245.619 417.68 255.238 423.965 258.505 cv
430.249 261.772 449.484 276.621 449.484 276.621 cv
449.484 276.621 450.221 284.64 447.443 293.658 cv
444.665 302.677 447.188 308.37 447.188 308.37 cv
447.188 308.37 409.465 289.272 398.85 281.864 cv
388.234 274.457 356.748 258.66 356.748 258.66 cv
356.748 258.66 357.256 245.51 360.656 235.543 cv
364.752 223.54 366.016 216.257 366.016 216.257 cv
.745098 .878431 .537255 rgb
f
370.213 213.495 mo
370.213 213.495 385.451 220.582 397.112 232.753 cv
408.772 244.924 419.835 254.551 426.12 257.817 cv
432.405 261.084 451.475 277.15 451.475 277.15 cv
451.475 277.15 452.232 286.425 449.455 295.443 cv
446.677 304.463 449.936 309.123 449.936 309.123 cv
449.936 309.123 412.355 287.515 401.739 280.106 cv
391.123 272.698 360.912 255.753 360.912 255.753 cv
360.912 255.753 359.977 243.817 363.377 233.851 cv
367.473 221.848 370.213 213.495 370.213 213.495 cv
.513726 .713726 .270588 rgb
f
374.36 210.752 mo
374.36 210.752 389.6 217.84 401.26 230.011 cv
412.921 242.183 423.244 250.305 429.528 253.572 cv
435.813 256.839 454.883 272.905 454.883 272.905 cv
454.883 272.905 455.642 282.18 452.863 291.198 cv
450.086 300.217 451.677 310.203 451.677 310.203 cv
451.677 310.203 414.571 284.992 403.956 277.585 cv
393.34 270.177 363.817 249.639 363.817 249.639 cv
363.817 249.639 362.957 241.609 366.93 231.859 cv
371.441 220.785 374.36 210.752 374.36 210.752 cv
.745098 .878431 .537255 rgb
f
456.265 306.749 mo
456.265 306.749 416.061 282.3 405.444 274.892 cv
394.828 267.483 368.405 246.184 368.405 246.184 cv
368.405 246.184 370.226 235.341 373.334 225.277 cv
376.443 215.216 380.793 206.801 380.793 206.801 cv
380.793 206.801 381.52 207.377 382.784 208.418 cv
386.799 211.725 396.234 219.729 405.1 228.984 cv
416.761 241.154 427.832 246.851 434.117 250.117 cv
440.402 253.386 459.472 269.45 459.472 269.45 cv
459.472 269.45 460.228 278.727 457.45 287.744 cv
455.695 293.44 455.685 299.524 455.915 303.232 cv
456.048 305.394 456.265 306.749 456.265 306.749 cv
.513726 .713726 .270588 rgb
f
459.982 304.923 mo
459.982 304.923 419.175 280.318 408.669 272.752 cv
398.164 265.186 374.245 243.907 374.245 243.907 cv
374.245 243.907 373.923 231.076 377.182 221.062 cv
378.297 217.638 379.822 214.507 381.345 211.873 cv
382.19 210.408 383.036 209.097 383.811 207.971 cv
384.405 207.106 384.96 206.35 385.44 205.722 cv
386.501 204.332 387.202 203.554 387.202 203.554 cv
387.202 203.554 398.498 214.057 409.977 226.401 cv
420.189 237.387 430.015 243.238 436.449 246.761 cv
437.247 247.197 437.991 247.598 438.678 247.968 cv
444.912 251.329 463.741 267.677 463.741 267.677 cv
463.741 267.677 464.363 276.961 461.451 285.938 cv
458.539 294.914 459.982 304.923 459.982 304.923 cv
.745098 .878431 .537255 rgb
f
388.238 208.735 mo
387.332 209.817 384.979 212.777 382.795 216.794 cv
381.505 219.165 380.469 221.539 379.717 223.852 cv
378.606 227.265 377.89 231.253 377.587 235.706 cv
377.35 239.212 377.454 241.929 377.494 242.716 cv
378.054 243.216 379.897 244.865 382.454 247.125 cv
390.104 253.89 403.935 265.958 410.616 270.77 cv
419.096 276.876 450.378 296.72 456.369 300.514 cv
456.147 297.87 455.889 291.272 457.976 284.843 cv
458.833 282.199 459.438 279.244 459.769 276.061 cv
460.145 272.485 460.061 269.67 460.024 268.85 cv
459.439 268.363 457.574 266.819 455.127 264.831 cv
449.574 260.319 439.695 252.447 435.928 250.418 cv
435.764 250.329 li
429.953 247.198 420.228 241.956 409.922 230.873 cv
403.966 224.467 397.548 217.972 393.213 213.65 cv
390.828 211.271 389.025 209.503 388.238 208.735 cv
376.384 243.255 mo
376.368 243.022 li
376.359 242.896 376.16 239.869 376.448 235.625 cv
376.758 231.078 377.492 226.996 378.631 223.494 cv
379.405 221.114 380.469 218.675 381.792 216.243 cv
384.624 211.033 387.649 207.656 387.777 207.514 cv
388.173 207.076 li
388.597 207.488 li
388.618 207.509 390.785 209.615 394.017 212.838 cv
398.358 217.166 404.787 223.673 410.755 230.092 cv
420.934 241.036 430.554 246.222 436.302 249.319 cv
436.466 249.408 li
440.316 251.481 450.26 259.403 455.844 263.94 cv
458.811 266.352 460.924 268.11 460.945 268.128 cv
461.135 268.286 li
461.151 268.532 li
461.16 268.664 461.363 271.83 460.905 276.184 cv
460.564 279.446 459.944 282.48 459.061 285.2 cv
456.51 293.062 457.613 301.467 457.625 301.551 cv
457.79 302.766 li
456.756 302.112 li
456.383 301.876 419.324 278.449 409.952 271.701 cv
403.23 266.859 389.366 254.764 381.7 247.984 cv
378.625 245.266 376.578 243.43 376.558 243.411 cv
376.384 243.255 li
.513726 .713726 .270588 rgb
f
412.408 272.73 mo
406.724 269.44 405.722 260.472 410.17 252.698 cv
414.619 244.925 422.834 241.29 428.519 244.579 cv
434.203 247.868 435.205 256.836 430.756 264.61 cv
426.308 272.384 418.093 276.018 412.408 272.73 cv
f
460.338 276.122 mo
457.092 276.647 453.904 274.63 453.026 271.369 cv
452.301 268.677 453.363 265.925 455.485 264.386 cv
458.484 266.822 460.581 268.568 460.581 268.568 cv
460.581 268.568 460.796 271.768 460.338 276.122 cv
cp
f
401.917 242.003 mo
400.647 244.221 398.032 245.102 396.076 243.969 cv
394.12 242.837 393.563 240.122 394.833 237.903 cv
396.102 235.685 398.717 234.805 400.673 235.936 cv
402.63 237.069 403.186 239.785 401.917 242.003 cv
f
445.928 274.929 mo
444.659 277.147 442.044 278.027 440.088 276.896 cv
438.131 275.764 437.574 273.048 438.844 270.829 cv
440.113 268.611 442.729 267.73 444.685 268.862 cv
446.641 269.995 447.197 272.711 445.928 274.929 cv
cp
f
388.871 218.485 mo
386.406 219.149 383.889 218.307 382.293 216.518 cv
385.126 211.308 388.2 207.9 388.2 207.9 cv
388.2 207.9 390.349 209.986 393.614 213.244 cv
393.202 215.695 391.417 217.799 388.871 218.485 cv
f
382.077 247.555 mo
378.968 244.806 376.938 242.984 376.938 242.984 cv
376.938 242.984 376.729 239.919 377.018 235.666 cv
380.413 234.912 383.835 236.971 384.755 240.381 cv
385.508 243.176 384.349 246.035 382.077 247.555 cv
cp
f
433.473 253.267 mo
433.363 252.02 433.105 250.834 432.704 249.744 cv
433.169 248.917 li
433.983 249.368 434.748 249.782 435.458 250.164 cv
433.473 253.267 li
.572549 .698039 .384314 rgb
f
435.458 250.164 mo
434.748 249.782 433.983 249.368 433.169 248.917 cv
433.505 248.32 li
434.312 248.778 435.083 249.206 435.814 249.607 cv
435.458 250.164 li
.454902 .615686 .25098 rgb
f
411.132 251.165 mo
408.279 246.907 405.266 242.488 402.514 238.61 cv
402.298 237.492 401.665 236.511 400.673 235.936 cv
400.63 235.912 400.588 235.888 400.545 235.866 cv
397.926 232.265 395.679 229.389 394.239 227.958 cv
392.503 226.231 389.69 222.785 386.509 218.677 cv
386.728 218.699 386.949 218.711 387.171 218.711 cv
387.733 218.711 388.303 218.638 388.871 218.485 cv
388.902 218.476 388.933 218.468 388.964 218.459 cv
390.126 219.848 391.133 220.982 391.92 221.764 cv
394.317 224.148 398.954 230.542 403.823 237.617 cv
403.823 237.617 li
403.827 237.621 li
406.076 241.413 408.459 244.873 410.812 247.965 cv
410.812 247.965 li
411.243 248.613 411.667 249.252 412.083 249.882 cv
411.754 250.292 411.437 250.72 411.132 251.165 cv
.572549 .698039 .384314 rgb
f
423.119 269.452 mo
423.119 269.452 417.531 260.715 411.132 251.165 cv
411.437 250.72 411.754 250.292 412.083 249.882 cv
417.002 257.319 420.801 263.26 420.801 263.26 cv
422.164 261.126 li
423.64 263.177 424.487 264.355 424.487 264.355 cv
432.704 249.744 li
433.105 250.834 433.363 252.02 433.473 253.267 cv
423.119 269.452 li
.454902 .615686 .25098 rgb
f
402.514 238.61 mo
401.84 237.659 401.181 236.741 400.545 235.866 cv
400.588 235.888 400.63 235.912 400.673 235.936 cv
401.665 236.511 402.298 237.492 402.514 238.61 cv
f
383.021 214.106 mo
382.464 213.368 381.904 212.622 381.345 211.873 cv
381.694 211.268 382.043 210.689 382.388 210.138 cv
382.971 210.903 383.547 211.654 384.112 212.384 cv
383.757 212.921 383.391 213.496 383.021 214.106 cv
.572549 .698039 .384314 rgb
f
383.392 214.599 mo
383.268 214.435 383.145 214.271 383.021 214.106 cv
383.391 213.496 383.757 212.921 384.112 212.384 cv
384.236 212.544 384.36 212.704 384.483 212.863 cv
384.128 213.405 383.762 213.985 383.392 214.599 cv
.454902 .615686 .25098 rgb
f
387.171 218.711 mo
386.949 218.711 386.728 218.699 386.509 218.677 cv
385.5 217.373 384.453 216.002 383.392 214.599 cv
383.762 213.985 384.128 213.405 384.483 212.863 cv
386.113 214.962 387.639 216.876 388.964 218.459 cv
388.933 218.468 388.902 218.476 388.871 218.485 cv
388.303 218.638 387.733 218.711 387.171 218.711 cv
f
400.896 161.495 mo
391.701 151.182 li
391.701 151.182 362.888 180.593 363.23 181.288 cv
363.573 181.982 368.803 189.035 373.355 194.302 cv
377.908 199.569 424.487 264.355 424.487 264.355 cv
438.183 240.002 li
438.183 240.002 427.143 223.023 420.939 198.955 cv
414.736 174.886 400.896 161.495 400.896 161.495 cv
.513726 .713726 .270588 rgb
f
420.801 263.26 mo
420.801 263.26 416.332 256.271 410.812 247.965 cv
408.579 244.609 406.177 241.036 403.827 237.621 cv
403.823 237.617 li
398.954 230.542 394.317 224.148 391.92 221.764 cv
385.498 215.381 364.367 185.506 364.367 185.506 cv
393.585 155.199 li
396.181 158.389 li
397.658 160.204 li
397.658 160.204 416.826 186.658 419.659 201.548 cv
422.491 216.437 436.522 238.679 436.522 238.679 cv
422.285 260.936 li
420.801 263.26 li
.745098 .878431 .537255 rgb
f
393.895 161.375 mo
369.16 186.427 li
369.811 187.343 371.548 189.787 373.821 192.937 cv
379.726 201.112 390.228 215.42 394.229 219.398 cv
399.698 224.833 417.247 252.009 420.465 257.018 cv
434.276 235.426 li
432.514 232.995 422.018 218.183 418.664 205.737 cv
418.433 204.877 418.235 204.03 418.077 203.197 cv
415.911 191.807 402.602 172.835 398.573 167.293 cv
397.745 166.15 397.243 165.489 397.238 165.482 cv
393.895 161.375 li
367.674 186.303 mo
393.976 159.664 li
398.134 164.773 li
398.15 164.795 398.659 165.465 399.496 166.619 cv
403.559 172.21 416.988 191.358 419.198 202.985 cv
421.757 216.436 435.291 234.88 435.427 235.065 cv
435.662 235.383 li
420.467 259.138 li
419.986 258.386 li
419.779 258.063 399.239 225.987 393.428 220.212 cv
389.571 216.379 380.135 203.629 372.897 193.608 cv
370 189.593 367.972 186.724 367.951 186.696 cv
367.674 186.303 li
.513726 .713726 .270588 rgb
f
399.164 224.669 mo
392.858 221.021 391.747 211.073 396.682 202.45 cv
401.617 193.827 410.728 189.794 417.034 193.443 cv
423.34 197.092 424.451 207.04 419.517 215.663 cv
414.582 224.285 405.47 228.318 399.164 224.669 cv
f
398.542 192.724 mo
397.134 195.184 394.232 196.161 392.063 194.905 cv
389.893 193.649 389.275 190.637 390.683 188.176 cv
392.091 185.716 394.992 184.739 397.162 185.995 cv
399.332 187.25 399.949 190.263 398.542 192.724 cv
f
374.18 193.106 mo
373.906 193.18 373.633 193.235 373.359 193.272 cv
370.43 189.213 368.417 186.365 368.417 186.365 cv
374.474 180.229 li
376.56 180.906 378.273 182.597 378.89 184.881 cv
379.854 188.463 377.747 192.145 374.18 193.106 cv
cp
f
396.395 168.359 mo
393.512 169.136 390.556 167.896 389.022 165.496 cv
393.936 160.52 li
397.692 165.135 li
397.692 165.135 398.191 165.793 399.034 166.955 cv
398.296 167.6 397.402 168.088 396.395 168.359 cv
f
410.812 247.965 mo
410.812 247.965 li
408.459 244.873 406.076 241.413 403.827 237.621 cv
403.823 237.617 li
403.823 237.617 li
403.823 237.617 li
403.827 237.621 li
406.177 241.036 408.579 244.609 410.812 247.965 cv
410.812 247.965 li
.486274 .607843 .309804 rgb
f
422.285 260.936 mo
421.715 260.382 421.108 259.78 420.471 259.131 cv
435.074 236.303 li
435.975 237.811 436.522 238.679 436.522 238.679 cv
422.285 260.936 li
420.447 259.107 mo
417.651 256.26 414.265 252.509 410.812 247.965 cv
410.812 247.965 li
408.579 244.609 406.177 241.036 403.827 237.621 cv
403.823 237.617 li
403.823 237.617 li
401.59 233.857 399.488 229.77 397.675 225.39 cv
405.841 236.296 419.816 258.119 419.986 258.386 cv
420.447 259.107 li
420.465 257.018 mo
417.792 252.857 405.228 233.397 397.917 223.813 cv
398.307 224.128 398.723 224.414 399.164 224.669 cv
400.741 225.582 402.493 226.014 404.312 226.014 cv
409.766 226.014 415.816 222.128 419.517 215.663 cv
420.11 214.625 420.617 213.568 421.037 212.506 cv
425.469 223.052 432.826 233.427 434.276 235.426 cv
420.465 257.018 li
428.647 224.718 mo
426.189 220.601 423.545 215.701 421.614 210.873 cv
421.741 210.466 421.855 210.06 421.958 209.654 cv
423.779 214.744 426.254 220.053 428.647 224.718 cv
.572549 .698039 .384314 rgb
f
420.471 259.131 mo
420.463 259.123 420.455 259.115 420.447 259.107 cv
419.986 258.386 li
419.816 258.119 405.841 236.296 397.675 225.39 cv
397.273 224.42 396.885 223.433 396.513 222.434 cv
396.936 222.939 397.404 223.4 397.917 223.813 cv
405.228 233.397 417.792 252.857 420.465 257.018 cv
434.276 235.426 li
432.826 233.427 425.469 223.052 421.037 212.506 cv
421.252 211.963 421.444 211.418 421.614 210.873 cv
423.545 215.701 426.189 220.601 428.647 224.718 cv
431.167 229.63 433.596 233.828 435.074 236.303 cv
420.471 259.131 li
.454902 .615686 .25098 rgb
f
393.608 212.932 mo
391.96 206.204 391.002 199.513 390.489 193.268 cv
390.85 193.94 391.379 194.51 392.063 194.905 cv
392.705 195.277 393.411 195.453 394.123 195.453 cv
395.819 195.453 397.551 194.456 398.542 192.724 cv
399.949 190.263 399.332 187.25 397.162 185.995 cv
396.52 185.623 395.814 185.447 395.101 185.447 cv
393.406 185.447 391.674 186.444 390.683 188.176 cv
390.488 188.516 390.332 188.867 390.214 189.222 cv
389.725 180.236 390.109 172.438 390.563 167.183 cv
391.72 168.08 393.157 168.59 394.658 168.59 cv
395.231 168.59 395.815 168.516 396.395 168.359 cv
397.207 168.141 397.945 167.781 398.587 167.312 cv
401.5 171.321 409.201 182.262 414.092 192.322 cv
413.373 192.172 412.635 192.098 411.886 192.098 cv
406.433 192.098 400.383 195.983 396.682 202.45 cv
394.71 205.894 393.704 209.551 393.608 212.932 cv
417.118 193.492 mo
417.091 193.476 417.062 193.459 417.034 193.443 cv
416.555 193.166 416.061 192.933 415.552 192.743 cv
410.629 182.305 402.501 170.754 399.496 166.619 cv
398.659 165.465 398.15 164.795 398.134 164.773 cv
393.976 159.664 li
391.033 162.643 li
391.232 161.019 391.38 160.125 391.38 160.125 cv
391.38 160.125 393.167 159.351 396.181 158.389 cv
397.658 160.204 li
397.658 160.204 411.076 178.722 417.118 193.492 cv
.572549 .698039 .384314 rgb
f
415.552 192.743 mo
415.076 192.565 414.589 192.425 414.092 192.322 cv
409.201 182.262 401.5 171.321 398.587 167.312 cv
398.742 167.199 398.891 167.08 399.034 166.955 cv
398.191 165.793 397.692 165.135 397.692 165.135 cv
393.936 160.52 li
390.924 163.57 li
390.962 163.238 390.998 162.93 391.033 162.643 cv
393.976 159.664 li
398.134 164.773 li
398.15 164.795 398.659 165.465 399.496 166.619 cv
402.501 170.754 410.629 182.305 415.552 192.743 cv
.454902 .615686 .25098 rgb
f
404.312 226.014 mo
402.493 226.014 400.741 225.582 399.164 224.669 cv
398.723 224.414 398.307 224.128 397.917 223.813 cv
397.404 223.4 396.936 222.939 396.513 222.434 cv
395.57 219.897 394.729 217.27 394.02 214.558 cv
393.878 214.015 393.741 213.474 393.608 212.932 cv
393.704 209.551 394.71 205.894 396.682 202.45 cv
400.383 195.983 406.433 192.098 411.886 192.098 cv
412.635 192.098 413.373 192.172 414.092 192.322 cv
414.589 192.425 415.076 192.565 415.552 192.743 cv
416.061 192.933 416.555 193.166 417.034 193.443 cv
417.062 193.459 417.091 193.476 417.118 193.492 cv
418.298 196.376 419.196 199.116 419.659 201.548 cv
420.142 204.086 420.949 206.836 421.958 209.654 cv
421.855 210.06 421.741 210.466 421.614 210.873 cv
421.444 211.418 421.252 211.963 421.037 212.506 cv
420.617 213.568 420.11 214.625 419.517 215.663 cv
415.816 222.128 409.766 226.014 404.312 226.014 cv
f
394.123 195.453 mo
393.411 195.453 392.705 195.277 392.063 194.905 cv
391.379 194.51 390.85 193.94 390.489 193.268 cv
390.377 191.897 390.286 190.547 390.214 189.222 cv
390.332 188.867 390.488 188.516 390.683 188.176 cv
391.674 186.444 393.406 185.447 395.101 185.447 cv
395.814 185.447 396.52 185.623 397.162 185.995 cv
399.332 187.25 399.949 190.263 398.542 192.724 cv
397.551 194.456 395.819 195.453 394.123 195.453 cv
f
394.658 168.59 mo
393.157 168.59 391.72 168.08 390.563 167.183 cv
390.684 165.793 390.809 164.579 390.924 163.57 cv
393.936 160.52 li
397.692 165.135 li
397.692 165.135 398.191 165.793 399.034 166.955 cv
398.891 167.08 398.742 167.199 398.587 167.312 cv
397.945 167.781 397.207 168.141 396.395 168.359 cv
395.815 168.516 395.231 168.59 394.658 168.59 cv
f
500 237.958 mo
500 305.725 li
491.572 286.46 475.117 252.17 472.253 251.407 cv
468.545 250.417 459.737 245.9 453.468 239.808 cv
447.2 233.715 437.433 226.248 434.452 223.897 cv
431.475 221.545 422.918 217.777 419.09 216.865 cv
418.772 216.788 418.45 216.708 418.122 216.62 cv
415.38 215.89 412.433 214.822 411.173 214.35 cv
410.78 214.203 410.537 213.813 410.575 213.397 cv
410.628 212.835 410.768 212.05 411.138 211.467 cv
411.285 211.237 411.468 211.035 411.695 210.895 cv
412.923 210.13 417.947 207.803 424.85 207.712 cv
431.755 207.62 443.765 214.127 444.29 214.595 cv
444.938 215.17 448.485 212.215 448.485 212.215 cv
448.105 208.928 453.395 204.5 453.395 204.5 cv
450.412 203.4 446.945 197.373 446.945 197.373 cv
442.593 198.035 433.165 195.833 433.165 195.833 cv
433.165 195.833 429.14 199.02 422.81 200.91 cv
416.482 202.803 412.145 199.933 410.857 198.803 cv
409.567 197.672 410.425 196.685 410.425 196.685 cv
410.143 196.565 409.88 196.345 409.66 196.072 cv
409.025 195.295 408.732 194.1 409.34 193.723 cv
409.692 193.502 411 192.985 412.372 192.467 cv
413.96 191.87 415.635 191.268 416.03 191.127 cv
416.117 191.098 li
415.827 190.822 415.832 189.57 416.545 188.897 cv
416.963 188.505 418.68 187.342 420.362 186.31 cv
421.56 185.572 422.737 184.902 423.415 184.625 cv
425.043 183.953 428.55 182.112 430.723 181.215 cv
432.89 180.32 444.955 176.678 446.1 176.703 cv
448.442 176.75 457.96 179.415 463.747 180.982 cv
469.54 182.55 472.245 182.835 476.195 185.55 cv
480.143 188.26 489.527 216.638 494.035 227.618 cv
495.093 230.192 497.275 233.853 500 237.958 cv
cp
1 .847059 .709804 rgb
f
427.081 219.835 mo
424.093 218.487 421.001 217.321 419.089 216.864 cv
418.772 216.788 418.449 216.707 418.124 216.62 cv
418.121 216.619 li
415.381 215.889 412.434 214.82 411.175 214.351 cv
410.78 214.202 410.536 213.812 410.576 213.397 cv
410.629 212.833 410.77 212.049 411.137 211.468 cv
411.284 211.236 411.467 211.037 411.696 210.896 cv
412.808 210.204 417.037 208.226 422.958 207.795 cv
423.865 212.106 425.356 216.171 427.081 219.835 cv
cp
f
432.799 195.666 mo
433.106 195.333 li
433.091 195.319 431.536 193.873 431.159 191.393 cv
430.708 191.458 li
431.11 194.103 432.73 195.603 432.799 195.666 cv
cp
.937255 .694118 .560784 rgb
f
447.142 197.492 mo
449.14 194.203 li
448.749 193.968 li
446.751 197.257 li
447.142 197.492 li
cp
f
453.556 204.661 mo
455.4 202.851 458.439 201.618 458.471 201.605 cv
458.297 201.186 li
458.169 201.237 455.142 202.466 453.234 204.338 cv
453.556 204.661 li
cp
f
448.6 212.41 mo
449.53 211.871 450.396 211.507 451.314 211.123 cv
452.968 210.431 454.678 209.715 456.745 207.907 cv
456.442 207.567 li
454.431 209.326 452.755 210.028 451.135 210.706 cv
450.244 211.079 449.323 211.465 448.368 212.019 cv
448.6 212.41 li
cp
f
462.46 185.136 mo
462.542 185.116 470.711 183.096 473.192 184.064 cv
473.357 183.644 li
470.739 182.622 462.688 184.612 462.347 184.697 cv
462.46 185.136 li
cp
f
410.425 196.685 mo
410.425 196.685 409.568 197.672 410.857 198.802 cv
414.544 197.864 416.485 195.74 416.016 193.974 cv
416.016 193.974 413.353 195.292 410.425 196.685 cv
cp
1 .678431 .670588 rgb
f
410.521 196.89 mo
410.573 196.866 415.701 194.495 419.651 192.321 cv
421.411 191.353 424.068 189.579 426.637 187.862 cv
429.7 185.816 432.869 183.7 434.202 183.178 cv
435.179 182.795 441.419 183.221 450.895 184.316 cv
458.777 185.228 466.117 186.283 466.596 186.507 cv
466.527 186.442 li
466.913 186.202 li
466.837 186.082 466.76 185.958 461.896 185.266 cv
458.815 184.828 454.943 184.332 451.272 183.905 cv
445.464 183.229 435.501 182.182 434.032 182.757 cv
432.653 183.297 429.606 185.333 426.381 187.487 cv
423.819 189.197 421.171 190.967 419.429 191.925 cv
415.493 194.091 410.378 196.456 410.327 196.479 cv
410.521 196.89 li
cp
.937255 .694118 .560784 rgb
f
416.172 191.317 mo
420.779 190.211 423.172 189.615 423.285 189.544 cv
423.041 189.161 li
423.163 189.353 li
423.067 189.147 li
422.823 189.241 418.744 190.233 416.063 190.877 cv
416.172 191.317 li
cp
.768627 .482353 .372549 rgb
f
409.659 196.072 mo
412.342 194.888 li
414.792 193.677 415.921 192.349 416.117 191.097 cv
416.117 191.097 414.187 191.783 412.372 192.467 cv
410.999 192.985 409.692 193.503 409.341 193.722 cv
408.733 194.1 409.024 195.295 409.659 196.072 cv
cp
1 .678431 .670588 rgb
f
410.572 213.43 mo
410.537 213.829 410.777 214.202 411.156 214.344 cv
412.405 214.812 415.367 215.886 418.122 216.619 cv
418.123 216.619 li
418.48 215.908 li
419.106 214.097 415.959 211.648 411.995 211.481 cv
411.672 211.467 411.388 211.464 411.139 211.468 cv
410.762 212.063 410.623 212.866 410.572 213.43 cv
cp
.937255 .54902 .537255 rgb
f
415.981 190.821 mo
419.727 189.451 420.187 188.287 420.362 186.31 cv
418.681 187.344 416.963 188.506 416.545 188.898 cv
415.831 189.57 415.692 190.547 415.981 190.821 cv
cp
1 .678431 .670588 rgb
f
442.063 322.41 mo
438.203 317.55 441.946 310.247 431.605 293.554 cv
426.532 285.363 422.065 276.805 424.856 273.987 cv
427.702 271.114 434.841 275.929 438.635 283.09 cv
440.892 287.352 447.879 296.095 451.793 299.601 cv
455.746 303.142 476.033 309.947 478.609 323.793 cv
479.482 328.482 470.222 328.102 460.806 326.566 cv
451.51 325.051 442.063 322.41 442.063 322.41 cv
cp
1 .847059 .709804 rgb
f
441.899 322.532 mo
442.229 322.289 li
440.762 320.443 440.418 318.25 439.941 315.215 cv
439.437 311.999 438.808 307.997 436.574 302.635 cv
436.192 302.789 li
438.409 308.109 439.033 312.087 439.535 315.283 cv
440.021 318.374 440.371 320.608 441.899 322.532 cv
cp
.937255 .694118 .560784 rgb
f
478.812 323.754 mo
477.953 319.139 475.133 314.919 470.19 310.854 cv
466.032 307.433 461.262 304.851 457.428 302.775 cv
454.904 301.408 452.911 300.33 451.936 299.455 cv
450.842 298.477 449.448 297.03 447.905 295.274 cv
447.589 295.532 li
449.142 297.299 450.546 298.756 451.65 299.745 cv
452.661 300.65 454.672 301.739 457.219 303.118 cv
464.895 307.273 476.494 313.553 478.407 323.833 cv
478.812 323.754 li
cp
f
431.757 273.282 mo
433.096 274.537 434.376 276.511 435.023 278.08 cv
435.868 280.128 434.902 282.292 432.703 282.429 cv
430.503 282.565 429.112 281.211 428.568 280.336 cv
426.814 277.514 426.312 276.189 425.836 274.432 cv
425.319 272.522 427.886 270.626 430.017 271.785 cv
431.013 272.327 431.757 273.282 431.757 273.282 cv
cp
.937255 .54902 .537255 rgb
f
439.403 293.53 mo
439.145 293.709 438.966 293.815 438.939 293.831 cv
438.752 293.484 li
438.776 293.47 441.235 291.99 441.657 290.43 cv
442.041 290.518 li
441.69 291.815 440.181 292.995 439.403 293.53 cv
cp
.937255 .694118 .560784 rgb
f
440.304 296.095 mo
439.843 296.412 439.463 296.585 439.32 296.599 cv
439.305 296.195 li
439.511 296.168 441.364 295.171 442.145 293.368 cv
442.507 293.515 li
441.992 294.705 441.043 295.586 440.304 296.095 cv
cp
f
430.469 321.395 mo
430.475 321.351 431.104 316.924 434.712 314.135 cv
434.475 313.825 li
430.733 316.716 430.088 321.3 430.081 321.346 cv
430.469 321.395 li
cp
f
428.535 265.131 mo
428.535 265.131 403.332 245.167 395.242 214.229 cv
388.116 186.977 392.603 159.795 392.603 159.795 cv
392.603 159.795 399.838 156.663 409.751 155.174 cv
419.665 153.683 431.429 158.186 431.429 158.186 cv
431.429 158.186 427.634 163.997 425.916 183.465 cv
425.577 187.298 425.321 191.662 425.188 196.618 cv
425.157 197.788 425.175 198.945 425.239 200.087 cv
425.39 202.739 425.784 205.313 426.361 207.784 cv
425.838 207.73 425.333 207.706 424.853 207.711 cv
417.948 207.801 412.922 210.131 411.696 210.896 cv
411.467 211.037 411.284 211.236 411.137 211.468 cv
410.77 212.049 410.629 212.833 410.576 213.397 cv
410.536 213.812 410.78 214.202 411.175 214.351 cv
412.434 214.82 415.381 215.889 418.121 216.619 cv
418.124 216.62 li
418.449 216.707 418.772 216.788 419.089 216.864 cv
422.158 217.597 428.271 220.165 432.105 222.368 cv
437.35 231.815 443.652 237.756 443.652 237.756 cv
428.535 265.131 li
cp
.745098 .878431 .537255 rgb
f
441.129 238.162 mo
440.791 237.821 li
440.772 237.802 438.916 235.904 436.45 232.69 cv
434.236 229.809 431.383 225.659 428.899 220.686 cv
428.305 220.398 427.696 220.114 427.081 219.835 cv
429.756 225.53 432.99 230.263 435.448 233.466 cv
437.372 235.975 438.909 237.669 439.558 238.364 cv
427.933 258.927 li
426.975 258.136 424.887 256.341 422.234 253.661 cv
415.498 246.853 403.438 232.548 398.405 213.278 cv
393.757 195.501 394.828 177.532 395.879 168.401 cv
396.21 165.514 396.542 163.516 396.677 162.75 cv
397.492 162.459 399.81 161.685 403.433 160.864 cv
405.712 160.35 408.101 159.901 410.527 159.537 cv
413.632 159.069 416.913 159.089 420.278 159.597 cv
423.34 160.058 425.677 160.812 426.708 161.182 cv
426.381 162.089 425.764 164.023 425.078 167.289 cv
424.291 171.016 423.362 176.747 422.715 184.958 cv
422.412 188.799 422.175 193.185 422.042 198.158 cv
422.015 199.148 422.028 200.133 422.079 201.11 cv
422.189 203.388 422.498 205.624 422.958 207.795 cv
423.374 207.762 423.803 207.739 424.236 207.725 cv
423.75 205.46 423.429 203.128 423.33 200.749 cv
423.293 199.903 423.284 199.051 423.309 198.196 cv
423.447 192.934 423.709 188.339 424.036 184.354 cv
424.674 176.588 425.563 171.134 426.319 167.555 cv
427.274 163.002 428.099 161.089 428.107 161.071 cv
428.37 160.478 li
427.771 160.226 li
427.651 160.177 424.788 158.99 420.464 158.34 cv
416.976 157.813 413.566 157.793 410.336 158.281 cv
407.878 158.648 405.462 159.1 403.15 159.623 cv
398.481 160.68 395.993 161.643 395.888 161.682 cv
395.563 161.809 li
395.498 162.153 li
395.479 162.246 395.056 164.462 394.622 168.252 cv
393.558 177.471 392.478 195.622 397.181 213.598 cv
397.227 213.78 397.275 213.959 397.324 214.141 cv
402.521 233.428 414.575 247.72 421.337 254.557 cv
425.057 258.315 427.624 260.312 427.73 260.394 cv
428.308 260.842 li
441.129 238.162 li
cp
.513726 .713726 .270588 rgb
f
425.699 167.422 mo
423.079 167.509 420.646 165.782 419.933 163.131 cv
419.541 161.677 419.737 160.207 420.371 158.969 cv
424.668 159.616 427.529 160.813 427.529 160.813 cv
427.529 160.813 426.686 162.724 425.699 167.422 cv
cp
f
400.141 169.239 mo
398.39 169.711 396.611 169.321 395.251 168.328 cv
395.687 164.516 396.119 162.276 396.119 162.276 cv
396.119 162.276 398.615 161.303 403.291 160.243 cv
403.698 160.8 404.01 161.441 404.2 162.146 cv
405.033 165.236 403.216 168.411 400.141 169.239 cv
cp
f
437.222 243.784 mo
435.288 243.274 433.672 241.763 433.112 239.687 cv
432.397 237.034 433.637 234.315 435.949 233.078 cv
438.472 236.367 440.342 238.266 440.342 238.266 cv
437.222 243.784 li
cp
f
428.117 259.892 mo
428.117 259.892 425.519 257.88 421.786 254.109 cv
422.44 252.48 423.818 251.171 425.635 250.682 cv
428.1 250.018 430.623 251.063 431.958 253.097 cv
428.117 259.892 li
cp
f
396.8 209.859 mo
395.103 201.07 402.68 196.588 409.866 196.299 cv
411.896 196.215 413.896 196.47 415.646 197.052 cv
418.199 197.903 420.178 199.454 421.467 201.249 cv
422.276 202.377 422.813 203.6 423.046 204.805 cv
423.227 205.738 423.242 206.749 423.086 207.784 cv
417.098 208.196 412.813 210.197 411.696 210.896 cv
411.467 211.037 411.284 211.236 411.137 211.468 cv
410.77 212.049 410.629 212.833 410.576 213.397 cv
410.536 213.812 410.78 214.202 411.175 214.351 cv
412.244 214.75 414.535 215.583 416.881 216.27 cv
409.984 220.229 398.756 219.969 396.8 209.859 cv
cp
f
425.556 236.064 mo
424.147 238.524 421.247 239.501 419.077 238.246 cv
416.907 236.99 416.289 233.978 417.697 231.517 cv
419.105 229.056 422.006 228.08 424.176 229.335 cv
426.346 230.591 426.964 233.604 425.556 236.064 cv
cp
f
409.814 183.008 mo
407.004 182.677 404.957 180.385 405.243 177.89 cv
405.529 175.395 408.039 173.641 410.85 173.972 cv
413.66 174.303 415.707 176.594 415.421 179.089 cv
415.136 181.585 412.625 183.339 409.814 183.008 cv
cp
f
344.965 423.732 mo
339.24 431.135 318.813 432.745 314.048 437.872 cv
307.98 444.405 297.282 459.72 288.5 464.365 cv
279.718 469.01 272.947 473.393 261.452 486.668 cv
257.617 491.095 253.353 495.755 249.37 500 cv
189.033 500 li
204.842 485.86 252.83 449.135 258.518 438.44 cv
265.607 425.1 279.73 405.987 283.515 403.202 cv
292.3 396.747 313.94 389.865 313.94 389.865 cv
313.94 389.865 335.56 384.82 344.072 398.68 cv
352.588 412.54 349.543 417.813 344.965 423.732 cv
cp
.52549 .27451 .203922 rgb
f
292.557 407.429 mo
292.514 407.395 288.294 404.019 285.86 403.426 cv
285.99 402.913 li
288.54 403.534 292.719 406.877 292.896 407.019 cv
292.557 407.429 li
cp
.407843 .188235 .137255 rgb
f
313.416 435.723 mo
313.345 435.593 311.676 432.516 312.338 429.772 cv
312.395 429.536 li
312.997 427.051 313.395 425.409 311.884 423.88 cv
312.268 423.511 li
313.984 425.247 313.536 427.097 312.916 429.657 cv
312.858 429.894 li
312.244 432.438 313.87 435.439 313.887 435.47 cv
313.416 435.723 li
cp
f
308.824 440.612 mo
308.688 439.577 307.114 434.772 304.956 433.485 cv
305.234 433.034 li
307.58 434.433 309.207 439.419 309.354 440.543 cv
308.824 440.612 li
cp
f
313.672 426.616 mo
313.486 426.122 li
322.992 422.606 li
323.179 423.101 li
313.672 426.616 li
cp
f
486.912 500 mo
439.885 500 li
436.05 474.683 431.9 448.827 429.81 440.83 cv
425.325 423.683 416.218 413.513 412.46 410.897 cv
408.702 408.28 402.713 399.305 400.895 397.228 cv
399.08 395.152 363.065 379.535 361.643 376.478 cv
360.22 373.42 363.713 371.005 363.713 371.005 cv
363.713 371.005 386.532 356.525 391.17 354.897 cv
395.808 353.27 423.968 349.105 428.268 350.912 cv
432.567 352.718 432.327 358.383 432.327 358.383 cv
436.447 360.152 437.282 366.04 437.282 366.04 cv
438.915 369.878 441.565 379.643 443.525 390.923 cv
445.485 402.202 448.162 405.52 450.65 411.563 cv
452.293 415.555 473.032 466.145 486.912 500 cv
cp
.52549 .27451 .203922 rgb
f
373.718 464.589 mo
309.202 390.044 li
351.055 354.168 li
415.57 428.713 li
373.718 464.589 li
cp
.745098 .878431 .537255 rgb
f
314.569 391.11 mo
373.363 459.042 li
409.688 427.904 li
350.896 359.974 li
314.569 391.11 li
cp
373.248 460.582 mo
313.022 390.995 li
351.012 358.435 li
411.234 428.019 li
373.248 460.582 li
cp
.513726 .713726 .270588 rgb
f
400.896 397.229 mo
400.896 397.229 396.733 390.38 387.893 386.885 cv
381.72 384.445 372.391 382.737 367.258 380.239 cv
365.04 379.162 363.604 377.937 363.543 376.44 cv
363.473 374.716 364.123 373.55 365.252 372.787 cv
368.605 370.523 376.176 371.828 381.586 372.683 cv
388.304 373.742 395.358 376.39 401.701 375.45 cv
407.878 374.535 408.284 365.211 415.846 361.191 cv
417.399 360.366 419.264 360.351 420.837 361.152 cv
425.183 363.371 433.567 369.979 431.904 387.567 cv
429.679 411.107 400.896 397.229 400.896 397.229 cv
cp
.52549 .27451 .203922 rgb
f
367.525 372.109 mo
367.413 371.65 li
371.117 370.783 376.614 371.655 381.031 372.355 cv
381.622 372.449 li
383.686 372.775 385.813 373.257 387.869 373.723 cv
392.509 374.774 397.308 375.862 401.665 375.217 cv
404.72 374.764 406.326 372.159 408.186 369.143 cv
409.968 366.251 411.988 362.974 415.732 360.983 cv
415.96 361.399 li
412.33 363.329 410.346 366.549 408.594 369.389 cv
406.673 372.506 405.013 375.198 401.737 375.683 cv
397.29 376.342 392.446 375.244 387.764 374.183 cv
385.715 373.719 383.597 373.238 381.549 372.915 cv
380.957 372.821 li
376.582 372.128 371.137 371.264 367.525 372.109 cv
cp
.407843 .188235 .137255 rgb
f
375.316 380.847 mo
374.311 382.003 370.515 380.964 370.515 380.964 cv
370.515 380.964 369.061 380.608 367.258 380.239 cv
363.323 378.934 363.071 377.248 363.271 375.933 cv
363.419 374.967 363.673 374.33 364.07 373.822 cv
364.604 373.139 365.464 372.78 366.337 372.842 cv
366.639 372.862 366.924 372.888 367.194 372.916 cv
370.011 373.199 374.477 373.763 375.622 375.301 cv
376.598 376.609 376.322 379.69 375.316 380.847 cv
cp
.647059 .384314 .333333 rgb
f
400.691 397.35 mo
400.649 397.281 396.462 390.526 387.806 387.104 cv
385.029 386.007 381.563 385.044 378.212 384.113 cv
376.766 383.712 375.27 383.297 373.862 382.879 cv
373.998 382.427 li
375.401 382.844 376.896 383.258 378.34 383.659 cv
381.703 384.593 385.182 385.559 387.981 386.666 cv
396.794 390.15 401.059 397.038 401.101 397.107 cv
400.691 397.35 li
cp
.407843 .188235 .137255 rgb
f
384.62 372.424 mo
384.421 371.994 li
384.508 371.956 393.085 368.111 394.728 367.42 cv
396.078 366.853 402.036 365.891 404.534 365.504 cv
404.903 365.446 405.179 365.149 405.203 364.78 cv
405.391 361.992 407.697 357.696 409.891 356.953 cv
410.047 357.399 li
408.045 358.078 405.854 362.218 405.681 364.813 cv
405.641 365.402 405.201 365.879 404.61 365.97 cv
402.675 366.27 396.255 367.292 394.917 367.854 cv
393.278 368.544 384.706 372.386 384.62 372.424 cv
cp
f
393.813 364.698 mo
393.812 364.674 393.662 362.253 392.637 360.871 cv
393.021 360.593 li
394.132 362.089 394.284 364.568 394.29 364.674 cv
393.813 364.698 li
cp
f
384.054 436.803 mo
382.084 438.665 379.146 438.771 377.489 437.036 cv
375.834 435.302 376.088 432.387 378.058 430.523 cv
380.027 428.66 382.966 428.556 384.622 430.29 cv
386.277 432.023 386.023 434.939 384.054 436.803 cv
cp
.513726 .713726 .270588 rgb
f
410.461 427.961 mo
403.511 433.921 li
401.291 432.679 399.818 430.285 399.887 427.577 cv
399.963 424.594 401.885 422.088 404.538 421.118 cv
410.461 427.961 li
cp
f
356.879 366.05 mo
355.611 368.188 353.248 369.596 350.579 369.527 cv
347.635 369.452 345.156 367.605 344.145 365.04 cv
350.954 359.204 li
356.879 366.05 li
cp
f
372.166 422.88 mo
363.189 430.209 350.967 430.152 344.867 422.754 cv
338.767 415.354 341.099 403.414 350.075 396.085 cv
359.052 388.755 371.274 388.812 377.374 396.211 cv
383.475 403.61 381.143 415.55 372.166 422.88 cv
cp
f
371.4 451.181 mo
367.382 457.254 369.404 473.91 377.01 467.991 cv
380.096 465.589 381.616 461.778 382.137 458.563 cv
384.399 441.668 356.322 376.272 353.219 371.399 cv
350.116 366.526 349.374 365.896 349.374 365.896 cv
348.045 364.432 344.209 361.918 337.698 360.313 cv
332.457 359.021 326.725 361.349 326.531 366.965 cv
371.4 451.181 li
cp
.764706 .8 .858824 rgb
f
376.596 461.573 mo
373.675 467.043 366.704 475.061 359.195 481.218 cv
359.187 481.226 li
353.362 486.002 347.211 489.658 342.374 490.133 cv
336.941 490.67 332.155 486.742 327.233 479.406 cv
322.124 471.789 316.872 460.499 310.603 446.716 cv
297.058 416.933 290.388 391.204 288.836 382.603 cv
288.717 381.942 288.635 381.282 288.595 380.629 cv
288.09 372.774 293.45 365.639 311.656 363.76 cv
331.38 361.722 341.628 366.385 344.027 369.029 cv
344.027 369.029 344.769 369.657 347.872 374.531 cv
348.272 375.161 349.137 376.918 350.325 379.522 cv
350.327 379.524 li
350.333 379.544 li
358.354 397.121 381.114 453.115 376.596 461.573 cv
cp
.839216 .654902 .72549 rgb
f
327.233 479.406 mo
322.124 471.789 316.872 460.499 310.603 446.716 cv
297.058 416.933 290.388 391.204 288.836 382.603 cv
288.717 381.942 288.635 381.282 288.595 380.629 cv
290.704 395.234 302.06 406.767 305.244 422.155 cv
308.459 437.676 321.387 462.311 327.229 479.396 cv
327.233 479.406 li
cp
.74902 .533333 .623529 rgb
f
376.596 461.573 mo
373.675 467.043 366.704 475.061 359.195 481.218 cv
359.59 480.806 373.213 466.483 371.401 451.182 cv
369.583 435.837 350.774 380.833 350.333 379.544 cv
358.354 397.121 381.114 453.115 376.596 461.573 cv
cp
f
372.437 425.806 mo
372.045 424.692 370.078 419.099 369.891 418.281 cv
369.881 418.237 li
369.155 414.486 372.562 411.751 372.707 411.636 cv
374.347 413.686 li
374.323 413.704 372.062 415.548 372.461 417.718 cv
372.604 418.294 373.979 422.267 374.921 424.938 cv
372.437 425.806 li
cp
.917647 .92549 .937255 rgb
f
374.421 414.618 mo
373.88 414.604 373.352 414.446 372.882 414.15 cv
372.196 413.72 371.72 413.048 371.542 412.261 cv
371.363 411.474 371.503 410.664 371.937 409.981 cv
372.37 409.3 373.044 408.826 373.835 408.648 cv
374.626 408.472 375.439 408.611 376.125 409.042 cv
376.811 409.474 377.287 410.145 377.465 410.932 cv
377.644 411.72 377.504 412.529 377.07 413.211 cv
376.637 413.894 375.963 414.367 375.172 414.544 cv
374.922 414.6 374.67 414.625 374.421 414.618 cv
cp
f
336.769 401.155 mo
336.378 403.997 333.359 406.812 332.01 408.018 cv
330.82 409.079 324.097 413.411 318.146 416.911 cv
314.65 418.966 311.42 420.735 309.733 421.385 cv
309.186 421.596 308.645 421.938 308.105 422.394 cv
305.217 423.414 302.313 428.219 299.233 433.309 cv
297.521 436.142 295.75 439.07 293.927 441.402 cv
289.23 447.405 282.342 452.019 277.511 453.639 cv
277.322 453.547 277.141 453.422 276.963 453.26 cv
273.402 450.051 272.45 433.663 277.963 422.852 cv
284.265 410.493 288.434 410.34 288.434 410.34 cv
290.389 412.204 298.525 410.871 310.641 405.122 cv
318.855 401.222 325.945 397.596 330.688 396.806 cv
330.698 396.802 li
332.947 396.429 334.668 396.691 335.729 397.867 cv
336.665 398.901 336.924 400.03 336.769 401.155 cv
cp
.52549 .27451 .203922 rgb
f
336.824 402.381 mo
336.181 402.925 335.639 403.215 335.639 403.215 cv
335.37 403.522 333.223 404.83 330.387 406.103 cv
327.55 407.378 324.962 406.067 324.245 403.379 cv
323.531 400.69 325.585 399.126 327.579 398.268 cv
327.579 398.268 329.679 397.289 331.172 396.925 cv
331.185 396.922 li
334.623 395.855 335.542 396.782 336.386 398.035 cv
336.935 398.852 337.316 399.811 337.469 400.677 cv
337.581 401.313 337.321 401.959 336.824 402.381 cv
cp
.647059 .384314 .333333 rgb
f
318.339 417.25 mo
315.541 418.812 310.492 421.555 308.114 422.39 cv
308.105 422.394 li
305.217 423.414 302.313 428.219 299.233 433.309 cv
297.521 436.142 295.75 439.07 293.927 441.402 cv
289.23 447.405 282.342 452.019 277.511 453.639 cv
276.882 453.852 276.29 454.012 275.741 454.117 cv
275.64 453.6 li
276.055 453.521 276.496 453.405 276.963 453.26 cv
281.661 451.792 288.811 447.08 293.503 441.081 cv
295.306 438.775 297.069 435.859 298.773 433.04 cv
301.904 427.861 304.863 422.971 307.937 421.892 cv
309.67 421.283 313.271 419.471 318.076 416.791 cv
318.146 416.911 li
318.339 417.25 li
cp
.407843 .188235 .137255 rgb
f
287.177 410.894 mo
287 410.787 286.845 410.669 286.714 410.535 cv
287.099 410.167 li
288.792 411.884 296.473 411.164 309.34 405.526 cv
309.556 406.009 li
298.814 410.716 290.046 412.604 287.177 410.894 cv
cp
f
291.254 380.414 mo
290.743 380.217 li
293.61 372.869 304.031 371.069 304.474 370.997 cv
304.563 371.535 li
304.458 371.553 294.008 373.358 291.254 380.414 cv
cp
.74902 .533333 .623529 rgb
f
296.884 379.787 mo
296.28 379.772 295.646 379.734 294.982 379.67 cv
295.035 379.127 li
301.319 379.737 304.939 377.839 304.975 377.82 cv
305.235 378.3 li
305.099 378.374 302.146 379.921 296.884 379.787 cv
cp
f
299.125 404.636 mo
298.9 401.784 305.589 396.979 305.874 396.776 cv
306.193 397.22 li
304.323 398.555 299.505 402.479 299.672 404.593 cv
299.125 404.636 li
cp
f
297.599 400.682 mo
297.617 395.699 302.561 391.659 302.771 391.489 cv
303.116 391.913 li
303.066 391.953 298.164 395.963 298.146 400.684 cv
297.599 400.682 li
cp
f
314.054 430.608 mo
311.825 430.552 309.631 430.32 308.069 429.754 cv
308.257 429.241 li
312.7 430.854 322.87 429.617 322.973 429.604 cv
323.04 430.146 li
322.763 430.181 318.345 430.718 314.054 430.608 cv
cp
f
322.573 445.709 mo
319.619 445.307 318.359 443.275 316.899 440.924 cv
316.053 439.561 315.094 438.014 313.668 436.564 cv
314.06 436.183 li
315.528 437.676 316.505 439.249 317.366 440.638 cv
318.81 442.963 319.949 444.801 322.647 445.169 cv
322.573 445.709 li
cp
f
338.13 485.104 mo
337.644 484.853 li
340.316 479.748 352.328 475.149 355.271 475.994 cv
355.119 476.519 li
352.362 475.726 340.645 480.304 338.13 485.104 cv
cp
f
334.977 482.043 mo
334.508 481.759 li
334.495 481.784 li
334.512 481.739 334.547 481.55 334.581 481.367 cv
335.537 476.277 337.806 472.952 341.323 471.483 cv
341.535 471.987 li
338.199 473.38 336.041 476.57 335.12 481.468 cv
335.048 481.855 335.026 481.961 334.977 482.043 cv
cp
f
159.099 19.6519 mo
156.439 11.0298 li
156.439 11.0298 141.749 18.1499 135.943 21.8833 cv
130.137 25.6162 120.566 29.9419 117.612 32.9297 cv
137.596 78.1084 li
176.176 59.2295 li
159.099 19.6519 li
.745098 .878431 .537255 rgb
f
175.213 53.4766 mo
175.213 53.4766 162.045 27.3862 159.707 13.4214 cv
159.707 13.4214 122.616 30.146 120.423 32.7935 cv
134.641 66.2427 li
175.213 53.4766 li
cp
.513726 .713726 .270588 rgb
f
198.096 115.571 mo
198.096 115.571 188.55 98.876 183.902 85.877 cv
141.377 91.1583 li
162.19 138.99 li
162.19 138.99 177.235 131.718 183.298 126.113 cv
189.36 120.508 198.096 115.571 198.096 115.571 cv
.745098 .878431 .537255 rgb
f
187.871 88.7813 mo
196.942 111.896 li
196.942 111.896 176.723 127.482 170.445 130.355 cv
164.168 133.228 160.218 136.518 160.218 136.518 cv
146.821 103.03 li
187.871 88.7813 li
.513726 .713726 .270588 rgb
f
231.27 0 mo
227.203 8.39013 223.99 16.4727 223.85 21.3223 cv
223.462 34.7652 219.763 55.5923 217.85 59.3101 cv
213.413 67.9326 205.51 75.8301 200.7 81.4302 cv
195.7 87.25 183.712 103.362 171.502 95.6801 cv
159.292 87.9976 159.675 73.7852 160.982 67.2525 cv
162.62 59.0825 178.208 49.7173 179.975 43.7451 cv
182.225 36.1348 184.7 19.6923 189.848 12.5151 cv
192.665 8.58502 195.033 4.95747 197.245 0 cv
231.27 0 li
.839216 .580392 .462745 rgb
f
209.01 59.5171 mo
209.057 59.5278 213.735 60.5498 215.9 60.0596 cv
215.999 60.5195 li
213.73 61.0332 209.098 60.0215 208.902 59.978 cv
209.01 59.5171 li
cp
.768627 .482353 .372549 rgb
f
181.322 45.21 mo
181.43 45.2852 183.965 47.0781 184.518 49.5269 cv
184.565 49.7383 li
185.063 51.958 185.393 53.4248 187.194 54.0459 cv
187.035 54.4917 li
184.989 53.7866 184.618 52.1348 184.104 49.8481 cv
184.056 49.6372 li
183.544 47.3652 181.073 45.6152 181.048 45.5977 cv
181.322 45.21 li
cp
f
183.046 39.4941 mo
183.561 40.2651 186.7 43.4741 188.919 43.646 cv
188.876 44.1162 li
186.463 43.9297 183.211 40.5972 182.652 39.7588 cv
183.046 39.4941 li
cp
f
184.698 52.5718 mo
185.041 52.8921 li
178.874 59.4565 li
178.532 59.1362 li
184.698 52.5718 li
cp
f
163.84 131.81 mo
163.84 131.81 160.625 126.423 156.626 119.305 cv
152.861 112.595 148.399 104.344 145.293 97.625 cv
143.417 93.5654 141.055 86.5361 138.656 78.622 cv
138.542 78.2475 138.43 77.8716 138.315 77.4936 cv
138.198 77.1026 138.082 76.7114 137.964 76.3169 cv
132.396 57.6518 126.852 35.3437 126.852 35.3437 cv
126.852 35.3437 136.152 32.1035 145.475 24.3125 cv
155.027 16.3233 163.504 14.085 163.504 14.085 cv
163.504 14.085 169.013 31.4165 173.636 50.7451 cv
175.29 57.6738 177.368 63.7094 179.557 68.9277 cv
179.733 69.3442 179.91 69.7554 180.084 70.1617 cv
180.174 70.3687 180.265 70.5757 180.354 70.7792 cv
180.55 71.2251 180.749 71.6641 180.944 72.0982 cv
184.458 79.8051 188.088 85.5141 190.614 89.5175 cv
195.075 96.5781 199.417 106.714 199.417 106.714 cv
199.417 106.714 193.834 109.553 182.975 119.141 cv
173.141 127.826 163.84 131.81 163.84 131.81 cv
.745098 .878431 .537255 rgb
f
162.233 19.605 mo
161.31 19.8047 159.154 20.3706 156.259 21.7636 cv
153.103 23.2807 149.972 25.3291 146.955 27.852 cv
143.481 30.7563 139.696 33.4752 135.704 35.9326 cv
133.111 37.5313 131.188 38.5488 130.363 38.9707 cv
130.593 39.8916 131.152 42.1104 131.936 45.1547 cv
135.081 57.3535 142.892 86.7968 147.477 96.7148 cv
151.214 104.799 156.943 114.7 161.091 121.581 cv
162.636 124.141 163.822 126.047 164.33 126.858 cv
165.187 126.487 167.188 125.568 169.838 124.022 cv
173.863 121.678 177.715 118.892 181.287 115.739 cv
184.454 112.943 187.387 110.58 190.004 108.715 cv
192.844 106.692 194.63 105.74 195.485 105.337 cv
195.059 104.37 194.101 102.227 192.857 99.6714 cv
190.944 95.7407 189.149 92.4429 187.525 89.8701 cv
187.401 89.6744 li
183.085 82.8409 175.861 71.4033 171.552 53.3823 cv
168.953 42.5293 166.069 32.3779 164.108 25.773 cv
163.204 22.7256 162.526 20.541 162.233 19.605 cv
128.956 38.3198 mo
129.399 38.1049 li
129.422 38.0943 131.702 36.9849 135.075 34.9048 cv
139.018 32.4775 142.755 29.7934 146.184 26.9263 cv
149.278 24.3384 152.494 22.2354 155.741 20.6748 cv
159.819 18.7129 162.457 18.3291 162.568 18.3135 cv
163.07 18.2431 li
163.223 18.726 li
163.231 18.7509 164.041 21.3013 165.264 25.4244 cv
167.229 32.043 170.12 42.2163 172.726 53.0958 cv
176.988 70.9228 184.145 82.2549 188.421 89.0249 cv
188.545 89.2208 li
190.193 91.831 192.009 95.168 193.941 99.1382 cv
195.648 102.645 196.823 105.383 196.834 105.41 cv
197.089 106.004 li
196.478 106.22 li
196.462 106.226 194.623 106.904 190.701 109.698 cv
188.117 111.539 185.218 113.875 182.082 116.644 cv
178.451 119.849 174.534 122.682 170.442 125.066 cv
166.797 127.191 164.407 128.136 164.307 128.175 cv
163.844 128.356 li
163.58 127.938 li
163.565 127.915 162.134 125.647 160.058 122.21 cv
155.894 115.301 150.142 105.36 146.382 97.2261 cv
141.922 87.5795 134.685 60.6533 130.767 45.4619 cv
129.725 41.414 129.081 38.8228 129.075 38.7969 cv
128.956 38.3198 li
.513726 .713726 .270588 rgb
f
144.578 82.272 mo
141.848 76.0503 146.517 67.9527 155.007 64.1851 cv
163.497 60.4179 172.593 62.4081 175.323 68.6303 cv
178.053 74.852 173.383 82.9498 164.893 86.7167 cv
156.403 90.4843 147.308 88.4941 144.578 82.272 cv
f
153.463 52.9766 mo
150.55 53.8232 147.591 52.4209 146.855 49.8438 cv
146.119 47.2666 147.884 44.4907 150.798 43.644 cv
153.711 42.7974 156.67 44.1997 157.406 46.7769 cv
158.142 49.354 156.377 52.1294 153.463 52.9766 cv
cp
f
172.399 104.523 mo
169.559 105.591 166.5 104.422 165.567 101.911 cv
164.634 99.3994 166.181 96.4961 169.021 95.4273 cv
171.862 94.3578 174.921 95.5268 175.854 98.0386 cv
176.787 100.55 175.24 103.453 172.399 104.523 cv
f
190.29 109.164 mo
187.889 107.408 187.375 104.034 189.138 101.625 cv
190.176 100.206 191.771 99.4375 193.399 99.4048 cv
195.119 102.939 196.28 105.65 196.28 105.65 cv
196.28 105.65 194.425 106.306 190.352 109.207 cv
190.29 109.164 li
cp
f
164.089 127.613 mo
164.089 127.613 162.671 125.368 160.574 121.895 cv
162.365 119.621 165.642 119.152 167.985 120.866 cv
169.229 121.776 169.966 123.122 170.14 124.544 cv
166.494 126.671 164.089 127.613 164.089 127.613 cv
cp
f
158.194 25.7109 mo
156.714 24.6284 155.95 22.9297 156 21.2192 cv
160.04 19.2754 162.648 18.9116 162.648 18.9116 cv
162.648 18.9116 163.451 21.4341 164.686 25.5986 cv
162.832 27.0508 160.178 27.1631 158.194 25.7109 cv
cp
f
131.352 45.3081 mo
130.298 41.2163 129.66 38.6484 129.66 38.6484 cv
129.66 38.6484 131.946 37.5425 135.389 35.4185 cv
135.53 35.5015 135.668 35.5923 135.803 35.6914 cv
138.201 37.4458 138.716 40.8203 136.953 43.2295 cv
135.629 45.0391 133.398 45.7905 131.352 45.3081 cv
cp
f
gsave
147.747 102.709 mo
146.869 100.954 146.041 99.2448 145.292 97.6245 cv
144.785 96.5255 144.242 95.2094 143.672 93.7167 cv
144.242 95.2095 144.786 96.5261 145.293 97.625 cv
146.042 99.245 146.87 100.954 147.747 102.709 cv
147.747 102.709 li
clp
143.672 93.7167 mo
147.747 93.7167 li
147.747 102.709 li
143.672 102.709 li
cp
.572549 .698039 .384314 rgb
f
grestore
156.626 119.306 mo
153.768 114.214 150.51 108.234 147.747 102.709 cv
147.747 102.709 li
150.51 108.233 153.769 114.213 156.626 119.305 cv
156.627 119.306 156.627 119.306 156.627 119.306 cv
156.627 119.306 156.626 119.306 156.626 119.306 cv
.454902 .615686 .25098 rgb
f
139.59 81.6615 mo
139.28 80.6668 138.968 79.6527 138.656 78.6235 cv
138.656 78.6235 138.656 78.6233 138.657 78.6233 cv
138.969 79.6526 139.28 80.6667 139.59 81.6615 cv
.698824 .757878 .616148 rgb
f
156.627 119.306 mo
156.627 119.306 156.627 119.306 156.626 119.305 cv
153.769 114.213 150.51 108.233 147.747 102.709 cv
146.87 100.954 146.042 99.245 145.293 97.625 cv
144.786 96.5261 144.242 95.2095 143.672 93.7167 cv
142.41 90.4123 141.017 86.2441 139.59 81.6615 cv
139.28 80.6667 138.969 79.6526 138.657 78.6233 cv
138.865 78.5089 139.23 78.3117 139.737 78.0539 cv
142.141 86.0616 144.507 93.1706 146.382 97.2261 cv
149.579 104.144 154.218 112.368 158.095 118.922 cv
157.603 119.048 157.114 119.177 156.627 119.306 cv
159.319 118.616 mo
155.421 112.039 150.705 103.699 147.477 96.7148 cv
145.62 92.6996 143.235 85.4826 140.845 77.5068 cv
141.719 77.0872 142.809 76.5898 144.081 76.0623 cv
143.593 78.1889 143.722 80.3227 144.578 82.272 cv
146.372 86.3617 150.916 88.623 156.231 88.623 cv
159.002 88.623 161.983 88.0079 164.893 86.7167 cv
172.452 83.3629 176.982 76.5757 175.959 70.7365 cv
176.405 70.7318 176.824 70.7299 177.215 70.7298 cv
177.516 71.4424 177.819 72.1385 178.123 72.8185 cv
177.671 73.6304 177.355 74.2411 177.225 74.5669 cv
176.739 75.7783 175.263 79.4644 176.138 82.0875 cv
176.512 83.2085 177.272 84.0019 178.396 84.4468 cv
178.775 84.5968 179.17 84.6721 179.584 84.6721 cv
179.968 84.6721 180.369 84.6071 180.787 84.4768 cv
180.994 86.514 181.347 88.5905 181.914 90.5596 cv
183.721 96.8562 184.179 107.569 184.293 113.156 cv
183.318 113.97 182.315 114.832 181.287 115.739 cv
180.755 116.209 180.216 116.67 179.672 117.124 cv
176.872 117.283 173.011 117.44 168.653 117.44 cv
168.427 117.44 168.202 117.439 167.973 117.439 cv
167.936 117.438 167.9 117.438 167.863 117.438 cv
164.861 117.438 162.046 117.957 159.319 118.616 cv
171.169 95.0309 mo
170.464 95.0309 169.736 95.1583 169.021 95.4273 cv
166.181 96.4961 164.634 99.3994 165.567 101.911 cv
166.265 103.791 168.155 104.919 170.253 104.919 cv
170.957 104.919 171.685 104.791 172.399 104.523 cv
175.24 103.453 176.787 100.55 175.854 98.0386 cv
175.156 96.1586 173.266 95.0309 171.169 95.0309 cv
181.678 116.998 mo
181.813 116.881 181.948 116.762 182.082 116.644 cv
182.842 115.973 183.588 115.328 184.319 114.709 cv
184.335 116.015 184.33 116.791 184.33 116.791 cv
184.33 116.791 183.36 116.883 181.678 116.998 cv
178.867 71.5095 mo
178.756 71.2545 178.644 70.9971 178.533 70.7376 cv
178.814 70.741 179.073 70.7453 179.31 70.7502 cv
179.156 71.0124 179.008 71.2657 178.867 71.5095 cv
.572549 .698039 .384314 rgb
f
158.095 118.922 mo
154.218 112.368 149.579 104.144 146.382 97.2261 cv
144.507 93.1706 142.141 86.0616 139.737 78.0539 cv
140.053 77.8932 140.424 77.7091 140.845 77.5068 cv
143.235 85.4826 145.62 92.6996 147.477 96.7148 cv
150.705 103.699 155.421 112.039 159.319 118.616 cv
158.909 118.715 158.501 118.818 158.095 118.922 cv
179.672 117.124 mo
180.216 116.67 180.755 116.209 181.287 115.739 cv
182.315 114.832 183.318 113.97 184.293 113.156 cv
184.305 113.732 184.313 114.252 184.319 114.709 cv
183.588 115.328 182.842 115.973 182.082 116.644 cv
181.948 116.762 181.813 116.881 181.678 116.998 cv
181.092 117.038 180.419 117.081 179.672 117.124 cv
178.123 72.8185 mo
177.819 72.1385 177.516 71.4424 177.215 70.7298 cv
177.218 70.7298 177.22 70.7298 177.222 70.7298 cv
177.701 70.7298 178.139 70.7328 178.533 70.7376 cv
178.644 70.9971 178.756 71.2545 178.867 71.5095 cv
178.591 71.9865 178.341 72.4261 178.123 72.8185 cv
.454902 .615686 .25098 rgb
f
156.231 88.623 mo
150.916 88.623 146.372 86.3617 144.578 82.272 cv
143.722 80.3227 143.593 78.1889 144.081 76.0623 cv
148.235 74.3387 154.316 72.2958 161.026 71.6119 cv
167.355 70.9667 172.473 70.7724 175.959 70.7365 cv
176.982 76.5757 172.452 83.3629 164.893 86.7167 cv
161.983 88.0079 159.002 88.623 156.231 88.623 cv
f
170.253 104.919 mo
168.155 104.919 166.265 103.791 165.567 101.911 cv
164.634 99.3994 166.181 96.4961 169.021 95.4273 cv
169.736 95.1583 170.464 95.0309 171.169 95.0309 cv
173.266 95.0309 175.156 96.1586 175.854 98.0386 cv
176.787 100.55 175.24 103.453 172.399 104.523 cv
171.685 104.791 170.957 104.919 170.253 104.919 cv
f
177.448 74.6558 mo
178.286 72.5669 186.953 58.3897 189.884 55.1841 cv
192.817 51.979 191.834 41.5029 193.08 34.3711 cv
194.327 27.2397 198.426 19.8359 201.838 17.0576 cv
205.25 14.2807 214.68 29.0977 214.535 41.4458 cv
214.389 53.794 211.14 55.5659 211.14 55.5659 cv
208.853 54.8515 202.916 59.1328 195.556 68.5108 cv
190.565 74.8702 186.361 80.5659 182.907 83.0733 cv
182.898 83.0811 li
181.259 84.268 179.789 84.7388 178.486 84.2217 cv
177.335 83.7671 176.687 82.9678 176.366 82.0097 cv
175.559 79.5893 176.85 76.1514 177.448 74.6558 cv
.839216 .580392 .462745 rgb
f
198.926 19.9057 mo
199.861 18.6265 200.805 17.5879 201.687 16.8701 cv
201.99 17.2446 li
198.81 19.8349 194.59 27.1343 193.318 34.412 cv
192.873 36.956 192.712 39.9576 192.557 42.8599 cv
192.271 48.1914 191.998 53.2281 190.061 55.3467 cv
187.197 58.4786 178.518 72.6348 177.672 74.7451 cv
176.414 77.8853 176.052 80.3032 176.595 81.9321 cv
176.922 82.9126 177.588 83.6069 178.575 83.997 cv
179.724 84.4527 181.088 84.0918 182.746 82.8936 cv
182.748 82.8921 li
185.728 80.728 189.281 76.1679 193.395 70.8871 cv
194.038 70.0615 194.695 69.2178 195.367 68.3618 cv
202.144 59.727 208.512 54.4917 211.213 55.3349 cv
211.067 55.7964 li
209.045 55.1651 203.389 58.9214 195.746 68.6591 cv
195.074 69.5147 194.417 70.3579 193.774 71.183 cv
189.644 76.4854 186.076 81.0649 183.061 83.2588 cv
183.039 83.2763 li
181.231 84.586 179.713 84.9687 178.396 84.4468 cv
177.272 84.0019 176.512 83.2085 176.138 82.0875 cv
175.263 79.4644 176.739 75.7783 177.225 74.5669 cv
178.077 72.44 186.821 58.1768 189.706 55.0215 cv
191.528 53.0293 191.794 48.0786 192.075 42.836 cv
192.231 39.9194 192.393 36.9033 192.843 34.3306 cv
193.804 28.8306 196.334 23.4478 198.926 19.9057 cv
.768627 .482353 .372549 rgb
f
175.841 81.0562 mo
176.138 80.3672 176.454 79.9214 176.454 79.9214 cv
176.547 79.5703 177.738 77.6777 179.49 75.5405 cv
181.242 73.4019 183.811 73.4229 185.437 75.2827 cv
187.062 77.1445 186.045 79.2041 184.8 80.6777 cv
184.8 80.6777 183.517 82.2891 182.474 83.1699 cv
182.466 83.1772 li
180.154 85.3877 179.06 85.0122 177.898 84.3467 cv
177.141 83.9131 176.46 83.2998 175.999 82.6689 cv
175.66 82.2065 175.611 81.5884 175.841 81.0562 cv
cp
1 .678431 .670588 rgb
f
137.411 77.978 mo
136.816 76.9311 li
136.831 76.9221 136.901 76.8819 137.024 76.8145 cv
137.513 77.9209 li
137.449 77.9568 137.414 77.9764 137.411 77.978 cv
.692918 .76772 .584652 rgb
f
137.513 77.9209 mo
137.024 76.8145 li
137.214 76.7095 137.532 76.5386 137.964 76.3169 cv
137.964 76.3169 li
138.082 76.7114 138.198 77.1026 138.315 77.4936 cv
138.315 77.4936 li
138.315 77.4936 li
137.921 77.6966 137.65 77.845 137.513 77.9209 cv
.564706 .705882 .352941 rgb
f
138.315 77.4936 mo
138.315 77.4936 li
138.198 77.1026 138.082 76.7114 137.964 76.3169 cv
138.272 76.1591 138.638 75.9756 139.058 75.772 cv
139.174 76.1652 139.29 76.5547 139.406 76.9444 cv
138.977 77.154 138.611 77.3395 138.315 77.4936 cv
140.519 76.4148 mo
140.404 76.027 140.288 75.6366 140.173 75.246 cv
140.894 74.9147 141.719 74.5516 142.637 74.1729 cv
143.385 73.8645 144.21 73.5399 145.104 73.2114 cv
144.856 73.7172 144.641 74.2284 144.462 74.7424 cv
143.98 74.9289 143.522 75.1124 143.09 75.2905 cv
142.127 75.6879 141.264 76.0698 140.519 76.4148 cv
179.669 70.1413 mo
179.35 70.1268 178.87 70.1076 178.259 70.0912 cv
178.091 69.6895 177.923 69.2836 177.756 68.8713 cv
178.522 68.8877 179.136 68.9098 179.557 68.9277 cv
179.673 69.2024 179.79 69.4748 179.905 69.7449 cv
179.825 69.8788 179.747 70.0107 179.669 70.1413 cv
176.938 70.065 mo
176.585 70.0605 176.21 70.0576 175.813 70.057 cv
175.709 69.648 175.577 69.2448 175.415 68.8487 cv
175.475 68.8486 175.534 68.8485 175.593 68.8485 cv
175.887 68.8485 176.172 68.8498 176.444 68.852 cv
176.608 69.2623 176.772 69.665 176.938 70.065 cv
f
139.406 76.9444 mo
139.29 76.5547 139.174 76.1652 139.058 75.772 cv
139.396 75.6086 139.768 75.4324 140.173 75.246 cv
140.288 75.6366 140.404 76.027 140.519 76.4148 cv
140.112 76.6036 139.74 76.7813 139.406 76.9444 cv
178.259 70.0912 mo
177.869 70.0807 177.426 70.0713 176.938 70.065 cv
176.772 69.665 176.608 69.2623 176.444 68.852 cv
176.919 68.8559 177.358 68.8628 177.756 68.8713 cv
177.923 69.2836 178.091 69.6895 178.259 70.0912 cv
.45098 .623529 .219608 rgb
f
144.462 74.7424 mo
144.641 74.2284 144.856 73.7172 145.104 73.2114 cv
148.964 71.7911 154.083 70.2975 159.628 69.7319 cv
166.249 69.0562 171.536 68.8823 174.806 68.8515 cv
175.013 68.8499 175.217 68.849 175.415 68.8487 cv
175.577 69.2448 175.709 69.648 175.813 70.057 cv
175.764 70.0569 175.714 70.0569 175.663 70.0569 cv
175.388 70.0569 175.104 70.058 174.811 70.0605 cv
171.566 70.0888 166.321 70.2632 159.746 70.9336 cv
153.801 71.5404 148.347 73.2393 144.462 74.7424 cv
f
180.084 70.1617 mo
180.022 70.1584 179.88 70.1508 179.669 70.1413 cv
179.747 70.0107 179.825 69.8788 179.905 69.7449 cv
179.965 69.8844 180.025 70.0233 180.084 70.1617 cv
.576471 .509804 .270588 rgb
f
141.789 120.422 mo
141.789 120.422 135.259 93.2822 137.36 77.9346 cv
137.36 77.9346 137.952 77.5942 139.028 77.062 cv
139.4 76.8755 139.829 76.668 140.313 76.4395 cv
141.107 76.0674 142.048 75.6499 143.109 75.2114 cv
147.262 73.5 153.29 71.4902 159.933 70.8125 cv
166.375 70.1558 171.563 69.9668 175.054 69.9355 cv
176.123 69.9263 177.034 69.9331 177.771 69.9448 cv
178.251 69.9507 178.657 69.9629 178.984 69.9717 cv
179.665 69.9927 180.022 70.0142 180.022 70.0142 cv
180.022 70.0142 178.29 80.9595 180.818 89.7603 cv
183.347 98.561 183.237 115.992 183.237 115.992 cv
183.237 115.992 176.077 116.675 166.879 116.639 cv
157.682 116.602 150.233 121.452 141.789 120.422 cv
cp
.745098 .878431 .537255 rgb
f
143.175 118.57 mo
143.086 118.148 li
143.08 118.12 142.489 115.256 141.758 110.979 cv
140.283 102.364 138.028 86.8066 139.028 77.062 cv
139.4 76.8755 139.829 76.668 140.313 76.4395 cv
139.12 85.9541 141.443 101.99 142.948 110.77 cv
143.512 114.07 143.992 116.523 144.179 117.47 cv
146.056 117.649 148.05 117.519 150.405 117.065 cv
150.66 116.904 li
150.777 116.989 li
152.294 116.682 153.789 116.282 155.367 115.859 cv
158.827 114.936 162.404 113.982 166.353 113.998 cv
168.716 114.006 171.125 113.964 173.515 113.872 cv
176.903 113.744 179.454 113.554 180.521 113.465 cv
180.518 112.446 180.497 110.113 180.381 107.24 cv
180.172 102.088 179.656 94.9995 178.359 90.4858 cv
176.195 82.9536 177.552 71.6279 177.771 69.9448 cv
178.251 69.9507 178.657 69.9629 178.984 69.9717 cv
178.858 70.9316 177.378 82.6948 179.52 90.1479 cv
180.846 94.7759 181.376 101.968 181.585 107.185 cv
181.743 111.076 181.729 113.989 181.728 114.018 cv
181.725 114.568 li
181.18 114.619 li
181.148 114.623 178.089 114.909 173.556 115.08 cv
171.149 115.172 168.722 115.213 166.34 115.207 cv
162.552 115.191 159.055 116.125 155.673 117.027 cv
154.249 117.407 152.784 117.798 151.329 118.107 cv
151.33 118.114 li
150.745 118.229 li
148.03 118.761 145.761 118.885 143.602 118.622 cv
143.175 118.57 li
cp
.513726 .713726 .270588 rgb
f
161.86 102.744 mo
158.847 103.082 156.173 101.194 155.886 98.5269 cv
155.6 95.8599 157.81 93.4238 160.823 93.0859 cv
163.835 92.7476 166.51 94.6357 166.796 97.3027 cv
167.083 99.9697 164.873 102.406 161.86 102.744 cv
cp
f
138.663 104.03 mo
133.67 106.397 127.002 109.542 125.393 109.815 cv
122.792 110.255 99.4248 108.4 93.0449 102.38 cv
86.665 96.3574 72.4277 62.0127 68.6851 56.4224 cv
65.415 51.54 26.4502 12.79 11.1777 0 cv
67.7725 0 li
73.8599 10.8174 82.0527 24.8726 86.3198 30.0498 cv
100.163 46.8477 114.69 52.7173 119.252 57.6025 cv
126.563 65.4199 128.005 66.9702 128.005 66.9702 cv
128.005 66.9702 129.958 67.1499 132.915 67.5225 cv
137.518 77.8799 li
137.397 77.9473 li
136.382 85.3623 137.325 95.7402 138.663 104.03 cv
cp
.839216 .580392 .462745 rgb
f
143.67 94.9106 mo
147.257 95.9507 150.545 92.5527 150.287 89.6538 cv
150.029 86.7549 136.758 76.3394 128.005 66.9702 cv
119.253 57.6016 111.452 53.0273 103.877 59.8281 cv
96.3032 66.6284 107.331 76.2344 107.331 76.2344 cv
107.331 76.2344 131.102 89.5972 137.39 92.4492 cv
141.369 94.2539 143.67 94.9106 143.67 94.9106 cv
cp
f
137.5 84.8726 mo
138.933 82.332 141.409 81.9873 143.211 82.915 cv
143.211 82.915 146.529 84.9985 148.354 86.48 cv
149.432 87.3203 152.055 89.874 150.897 92.3623 cv
149.492 95.3818 145.457 94.5303 143.94 93.6494 cv
140.515 91.6606 135.515 88.3906 137.5 84.8726 cv
cp
1 .678431 .670588 rgb
f
127.15 66.3774 mo
127.503 66.0464 li
131.328 70.1401 136.001 74.458 140.124 78.2681 cv
146.311 83.9839 151.197 88.4985 151.368 90.4189 cv
150.887 90.4639 li
150.732 88.729 145.665 84.0459 139.796 78.6235 cv
135.667 74.8081 130.986 70.4839 127.15 66.3774 cv
cp
.768627 .482353 .372549 rgb
f
107.331 76.2344 mo
109.571 77.2563 113.224 79.3926 117.454 81.8662 cv
125.12 86.3501 134.661 91.9302 140.19 93.3916 cv
139.979 94.1553 li
134.346 92.667 124.754 87.0571 117.047 82.5493 cv
112.836 80.0864 109.199 77.959 106.994 76.9536 cv
107.331 76.2344 li
cp
f
113.383 94.5811 mo
123.517 95.9072 135.505 92.3486 135.625 92.312 cv
135.845 93.0684 li
135.723 93.105 123.575 96.7124 113.27 95.3643 cv
113.383 94.5811 li
cp
f
115.457 84.1221 mo
116.347 84.3896 118.626 84.0718 119.429 83.9263 cv
119.56 84.7036 li
119.245 84.7603 116.45 85.249 115.219 84.8789 cv
115.457 84.1221 li
cp
f
114.652 81.5049 mo
115.442 81.5366 li
115.439 81.5908 115.141 87.0005 114.129 91.4048 cv
113.077 95.9829 111.011 97.1445 106.892 99.459 cv
106.85 99.4824 li
106.468 98.7959 li
106.511 98.7715 li
110.545 96.5054 112.386 95.4707 113.358 91.2373 cv
114.355 86.8994 114.649 81.5581 114.652 81.5049 cv
cp
f
112.901 81.46 mo
113.618 81.7861 li
113.53 81.9761 111.398 86.4658 107.075 89.0049 cv
106.681 88.3252 li
110.789 85.9116 112.88 81.5044 112.901 81.46 cv
cp
f
121.219 95.6299 mo
121.984 95.4175 li
122.741 98.248 121.244 101.266 121.18 101.393 cv
120.474 101.046 li
120.488 101.017 121.897 98.1665 121.219 95.6299 cv
cp
f
126.317 77.5234 mo
126.3 77.4028 li
126.102 75.9756 127.915 73.8672 127.934 73.8462 cv
128.014 73.7524 li
127.489 73.2954 li
127.407 73.3887 li
127.324 73.4854 125.356 75.7661 125.601 77.521 cv
125.618 77.6416 li
126.317 77.5234 li
cp
f
124.618 75.1626 mo
124.621 75.0405 li
124.667 73.377 125.981 71.8413 126.233 71.7119 cv
126.339 71.6592 li
126.065 71.0195 li
125.953 71.0708 li
125.866 71.1206 li
125.452 71.4009 123.97 73.0264 123.915 75.042 cv
123.912 75.1641 li
124.618 75.1626 li
cp
f
193.27 61.0942 mo
193.377 61.085 li
194.658 60.9722 196.565 62.6675 196.584 62.6846 cv
196.668 62.7603 li
197.075 62.3164 li
196.991 62.2402 li
196.904 62.1616 194.841 60.3232 193.266 60.4614 cv
193.158 60.4707 li
193.27 61.0942 li
cp
f
195.377 59.6978 mo
195.487 59.7061 li
196.981 59.8203 198.371 61.0498 198.488 61.2778 cv
198.537 61.374 li
199.109 61.1597 li
199.063 61.0586 li
199.017 60.9795 li
198.762 60.6011 197.292 59.2207 195.481 59.0825 cv
195.372 59.0742 li
195.377 59.6978 li
cp
f
143.676 118.022 mo
143.676 118.022 143.09 115.189 142.353 110.874 cv
144.259 109.75 146.722 109.789 148.615 111.174 cv
150.678 112.683 151.424 115.325 150.633 117.634 cv
150.632 117.636 li
148.35 118.083 146.057 118.313 143.676 118.022 cv
cp
.513726 .713726 .270588 rgb
f
173.536 114.475 mo
172.929 112.756 173.156 110.772 174.318 109.185 cv
175.881 107.048 178.638 106.306 180.983 107.212 cv
181.143 111.134 181.125 114.018 181.125 114.018 cv
181.125 114.018 178.104 114.305 173.536 114.475 cv
cp
f
143.109 75.2114 mo
147.262 73.5 153.29 71.4902 159.933 70.8125 cv
166.375 70.1558 171.563 69.9668 175.054 69.9355 cv
174.57 76.2656 167.573 81.5356 158.806 81.9341 cv
151.91 82.2471 145.863 79.4629 143.109 75.2114 cv
cp
f
104.982 204.165 mo
84.6777 203.303 70.3926 185.083 66.1523 181.83 cv
61.9126 178.578 50.085 172.072 44.7275 169.035 cv
40.6348 166.715 36.6724 163.51 34.5327 160.48 cv
33.1675 158.547 31.2002 157.09 28.9302 156.3 cv
0 146.235 li
0 106.848 li
18.0127 114.52 50.1675 128.345 58.5527 132.803 cv
70.3799 139.09 94.48 153.185 98.9448 158.39 cv
103.408 163.595 123.05 191.143 123.05 191.143 cv
123.05 191.143 125.285 205.027 104.982 204.165 cv
cp
.988235 .815686 .72549 rgb
f
97.2129 176.396 mo
97.7793 176.156 li
98.9106 178.854 101.089 181.188 101.11 181.212 cv
100.663 181.636 li
100.571 181.538 98.3867 179.196 97.2129 176.396 cv
cp
.929412 .698039 .596078 rgb
f
88.3623 177.308 mo
88.4141 176.692 li
94.7031 177.222 97.5454 175.874 98.8223 174.649 cv
100.08 173.444 100.047 172.182 100.047 172.167 cv
100.662 172.145 li
100.666 172.205 100.703 173.702 99.2471 175.097 cv
97.2563 177.004 93.5947 177.749 88.3623 177.308 cv
cp
f
106.357 219.763 mo
110.183 215.863 112.763 221.356 113.729 224.58 cv
110.554 224.61 107.321 224.616 104.048 224.588 cv
104.505 222.604 105.238 220.903 106.357 219.763 cv
cp
.988235 .815686 .72549 rgb
f
108.921 228.244 mo
107.206 228.196 105.396 228.151 103.516 228.109 cv
100.501 228.043 97.3066 227.979 94.0293 227.914 cv
95.5425 226.767 96.7822 225.785 97.5107 225.197 cv
99.8301 223.314 102.491 214.961 96.2603 215.173 cv
92.3203 215.306 81.6758 221.71 71.0679 227.297 cv
60.2275 226.859 51.0488 226.146 47.4546 224.802 cv
39.7471 221.923 33.8159 216.929 33.8159 216.929 cv
35.5986 208.139 li
35.5986 208.139 47.561 196.254 59.3047 191.362 cv
71.0483 186.47 97.0527 186.548 105.354 188.083 cv
113.654 189.617 154.964 205.424 160.896 209.908 cv
166.824 214.392 171.965 221.276 171.965 221.276 cv
171.965 221.276 136.136 227.605 114.474 228.226 cv
112.492 228.283 110.629 228.291 108.921 228.244 cv
cp
.941176 .945098 .94902 rgb
f
53.9541 234.813 mo
51.1528 235.573 48.2856 236.649 45.394 237.941 cv
38.1123 236.272 32.8286 234.755 31.647 233.839 cv
27.6934 230.766 33.8159 216.929 33.8159 216.929 cv
47.0225 220.509 62.3491 222.561 77.8906 223.628 cv
69.6768 228.097 60.5591 233.021 53.9541 234.813 cv
cp
.862745 .890196 .937255 rgb
f
77.2446 243.951 mo
77.9595 241.219 79.5361 237.057 82.7358 235.434 cv
87.6753 232.925 95.1914 227.077 97.5107 225.197 cv
97.729 225.021 97.9521 224.785 98.1675 224.504 cv
100.139 224.544 102.1 224.57 104.047 224.588 cv
107.322 224.617 110.554 224.611 113.728 224.58 cv
145.898 224.272 171.965 221.276 171.965 221.276 cv
171.965 221.276 173.393 236.736 169.401 239.373 cv
165.068 242.234 136.729 244.865 116.562 245.963 cv
110.98 246.267 106.024 246.453 102.377 246.494 cv
96.7319 246.557 87.3569 245.501 77.2446 243.951 cv
cp
f
113.731 224.58 mo
145.902 224.271 171.965 221.275 171.965 221.275 cv
171.965 221.275 173.394 236.735 169.401 239.372 cv
165.068 242.233 136.729 244.865 116.562 245.963 cv
116.115 238.986 114.911 230.442 114.091 226.026 cv
114.024 225.66 113.901 225.156 113.731 224.58 cv
cp
f
77.249 243.952 mo
77.2441 243.952 li
77.3721 243.46 77.5293 242.923 77.7188 242.365 cv
77.7974 242.14 li
77.8789 241.91 li
77.9868 241.603 78.1074 241.292 78.2402 240.978 cv
78.3682 240.666 78.5083 240.354 78.6606 240.043 cv
78.9263 239.497 79.2261 238.955 79.5659 238.44 cv
79.6885 238.257 li
79.8926 237.956 80.1118 237.664 80.3477 237.387 cv
80.4907 237.221 li
80.5474 237.157 li
80.6948 236.996 li
80.874 236.811 li
80.9458 236.739 li
81.103 236.588 li
81.2827 236.427 li
81.4424 236.292 li
81.4521 236.281 li
81.5825 236.172 81.7178 236.069 81.856 235.97 cv
81.9688 235.891 li
82.1484 235.772 li
82.166 235.762 li
82.3823 235.628 li
82.498 235.559 82.6157 235.495 82.7368 235.433 cv
83.6616 234.963 84.6777 234.374 85.7334 233.719 cv
86.085 233.499 86.4419 233.271 86.8008 233.039 cv
87.1602 232.806 87.522 232.568 87.8838 232.326 cv
88.2451 232.084 88.6069 231.836 88.9683 231.586 cv
89.3301 231.339 89.6895 231.087 90.0459 230.834 cv
93.2563 228.569 96.2065 226.256 97.5103 225.198 cv
97.6279 225.094 li
97.8398 224.889 li
97.8643 224.861 li
97.9824 224.73 li
98.167 224.505 li
100.138 224.544 102.099 224.571 104.048 224.588 cv
102.251 232.332 104.645 244.407 104.645 244.407 cv
103.793 245.092 103.041 245.794 102.378 246.494 cv
102.376 246.494 li
96.7314 246.558 87.3579 245.502 77.249 243.952 cv
cp
f
153.795 199.009 mo
158.345 225.012 li
158.345 225.012 127.485 229.64 110.269 226.485 cv
93.0522 223.331 37.5068 222.12 37.5068 222.12 cv
40.2432 195.963 li
40.2432 195.963 76.4355 189.892 93.5884 190.814 cv
110.741 191.737 153.795 199.009 153.795 199.009 cv
cp
.745098 .878431 .537255 rgb
f
152.206 197.182 mo
156.755 223.185 li
156.755 223.185 125.896 227.813 108.679 224.659 cv
91.4629 221.504 35.9175 220.293 35.9175 220.293 cv
38.6538 194.137 li
38.6538 194.137 74.8457 188.064 91.9985 188.987 cv
109.152 189.91 152.206 197.182 152.206 197.182 cv
cp
.513726 .713726 .270588 rgb
f
92.6118 219.858 mo
40.2134 218.273 li
39.3193 215.75 39.0669 210.716 38.8193 205.521 cv
38.6514 202.062 38.4854 198.529 38.1328 195.617 cv
37.4863 190.286 37.3062 179.556 37.2554 174.186 cv
40.9072 174.185 li
41.52 174.184 42.2065 174.184 42.9595 174.187 cv
43.8208 174.186 44.7705 174.188 45.7915 174.193 cv
46.1953 174.193 46.6108 174.195 47.0366 174.198 cv
56.1338 174.237 70.1182 174.394 81.3364 174.952 cv
83.9644 175.082 86.4399 175.235 88.667 175.415 cv
90.0156 175.521 91.2705 175.636 92.415 175.765 cv
92.4727 188.975 li
92.6118 219.858 li
cp
.745098 .878431 .537255 rgb
f
91.5928 218.769 mo
41.3838 215.514 li
40.9355 214.533 40.7202 210.053 40.6401 204.232 cv
40.5117 194.644 40.749 181.417 40.9072 174.185 cv
41.52 174.184 42.2065 174.184 42.9595 174.187 cv
43.8208 174.186 44.7705 174.188 45.7915 174.193 cv
46.1953 174.193 46.6108 174.195 47.0366 174.198 cv
56.1338 174.237 70.1182 174.394 81.3364 174.952 cv
83.9644 175.082 86.4399 175.235 88.667 175.415 cv
89.584 188.986 li
91.5928 218.769 li
cp
.513726 .713726 .270588 rgb
f
162.14 224.232 mo
88.4067 219.731 li
100.962 189.89 li
105.854 178.268 li
114.353 179.15 130.124 179.265 141.792 179.205 cv
147.614 179.425 152.754 179.587 156.411 179.695 cv
156.604 182.143 157.421 190.925 159.593 198.072 cv
160.943 202.505 161.577 209.554 161.874 215.218 cv
162.141 220.276 162.14 224.232 162.14 224.232 cv
cp
.745098 .878431 .537255 rgb
f
158.652 221.444 mo
108.186 220.383 li
118.644 194.706 li
125.249 178.485 li
130.928 178.77 136.627 179.011 141.792 179.205 cv
145.751 179.354 149.394 179.477 152.469 179.575 cv
153.066 184.013 155.312 200.405 156.751 206.558 cv
157.244 208.665 157.611 210.89 157.887 212.962 cv
158.503 217.59 158.652 221.444 158.652 221.444 cv
cp
.513726 .713726 .270588 rgb
f
114.813 221.442 mo
98.6191 221.219 46.791 210.518 46.791 210.518 cv
46.791 210.518 47.2549 206.503 46.8569 200.463 cv
46.6123 196.776 46.0454 192.333 44.8579 187.589 cv
43.5571 182.4 43.0737 177.811 42.9595 174.187 cv
54.9995 174.198 83.9028 174.41 94.9424 176.095 cv
101.478 177.092 113.312 177.888 125.249 178.485 cv
130.928 178.77 136.627 179.011 141.792 179.205 cv
144.423 179.305 146.913 179.391 149.189 179.47 cv
149.763 182.988 150.828 188.17 152.786 195.179 cv
154.592 201.634 155.413 207.474 155.781 211.795 cv
156.175 216.456 156.043 219.351 156.043 219.351 cv
156.043 219.351 131.009 221.663 114.813 221.442 cv
cp
.745098 .878431 .537255 rgb
f
115.317 177.934 mo
107.086 177.424 99.6621 176.813 94.9644 176.098 cv
94.9424 176.095 li
94.145 175.999 93.335 175.893 92.5156 175.779 cv
92.4712 175.772 li
89.4326 175.432 85.584 175.163 81.3364 174.952 cv
82.1636 175.125 82.9927 175.3 83.8271 175.48 cv
96.5815 178.231 107.158 178.414 115.317 177.934 cv
cp
145.189 218.914 mo
149.54 218.579 152.448 218.313 152.478 218.311 cv
153.012 218.262 li
153.036 217.725 li
153.041 217.599 153.166 214.743 152.753 210.154 cv
152.733 209.957 152.716 209.759 152.697 209.556 cv
152.21 204.584 151.292 199.652 149.964 194.893 cv
147.87 187.404 146.82 182.38 146.3 179.369 cv
145.884 179.354 145.461 179.34 145.035 179.322 cv
145.545 182.333 146.603 187.441 148.777 195.227 cv
150.068 199.847 150.968 204.634 151.449 209.46 cv
151.471 209.675 li
151.829 213.354 151.837 216.037 151.82 217.129 cv
150.785 217.221 148.343 217.432 145.095 217.683 cv
137.729 218.244 123.867 219.167 113.818 219.034 cv
102.285 218.877 70.8501 212.91 57.8716 210.349 cv
54.3872 209.663 51.8374 209.145 50.7798 208.927 cv
50.8604 207.948 50.9976 205.745 50.9131 202.699 cv
50.876 201.297 50.7964 199.903 50.6753 198.521 cv
50.3647 194.856 49.7681 191.264 48.9009 187.803 cv
47.5039 182.226 47.0869 177.563 47.0366 174.198 cv
46.6108 174.195 46.1953 174.193 45.7915 174.193 cv
45.8418 177.625 46.2715 182.372 47.7075 188.103 cv
48.5967 191.65 49.1934 195.336 49.4897 199.1 cv
49.5859 200.304 49.6504 201.515 49.6851 202.734 cv
49.7944 206.75 49.5049 209.326 49.5024 209.351 cv
49.4385 209.914 li
49.9897 210.028 li
50.0195 210.035 53.0044 210.65 57.6357 211.563 cv
73.7983 214.749 102.588 220.115 113.803 220.271 cv
123.396 220.399 136.164 219.604 145.189 218.914 cv
cp
.513726 .713726 .270588 rgb
f
100.666 216.341 mo
93.1265 216.664 86.6592 208.551 86.2202 198.22 cv
85.7817 187.889 91.5376 179.252 99.0771 178.929 cv
106.616 178.606 113.084 186.719 113.522 197.05 cv
113.961 207.381 108.205 216.018 100.666 216.341 cv
cp
f
124.185 196.717 mo
123.956 193.143 126.321 190.08 129.467 189.876 cv
132.613 189.673 135.349 192.406 135.578 195.98 cv
135.807 199.555 133.442 202.618 130.296 202.821 cv
127.149 203.024 124.414 200.292 124.185 196.717 cv
cp
f
62.772 192.604 mo
62.543 189.03 64.9077 185.967 68.0537 185.764 cv
71.2002 185.561 73.9365 188.293 74.165 191.868 cv
74.394 195.442 72.0293 198.505 68.8828 198.708 cv
65.7363 198.912 63.0005 196.179 62.772 192.604 cv
cp
f
145.141 218.298 mo
144.326 217.031 143.998 215.449 144.347 213.859 cv
145.041 210.691 148.158 208.69 151.311 209.388 cv
151.578 209.447 151.835 209.522 152.083 209.616 cv
152.565 214.565 152.421 217.695 152.421 217.695 cv
152.421 217.695 149.538 217.96 145.141 218.298 cv
cp
f
50.1138 209.423 mo
50.1138 209.423 50.4131 206.833 50.2993 202.717 cv
51.3931 202.231 52.6489 202.08 53.9106 202.359 cv
57.0605 203.056 59.0522 206.188 58.3584 209.353 cv
58.2319 209.929 58.0259 210.466 57.7534 210.957 cv
53.0708 210.033 50.1138 209.423 50.1138 209.423 cv
cp
f
171.965 221.275 mo
171.938 221.26 li
171.588 221.035 167.803 218.628 161.874 215.218 cv
160.634 214.506 159.302 213.75 157.887 212.962 cv
157.206 212.581 156.501 212.19 155.781 211.795 cv
154.978 211.355 154.156 210.908 153.312 210.454 cv
153.127 210.354 152.94 210.253 152.753 210.154 cv
152.323 209.922 151.89 209.692 151.449 209.46 cv
141.969 204.431 130.252 198.795 118.644 194.706 cv
112.612 192.584 106.607 190.877 100.962 189.89 cv
98.0215 189.374 95.1719 189.056 92.4727 188.975 cv
91.4907 188.946 90.5264 188.948 89.584 188.986 cv
89.1826 188.998 88.7866 189.021 88.3931 189.048 cv
71.9014 190.207 59.3779 194.375 50.6753 198.521 cv
50.272 198.714 49.876 198.907 49.4897 199.1 cv
48.5645 199.557 47.689 200.012 46.8569 200.463 cv
44.3696 201.811 42.2983 203.104 40.6401 204.232 cv
39.9658 204.692 39.3584 205.123 38.8193 205.521 cv
36.7676 207.035 35.7026 208.042 35.5991 208.14 cv
35.5918 208.148 li
37.2383 174.186 li
37.2554 174.186 li
40.9072 174.185 li
41.52 174.184 42.2065 174.184 42.9595 174.187 cv
43.8208 174.186 44.7705 174.188 45.7915 174.193 cv
46.1953 174.193 46.6108 174.195 47.0366 174.198 cv
56.1338 174.237 70.1182 174.394 81.3364 174.952 cv
83.9644 175.082 86.4399 175.235 88.667 175.415 cv
90.0156 175.521 91.2705 175.636 92.415 175.765 cv
92.4712 175.772 li
92.5156 175.779 li
93.3965 175.878 94.209 175.984 94.9424 176.095 cv
94.9644 176.098 li
99.6621 176.813 107.086 177.424 115.317 177.934 cv
115.322 177.934 li
118.546 178.133 121.892 178.315 125.249 178.485 cv
130.928 178.77 136.627 179.011 141.792 179.205 cv
142.902 179.249 143.985 179.286 145.035 179.322 cv
145.461 179.34 145.884 179.354 146.3 179.369 cv
147.294 179.403 148.259 179.438 149.189 179.47 cv
150.34 179.506 151.436 179.543 152.469 179.575 cv
153.918 179.622 155.24 179.661 156.411 179.695 cv
159.975 179.803 162.127 179.854 162.127 179.854 cv
171.965 221.275 li
cp
.764706 .8 .858824 rgb
f
88.3916 189.048 mo
53.1597 191.525 36.0278 207.732 35.5991 208.14 cv
35.8364 207.785 43.6235 196.34 64.1274 182.759 cv
65.0073 182.418 65.7026 182.104 66.1523 181.829 cv
70.0913 179.419 81.5688 175.215 94.9429 180.207 cv
108.315 185.199 140.404 202.971 153.313 210.453 cv
134.988 200.588 107.122 187.732 88.3916 189.048 cv
cp
.941176 .945098 .94902 rgb
f
64.3652 139.594 mo
69.127 143.26 72.8657 148.028 75.3647 153.41 cv
77.6294 158.288 81.1187 166.093 82.7568 171.264 cv
85.292 179.268 91.7896 201.279 89.5742 205.128 cv
87.3584 208.978 83.2212 208.363 81.6484 207.439 cv
80.0752 206.517 76.1157 201.746 74.5298 191.74 cv
72.9438 181.734 67.4004 174.039 62.3335 171.731 cv
57.2666 169.424 42.6987 160.654 38.8965 151.11 cv
35.0942 141.567 48.2319 131.17 57.8906 135.632 cv
60.3052 136.747 62.4727 138.137 64.3652 139.594 cv
cp
.988235 .815686 .72549 rgb
f
38.6108 151.225 mo
39.1821 150.996 li
42.7705 160.002 56.6709 168.813 62.4604 171.45 cv
65.354 172.768 68.332 175.783 70.6328 179.724 cv
70.1021 180.036 li
67.8647 176.204 64.9868 173.279 62.2065 172.013 cv
58.2549 170.213 42.6694 161.411 38.6108 151.225 cv
cp
.929412 .698039 .596078 rgb
f
64.1782 139.839 mo
64.5527 139.349 li
69.2593 142.973 73.0942 147.79 75.6436 153.28 cv
78.1401 158.657 81.4517 166.125 83.0498 171.17 cv
83.5039 172.604 84.2212 174.916 85.0591 177.784 cv
84.4683 177.958 li
83.6328 175.095 82.917 172.789 82.4634 171.357 cv
80.8755 166.344 77.5752 158.901 75.0864 153.541 cv
72.5786 148.141 68.8066 143.403 64.1782 139.839 cv
cp
f
85.4077 199.394 mo
83.3755 199.844 81.1113 200.706 81.4497 204.638 cv
81.7876 208.57 83.9326 209.594 85.7021 209.88 cv
87.4717 210.166 89.75 209.183 89.8677 207.544 cv
90.0469 205.864 90.0435 205.168 89.7061 203.038 cv
89.3682 200.908 88.188 198.779 85.4077 199.394 cv
cp
1 .678431 .670588 rgb
f
116.03 256.305 mo
114.1 259.857 100.255 281.58 94.4023 284.923 cv
88.5498 288.265 69.4326 285.768 60.1973 283.888 cv
50.9624 282.01 24.7598 286.612 13.5923 290.585 cv
9.40771 292.072 4.5 293.825 0 295.435 cv
0 261.968 li
6.34521 260.095 11.8076 258.098 14.8726 256.128 cv
26.2524 248.815 40.855 238.368 53.9551 234.815 cv
67.0552 231.263 90.0327 215.385 96.2598 215.172 cv
101.905 214.982 100.25 221.822 98.1675 224.505 cv
97.9824 224.73 li
97.8652 224.862 li
97.8398 224.888 li
97.6274 225.095 li
97.5098 225.195 li
96.2075 226.252 93.2573 228.567 90.0449 230.835 cv
89.6899 231.087 89.3301 231.337 88.9673 231.587 cv
88.6074 231.837 88.2451 232.08 87.8823 232.325 cv
87.5225 232.567 87.1602 232.805 86.7998 233.038 cv
86.4424 233.27 86.085 233.498 85.7324 233.717 cv
84.6777 234.375 83.6626 234.962 82.7373 235.433 cv
82.6152 235.495 82.4976 235.56 82.3823 235.627 cv
82.165 235.763 li
82.1475 235.772 li
81.9702 235.89 li
81.855 235.97 li
81.7173 236.067 81.5825 236.172 81.4526 236.283 cv
81.4424 236.292 li
81.2827 236.428 li
81.1025 236.587 li
80.9448 236.74 li
80.875 236.81 li
80.6948 236.995 li
80.5474 237.158 li
80.4902 237.22 li
80.3477 237.388 li
80.1123 237.665 79.8926 237.955 79.6875 238.257 cv
79.5649 238.44 li
79.2251 238.955 78.9248 239.498 78.6602 240.042 cv
78.5098 240.355 78.3701 240.665 78.2402 240.978 cv
78.1099 241.292 77.9902 241.603 77.8774 241.91 cv
77.7974 242.14 li
77.7202 242.365 li
77.5327 242.925 77.375 243.46 77.25 243.953 cv
76.8574 245.438 76.7251 246.505 76.7251 246.505 cv
76.7251 246.505 85.2524 256.732 85.7148 259.03 cv
85.7148 259.03 92.5352 255.063 97.5176 255.268 cv
97.5176 255.268 98.1899 250.913 102.377 246.495 cv
106.027 246.453 110.982 246.268 116.563 245.962 cv
116.873 250.783 116.82 254.855 116.03 256.305 cv
cp
.988235 .815686 .72549 rgb
f
76.1694 249.305 mo
76.1689 248.38 76.2441 247.421 76.4224 246.447 cv
77.0273 246.559 li
75.9858 252.238 78.6919 257.582 78.7197 257.636 cv
78.1733 257.92 li
78.0762 257.731 76.1709 253.965 76.1694 249.305 cv
cp
.929412 .698039 .596078 rgb
f
89.9888 217.294 mo
88.999 218.26 91.667 221.223 92.5811 221.297 cv
93.4956 221.371 99.6948 218.523 100.021 217.839 cv
100.564 216.7 99.1099 214.158 96.9551 214.626 cv
94.8521 215.083 89.9888 217.294 89.9888 217.294 cv
cp
1 .678431 .670588 rgb
f
33.7646 216.906 mo
33.7734 216.876 34.6465 213.901 35.293 208.104 cv
35.9224 202.457 36.0576 197.295 36.0586 197.243 cv
36.6738 197.259 li
36.6724 197.311 36.5366 202.499 35.9043 208.174 cv
35.2515 214.033 34.3628 217.053 34.354 217.083 cv
33.7646 216.906 li
cp
.764706 .8 .858824 rgb
f
500 56.7124 mo
500 91.9375 li
495.133 92.6875 475.27 96.0498 455.08 103.717 cv
436.325 111.205 422.888 132.447 415.803 135.603 cv
408.862 138.692 394.95 131.873 384.805 131.535 cv
422.053 79.5249 li
422.053 79.5249 442.41 75.7402 466.907 66.0249 cv
476.888 62.0674 490.713 58.7227 500 56.7124 cv
cp
.52549 .27451 .203922 rgb
f
277.083 77.7207 mo
291.923 63.5493 li
291.928 63.5449 li
291.931 63.541 li
305.604 50.4844 li
323.195 33.6899 li
405.238 104.098 li
391.493 123.174 li
388.274 127.641 li
367.837 156.008 li
366.527 157.827 364.349 158.615 362.297 158.259 cv
361.318 158.093 360.371 157.664 359.558 156.963 cv
358.631 156.165 li
357.748 155.403 li
357.403 155.107 li
347.382 146.468 li
347.047 146.178 li
346.192 145.442 li
290.504 97.4375 li
289.334 96.4302 li
289.335 96.4282 li
288.997 96.1392 li
277.954 86.6191 li
277.314 86.0669 li
276.33 85.2188 275.712 84.1147 275.468 82.9448 cv
275.082 81.1118 275.614 79.1226 277.083 77.7207 cv
cp
.74902 .533333 .623529 rgb
f
281.871 77.0381 mo
306.949 51.623 li
323.98 34.3647 li
403.645 102.771 li
389.509 121.494 li
367.381 150.804 li
365.56 153.33 361.95 153.748 359.58 151.703 cv
282.089 84.9043 li
279.706 82.8486 279.605 79.2017 281.871 77.0381 cv
cp
.839216 .654902 .72549 rgb
f
281.871 77.0381 mo
306.949 51.623 li
389.509 121.494 li
367.381 150.804 li
365.56 153.33 361.95 153.748 359.58 151.703 cv
282.089 84.9043 li
279.706 82.8486 279.605 79.2017 281.871 77.0381 cv
cp
.74902 .533333 .623529 rgb
f
346.191 145.442 mo
352.085 138.145 359.184 134.423 362.271 136.413 cv
365.603 138.561 363.94 147.163 358.631 156.165 cv
346.191 145.442 li
cp
.839216 .654902 .72549 rgb
f
357.403 155.107 mo
357.748 155.403 li
358.164 154.646 358.559 153.883 358.925 153.133 cv
358.525 152.937 li
358.177 153.653 357.798 154.381 357.403 155.107 cv
cp
347.382 146.468 mo
347.54 146.285 347.698 146.104 347.855 145.927 cv
347.521 145.632 li
347.362 145.812 347.204 145.992 347.047 146.178 cv
347.382 146.468 li
cp
359.715 150.327 mo
360.124 150.501 li
360.515 149.575 360.861 148.663 361.157 147.793 cv
360.735 147.65 li
360.444 148.509 360.101 149.411 359.715 150.327 cv
cp
349.828 143.848 mo
350.529 143.159 351.241 142.511 351.945 141.923 cv
351.66 141.582 li
350.948 142.177 350.225 142.834 349.516 143.531 cv
349.828 143.848 li
cp
354.229 140.204 mo
355.096 139.624 355.931 139.155 356.708 138.813 cv
356.524 138.407 li
355.724 138.761 354.869 139.241 353.98 139.835 cv
354.229 140.204 li
cp
361.524 144.902 mo
361.957 145.004 li
362.199 143.945 362.342 142.972 362.381 142.114 cv
361.937 142.094 li
361.899 142.924 361.761 143.87 361.524 144.902 cv
cp
359.395 138.128 mo
360.411 138.125 361.12 138.537 361.529 139.377 cv
361.93 139.188 li
361.702 138.719 361.39 138.357 361.002 138.107 cv
360.564 137.825 360.022 137.681 359.391 137.683 cv
359.395 138.128 li
cp
.74902 .533333 .623529 rgb
f
355.621 141.1 mo
356.387 139.913 357.974 139.574 359.166 140.343 cv
360.359 141.112 360.706 142.698 359.94 143.885 cv
359.175 145.072 357.588 145.411 356.396 144.642 cv
355.202 143.873 354.855 142.287 355.621 141.1 cv
cp
.764706 .8 .858824 rgb
f
356.992 141.984 mo
357.271 141.55 357.852 141.426 358.287 141.707 cv
358.723 141.988 358.85 142.567 358.57 143.001 cv
358.29 143.435 357.71 143.559 357.274 143.278 cv
356.839 142.997 356.712 142.417 356.992 141.984 cv
cp
.917647 .92549 .937255 rgb
f
277.955 86.6191 mo
286.25 79.1685 295.098 75.606 297.919 78.6479 cv
300.582 81.5195 297.622 90.0117 290.504 97.4365 cv
277.955 86.6191 li
cp
.839216 .654902 .72549 rgb
f
294.086 85.6597 mo
295.124 84.7017 295.184 83.0815 294.22 82.041 cv
293.255 81.0005 291.631 80.9336 290.593 81.8921 cv
289.555 82.8501 289.495 84.4702 290.459 85.5107 cv
291.424 86.5513 293.048 86.6177 294.086 85.6597 cv
cp
.764706 .8 .858824 rgb
f
292.978 84.4639 mo
293.356 84.1143 293.379 83.522 293.026 83.1421 cv
292.674 82.7617 292.081 82.7373 291.701 83.0874 cv
291.322 83.4375 291.3 84.0293 291.652 84.4097 cv
292.005 84.7896 292.598 84.814 292.978 84.4639 cv
cp
.917647 .92549 .937255 rgb
f
289.335 96.4282 mo
289.879 95.835 290.404 95.23 290.903 94.624 cv
290.559 94.3413 li
290.063 94.9448 289.538 95.5469 288.997 96.1392 cv
289.335 96.4282 li
cp
279.646 86.6191 mo
280.413 86.022 281.189 85.4497 281.957 84.9116 cv
281.699 84.5474 li
280.927 85.0884 280.146 85.668 279.373 86.2661 cv
279.646 86.6191 li
cp
292.308 92.0713 mo
292.668 92.3301 li
293.026 91.8311 293.37 91.3276 293.689 90.8325 cv
293.888 90.5249 294.08 90.2139 294.263 89.9102 cv
293.88 89.6821 li
293.701 89.9805 293.511 90.2876 293.315 90.5908 cv
292.999 91.0806 292.66 91.5786 292.308 92.0713 cv
cp
284.351 83.3311 mo
285.197 82.8066 286.036 82.3271 286.839 81.9067 cv
286.633 81.5127 li
285.817 81.9385 284.973 82.4243 284.117 82.9536 cv
284.351 83.3311 li
cp
295.224 87.1616 mo
295.628 87.3481 li
296.075 86.3794 296.418 85.4614 296.643 84.6152 cv
296.214 84.5 li
295.995 85.3203 295.662 86.2153 295.224 87.1616 cv
cp
289.433 80.6978 mo
290.417 80.3042 291.33 80.0176 292.147 79.8516 cv
292.058 79.4165 li
291.214 79.5898 290.273 79.8823 289.266 80.2871 cv
289.433 80.6978 li
cp
294.896 79.8281 mo
295.317 79.9546 295.657 80.1631 295.909 80.4448 cv
296.199 80.7686 296.39 81.2046 296.473 81.7407 cv
296.911 81.6758 li
296.815 81.0527 296.589 80.5376 296.24 80.1494 cv
296.099 79.9917 295.935 79.8521 295.753 79.7349 cv
295.538 79.5962 295.292 79.4849 295.024 79.4023 cv
294.896 79.8281 li
cp
.74902 .533333 .623529 rgb
f
306.751 51.4277 mo
307.147 51.8179 li
282.069 77.2334 li
281.04 78.2163 280.476 79.5889 280.515 81.0049 cv
280.554 82.4209 281.194 83.7661 282.271 84.6943 cv
359.761 151.493 li
360.831 152.417 362.25 152.854 363.652 152.692 cv
365.055 152.531 366.332 151.783 367.155 150.641 cv
389.287 121.327 li
389.731 121.662 li
367.604 150.971 li
366.692 152.234 365.275 153.064 363.718 153.243 cv
362.161 153.422 360.587 152.936 359.398 151.912 cv
281.908 85.1138 li
280.713 84.083 280.003 82.5898 279.959 81.0181 cv
279.916 79.4463 280.542 77.9224 281.679 76.8374 cv
306.751 51.4277 li
cp
.839216 .654902 .72549 rgb
f
333.274 82.8438 mo
333.274 82.8438 li
334.204 83.6304 334.322 85.0176 333.538 85.9414 cv
317.69 104.62 li
316.906 105.544 315.518 105.656 314.588 104.87 cv
313.658 104.083 313.54 102.696 314.324 101.771 cv
330.172 83.0928 li
330.956 82.1689 332.345 82.0571 333.274 82.8438 cv
cp
.666667 .443137 .545098 rgb
f
350.322 0 mo
348.758 0 li
340.357 7.78271 325.178 21.9351 324.215 23.4326 cv
324.018 23.7373 323.848 24.0552 323.707 24.3823 cv
323.55 24.7549 323.428 25.1377 323.345 25.5273 cv
323.325 25.625 323.308 25.7227 323.29 25.8198 cv
323.268 25.9702 323.25 26.1201 323.237 26.27 cv
323.228 26.3848 323.225 26.5 323.223 26.6152 cv
323.218 26.7124 li
323.215 26.855 li
323.218 26.9976 li
323.26 28.1323 323.622 29.29 324.335 30.3726 cv
325.74 32.5049 325.37 33.7852 323.56 33.7202 cv
323.442 33.7148 323.322 33.7051 323.195 33.6899 cv
323.98 34.3652 li
403.67 102.752 li
405.237 104.098 li
418.595 91.6226 li
418.6 91.6152 li
419.11 91.1401 li
434.732 71.7998 li
435.995 70.2349 435.805 67.9551 434.303 66.6074 cv
429.037 61.8926 li
359.912 0 li
356.355 0 li
350.322 0 li
cp
.74902 .533333 .623529 rgb
f
356.355 0 mo
429.037 61.8926 li
434.303 66.6074 li
435.805 67.9551 435.995 70.2349 434.732 71.7998 cv
419.11 91.1401 li
418.6 91.6152 li
418.595 91.6226 li
405.237 104.098 li
403.67 102.752 li
323.98 34.3652 li
323.885 34.2026 323.777 34.0352 323.657 33.8652 cv
323.56 33.7202 li
325.37 33.7852 325.74 32.5049 324.335 30.3726 cv
323.622 29.29 323.26 28.1323 323.218 26.9976 cv
323.215 26.855 li
323.218 26.7124 li
323.218 26.5649 323.225 26.4175 323.237 26.27 cv
323.25 26.1201 323.268 25.9702 323.29 25.8198 cv
323.308 25.7227 323.325 25.625 323.345 25.5273 cv
323.428 25.1377 323.55 24.7549 323.707 24.3823 cv
328.655 19.3525 343.005 6.11523 350.322 0 cv
356.355 0 li
cp
.839216 .654902 .72549 rgb
f
416.897 65.8623 mo
417.889 64.3247 419.944 63.8853 421.489 64.8813 cv
423.034 65.8774 423.482 67.9312 422.491 69.4688 cv
421.501 71.0059 419.444 71.4448 417.899 70.4492 cv
416.355 69.4531 415.906 67.3994 416.897 65.8623 cv
cp
.764706 .8 .858824 rgb
f
418.487 66.8872 mo
418.915 66.2236 419.803 66.0342 420.469 66.4639 cv
421.136 66.8936 421.329 67.7798 420.901 68.4434 cv
420.474 69.1069 419.587 69.2964 418.92 68.8667 cv
418.253 68.437 418.06 67.5508 418.487 66.8872 cv
cp
.917647 .92549 .937255 rgb
f
354.139 9.12158 mo
355.13 7.58398 357.186 7.14502 358.73 8.14111 cv
360.275 9.13672 360.725 11.1904 359.733 12.728 cv
358.742 14.2656 356.687 14.7046 355.142 13.7085 cv
353.597 12.7129 353.147 10.6592 354.139 9.12158 cv
cp
.764706 .8 .858824 rgb
f
355.729 10.147 mo
356.156 9.4834 357.044 9.29395 357.71 9.72363 cv
358.377 10.1533 358.571 11.0396 358.143 11.7031 cv
357.716 12.3667 356.828 12.5562 356.161 12.1265 cv
355.495 11.6963 355.301 10.8101 355.729 10.147 cv
cp
.917647 .92549 .937255 rgb
f
323.216 26.7134 mo
323.603 29.9238 325.972 31.3418 325.853 32.8779 cv
325.734 34.4175 323.98 34.3647 323.98 34.3647 cv
323.884 34.2026 323.776 34.0361 323.657 33.8638 cv
323.56 33.7192 li
325.369 33.7842 325.739 32.5039 324.336 30.3711 cv
323.624 29.29 323.26 28.1333 323.219 26.9971 cv
323.216 26.9028 323.214 26.8071 323.216 26.7134 cv
cp
.74902 .533333 .623529 rgb
f
343.604 132.572 mo
365.606 106.636 li
371.149 110.99 li
372.633 112.157 372.895 114.298 371.732 115.773 cv
354.921 137.139 li
353.76 138.615 351.616 138.868 350.134 137.701 cv
343.604 132.572 li
cp
.27451 .454902 .556863 rgb
f
330.343 123.375 mo
353.387 96.2134 li
360.807 102.493 li
362.315 103.771 362.507 106.022 361.231 107.522 cv
342.8 129.251 li
341.526 130.75 339.271 130.933 337.762 129.654 cv
330.343 123.375 li
cp
.764706 .886275 .709804 rgb
f
317.379 112.376 mo
330.789 96.5693 li
337.095 89.1372 li
339.399 86.4214 li
346.957 93.5498 li
348.329 94.8447 348.396 96.9995 347.104 98.3623 cv
346.997 98.4756 li
340.306 105.545 li
328.414 118.112 li
327.123 119.475 324.964 119.533 323.593 118.238 cv
317.379 112.376 li
cp
1 1 1 rgb
f
330.789 96.5693 mo
337.095 89.1372 li
346.997 98.4756 li
340.306 105.545 li
330.789 96.5693 li
cp
.0235294 .207843 .309804 rgb
f
341.033 83.8677 mo
341.46 84.2256 li
317.592 112.556 li
317.166 112.197 li
341.033 83.8677 li
cp
.839216 .654902 .72549 rgb
f
354.541 94.0728 mo
354.968 94.4297 li
330.556 123.553 li
330.129 123.196 li
354.541 94.0728 li
cp
f
366.733 104.773 mo
367.158 105.134 li
342.116 134.514 li
341.692 134.153 li
366.733 104.773 li
cp
f
377.952 115.435 mo
378.379 115.792 li
362.011 135.348 li
361.584 134.992 li
377.952 115.435 li
cp
f
376.454 56.4819 mo
396.276 74.5645 li
415.101 91.7368 li
413.762 93.1997 li
412.726 94.3315 410.963 94.4072 409.824 93.3687 cv
375.301 61.8755 li
374.162 60.8369 374.079 59.0771 375.114 57.9453 cv
376.454 56.4819 li
cp
1 .901961 .309804 rgb
f
333.705 17.4858 mo
352.584 34.707 li
373.759 54.0234 li
372.42 55.4868 li
371.384 56.6187 369.621 56.6938 368.482 55.6553 cv
332.553 22.8789 li
331.414 21.8403 331.33 20.0806 332.366 18.9487 cv
333.705 17.4858 li
cp
.27451 .454902 .556863 rgb
f
371.605 61.668 mo
390.128 78.5645 li
410.252 96.9229 li
409.301 97.9619 li
408.266 99.0938 406.503 99.1694 405.364 98.1309 cv
370.841 66.6377 li
369.702 65.5986 369.619 63.8394 370.654 62.7075 cv
371.605 61.668 li
cp
.513726 .713726 .270588 rgb
f
328.672 22.5596 mo
327.811 23.4863 li
327.622 23.6885 327.465 23.9106 327.343 24.144 cv
326.674 25.3965 326.928 27.0063 328.054 28.0356 cv
363.641 60.5581 li
364.768 61.5889 366.405 61.7075 367.61 60.9453 cv
367.835 60.8047 368.045 60.6323 368.233 60.4302 cv
369.13 59.4658 li
328.672 22.5596 li
cp
.898039 .921569 .956863 rgb
f
328.672 22.5596 mo
327.811 23.4863 li
327.622 23.6885 327.465 23.9106 327.343 24.144 cv
367.61 60.9453 li
367.835 60.8047 368.045 60.6323 368.233 60.4302 cv
369.13 59.4658 li
364.223 54.9897 li
328.672 22.5596 li
cp
1 1 1 rgb
f
329.149 25.7915 mo
330.555 24.2773 li
331.888 25.4927 li
330.479 27.0068 li
329.149 25.7915 li
cp
0 0 0 rgb
f
332.637 26.1753 mo
331.229 27.6899 li
331.894 28.2979 li
333.301 26.7832 li
332.637 26.1753 li
cp
f
333.884 27.314 mo
332.476 28.8286 li
332.809 29.1333 li
334.217 27.6187 li
333.884 27.314 li
cp
f
334.598 27.9644 mo
333.188 29.481 li
333.521 29.7856 li
334.931 28.269 li
334.598 27.9644 li
cp
f
334.053 30.2725 mo
335.463 28.7544 li
336.961 30.1201 li
335.55 31.6387 li
334.053 30.2725 li
cp
f
336.215 32.2466 mo
337.626 30.728 li
338.374 31.4111 li
336.964 32.9297 li
336.215 32.2466 li
cp
f
353.487 48.0273 mo
354.911 46.4966 li
356.242 47.7104 li
354.818 49.2412 li
353.487 48.0273 li
cp
f
352.074 46.7344 mo
353.495 45.2046 li
354.16 45.8125 li
352.739 47.3428 li
352.074 46.7344 li
cp
f
352.58 44.3691 mo
351.159 45.8994 li
351.492 46.2041 li
352.913 44.6738 li
352.58 44.3691 li
cp
f
351.865 43.7192 mo
350.446 45.2476 li
350.779 45.5518 li
352.199 44.0234 li
351.865 43.7192 li
cp
f
348.418 43.394 mo
349.836 41.8677 li
351.333 43.2339 li
349.914 44.7622 li
348.418 43.394 li
cp
f
347.004 42.1035 mo
348.422 40.5767 li
349.171 41.2598 li
347.753 42.7866 li
347.004 42.1035 li
cp
f
338.294 34.145 mo
339.705 32.625 li
340.454 33.3081 li
339.042 34.8281 li
338.294 34.145 li
cp
f
339.525 35.271 mo
340.938 33.749 li
341.313 34.0908 li
339.898 35.6118 li
339.525 35.271 li
cp
f
341.785 34.5215 mo
340.372 36.0439 li
340.746 36.3848 li
342.16 34.8638 li
341.785 34.5215 li
cp
f
355.917 50.2446 mo
357.342 48.7119 li
358.091 49.395 li
356.664 50.9292 li
355.917 50.2446 li
cp
f
357.995 52.1431 mo
359.42 50.6108 li
360.169 51.2935 li
358.743 52.8281 li
357.995 52.1431 li
cp
f
360.652 51.7349 mo
359.227 53.269 li
359.602 53.6113 li
361.028 52.0767 li
360.652 51.7349 li
cp
f
361.5 52.5073 mo
360.073 54.042 li
360.446 54.3848 li
361.873 52.8481 li
361.5 52.5073 li
cp
f
341.244 36.8403 mo
342.658 35.3193 li
344.365 36.8755 li
342.949 38.3979 li
341.244 36.8403 li
cp
f
343.489 38.8911 mo
344.905 37.3687 li
347.524 39.7588 li
346.107 41.2832 li
343.489 38.8911 li
cp
f
328.77 31.0957 mo
328.792 31.1133 331.054 32.8823 333.156 34.8306 cv
335.09 36.6226 348.103 48.6289 353.628 53.6719 cv
355.446 55.3311 358.037 57.4941 360.78 59.7842 cv
366.297 64.3906 372.55 69.6118 374.573 72.4746 cv
377.465 76.5654 404.365 98.6611 404.637 98.8838 cv
403.934 99.7393 li
402.82 98.8262 376.644 77.3247 373.666 73.1113 cv
371.727 70.3677 365.533 65.1963 360.068 60.6338 cv
357.316 58.3354 354.716 56.1646 352.88 54.4888 cv
347.353 49.4443 334.336 37.4346 332.401 35.6421 cv
330.335 33.7271 328.109 31.9854 328.087 31.9683 cv
328.77 31.0957 li
cp
.513726 .713726 .270588 rgb
f
329.235 32.8267 mo
329.372 32.9473 342.96 44.8843 346.848 48.2437 cv
350.786 51.6465 370.968 70.2612 374.249 74.0737 cv
377.421 77.7612 401.887 98.1128 402.134 98.3184 cv
401.425 99.1689 li
400.414 98.3291 376.64 78.5518 373.407 74.7944 cv
370.15 71.0103 350.049 52.4731 346.122 49.0811 cv
342.231 45.7188 328.641 33.7783 328.503 33.6582 cv
329.235 32.8267 li
cp
.745098 .878431 .537255 rgb
f
403.67 102.752 mo
418.594 91.6216 li
405.238 104.098 li
403.67 102.752 li
cp
.74902 .533333 .623529 rgb
f
331.738 33.5283 mo
328.735 36.1895 li
387.482 102.146 li
398.063 92.7681 li
331.738 33.5283 li
cp
.745098 .878431 .537255 rgb
f
395.108 90.1284 mo
387.446 96.9189 li
333.853 36.7471 li
334.6 36.0845 li
333.932 35.4878 li
332.597 36.6704 li
387.375 98.1719 li
395.777 90.7256 li
395.108 90.1284 li
cp
.513726 .713726 .270588 rgb
f
387.41 97.5454 mo
393.522 92.1299 li
392.677 90.0205 390.721 88.4312 388.305 88.1646 cv
385.643 87.8711 383.189 89.2651 382.018 91.4897 cv
387.41 97.5454 li
cp
f
359.88 58.6636 mo
360.434 60.8262 361.479 62.8257 363.044 64.502 cv
365.18 66.7871 367.981 68.1543 371.045 68.6362 cv
359.88 58.6636 li
cp
f
334.266 35.7861 mo
333.225 36.709 li
338.62 42.7661 li
339.361 42.4551 340.032 42.0039 340.602 41.4453 cv
334.266 35.7861 li
cp
f
376.641 56.2778 mo
415.287 91.5322 li
414.913 91.9409 li
376.267 56.686 li
376.641 56.2778 li
cp
.74902 .533333 .623529 rgb
f
333.893 17.2813 mo
373.945 53.8193 li
373.571 54.2275 li
333.519 17.6895 li
333.893 17.2813 li
cp
f
371.793 61.4639 mo
410.439 96.7183 li
410.065 97.127 li
371.419 61.8721 li
371.793 61.4639 li
cp
f
392.732 35.646 mo
393.143 36.021 li
367.921 63.5488 li
367.51 63.1738 li
392.732 35.646 li
cp
f
328.947 30.7417 mo
331.655 32.606 337.196 37.77 343.063 43.2368 cv
347.774 47.6274 352.646 52.1675 356.215 55.1421 cv
360.848 59.0024 364.608 62.4819 367.928 65.5522 cv
370.915 68.3154 373.494 70.7021 375.749 72.4487 cv
379.604 75.4341 382.43 78.1733 386.706 82.3198 cv
387.664 83.2485 388.696 84.25 389.833 85.3428 cv
394.32 89.6611 399.102 93.564 402.593 96.4141 cv
403.892 97.4756 405.015 98.3916 405.787 99.0605 cv
405.424 99.479 li
404.657 98.8154 403.538 97.9014 402.241 96.8433 cv
398.743 93.9868 393.952 90.0752 389.448 85.7417 cv
388.312 84.6475 387.278 83.6455 386.319 82.7168 cv
382.057 78.5835 379.24 75.8525 375.409 72.8857 cv
373.136 71.125 370.548 68.731 367.551 65.9585 cv
364.237 62.8926 360.481 59.4185 355.86 55.5669 cv
352.278 52.5825 347.401 48.0371 342.685 43.6411 cv
336.834 38.189 331.308 33.0391 328.634 31.1978 cv
328.947 30.7417 li
cp
f
328.859 22.355 mo
369.316 59.2617 li
368.942 59.6704 li
328.485 22.7632 li
328.859 22.355 li
cp
f
368.452 71.6924 mo
368.055 72.3374 367.518 72.7725 366.938 73.0649 cv
365.277 73.9077 363.285 73.5625 363.285 73.5625 cv
363.285 73.5625 360.075 77.3501 357.95 78.8477 cv
355.82 80.3452 352.32 81.8926 342.785 85.5552 cv
333.245 89.2148 330.192 83.8926 330.192 83.8926 cv
330.192 83.8926 326.412 84.1699 324.14 81.5527 cv
321.87 78.9351 304.607 59.3901 298.298 48.2476 cv
291.985 37.1074 288.425 28.5225 281.117 12.7974 cv
279.935 10.2524 276.867 4.02246 274.987 0 cv
308.933 0 li
310.025 5.8623 310.947 11.1499 311.415 14.6548 cv
313.05 26.8877 321.805 38.9648 329.395 41.3198 cv
336.987 43.6748 339.622 45.8525 344.695 50.7148 cv
349.768 55.5752 355.492 58.7549 363.272 63.1177 cv
365.768 64.5151 367.353 65.6426 368.305 66.6099 cv
370.327 68.6602 369.505 69.9976 368.452 71.6924 cv
cp
.52549 .27451 .203922 rgb
f
362.572 73.2129 mo
362.451 73.5688 li
362.394 73.5493 356.612 71.5845 352.026 69.5396 cv
351.336 69.2305 li
347.359 67.4531 346.747 67.1802 344.058 67.0029 cv
341.186 66.8135 337.65 65.2793 337.502 65.2144 cv
337.652 64.8696 li
337.688 64.8853 341.277 66.4424 344.083 66.6279 cv
346.84 66.8096 347.459 67.0869 351.489 68.8872 cv
352.18 69.1958 li
356.756 71.2358 362.515 73.1934 362.572 73.2129 cv
cp
.407843 .188235 .137255 rgb
f
351.784 69.6406 mo
351.887 70.002 li
346.402 71.562 li
346.3 71.2002 li
351.784 69.6406 li
cp
f
343.272 69.3999 mo
343.896 69.6748 344.747 70.145 345.672 70.9277 cv
347.604 72.563 347.638 75.9165 346.461 77.9038 cv
346.138 77.7124 li
347.238 75.8545 347.218 72.729 345.429 71.2148 cv
343.689 69.7427 342.19 69.4165 342.176 69.4131 cv
342.252 69.0449 li
342.284 69.0518 342.672 69.1348 343.272 69.3999 cv
cp
f
340.274 65.9204 mo
343.971 70.0625 341.708 75.3359 341.685 75.3887 cv
341.341 75.2373 li
341.362 75.1865 343.526 70.1294 339.993 66.1709 cv
340.274 65.9204 li
cp
f
360.556 63.6069 mo
361.504 62.5996 363.996 64.2793 365.038 64.7827 cv
366.033 65.2632 367.212 65.9419 368.307 66.6094 cv
370.328 68.6602 369.506 69.9971 368.453 71.6929 cv
368.055 72.3369 367.517 72.7734 366.938 73.0649 cv
366.228 72.8223 365.576 72.5635 365.06 72.2939 cv
364.894 72.2085 359.529 69.707 359.066 68.7891 cv
358.417 67.4976 359.608 64.6147 360.556 63.6069 cv
cp
.647059 .384314 .333333 rgb
f
381.038 119.585 mo
385.414 117.491 394.229 110.887 397.819 107.328 cv
401.445 103.733 414.289 88.5781 424.371 87.9131 cv
434.034 87.2759 417.193 124.222 417.193 124.222 cv
412.732 121.377 398.836 122.281 391.687 125.464 cv
387.686 127.245 383.725 129.259 380.314 130.708 cv
380.223 130.747 li
380.19 130.76 li
380.186 130.763 li
380.185 130.764 li
376.103 132.488 372.827 133.38 371.247 132.057 cv
370.188 131.168 370.194 129.775 370.977 128.188 cv
372.385 125.331 376.311 121.849 381.038 119.585 cv
cp
.52549 .27451 .203922 rgb
f
370.977 128.188 mo
372.4 126.885 375.117 125.289 376.805 124.623 cv
378.604 123.915 381.229 123.696 382.207 126.262 cv
382.9 128.083 381.396 130.206 380.314 130.708 cv
380.223 130.747 li
380.19 130.76 li
380.186 130.763 li
380.185 130.764 li
376.103 132.488 372.827 133.38 371.247 132.057 cv
370.188 131.168 370.194 129.775 370.977 128.188 cv
cp
.647059 .384314 .333333 rgb
f
417.311 124.037 mo
417.075 124.406 li
412.845 121.708 399.133 122.391 391.778 125.665 cv
391.594 125.263 li
395.033 123.732 400.207 122.647 405.433 122.363 cv
410.851 122.068 415.179 122.678 417.311 124.037 cv
cp
.407843 .188235 .137255 rgb
f
405.433 124.47 mo
406.522 129.476 410.728 132.26 410.77 132.291 cv
410.531 132.657 li
410.489 132.63 406.129 129.738 405.001 124.557 cv
405.433 124.47 li
cp
f
388.256 120.271 mo
388.619 120.691 li
388.492 120.8 li
388.95 121.379 390.118 123 389.929 124.256 cv
389.379 124.171 li
389.54 123.108 388.363 121.484 387.896 120.948 cv
387.713 120.737 li
388.256 120.271 li
cp
f
390.144 118.425 mo
390.051 118.633 li
390.549 119.11 391.533 120.455 391.559 121.949 cv
391.003 121.956 li
390.978 120.437 389.769 119.061 389.584 118.957 cv
389.372 118.831 li
389.457 118.598 li
389.635 118.198 li
390.144 118.425 li
cp
f
432.181 88.958 mo
431.94 89.4565 li
421.487 84.3955 410.405 95.3887 410.294 95.5005 cv
409.898 95.1094 li
409.927 95.0811 412.777 92.2275 416.914 90.0571 cv
422.42 87.168 427.699 86.7881 432.181 88.958 cv
cp
f
260.396 313.292 mo
225.659 313.292 197.499 310.352 197.499 306.724 cv
197.499 304.422 208.834 302.397 225.99 301.224 cv
230.288 305.01 235.94 307.31 242.131 307.31 cv
273.469 307.31 li
279.822 307.31 285.608 304.889 289.945 300.923 cv
309.789 302.028 323.293 304.211 323.293 306.724 cv
323.293 310.352 295.133 313.292 260.396 313.292 cv
1 .950788 .653549 rgb
f
257.8 209.167 mo
239.934 209.167 225.416 206.303 225.105 202.746 cv
225.105 202.746 225.104 202.747 225.103 202.747 cv
225.099 202.708 225.098 202.669 225.098 202.63 cv
225.098 202.537 225.109 202.445 225.13 202.353 cv
225.13 195.791 li
227.172 199.156 240.788 201.679 257.8 201.679 cv
275.003 201.679 288.734 199.099 290.534 195.677 cv
290.534 202.63 li
290.502 202.63 li
290.502 202.669 290.5 202.708 290.497 202.747 cv
290.496 202.746 290.496 202.746 290.495 202.746 cv
290.184 206.303 275.666 209.167 257.8 209.167 cv
.835755 .860392 .901453 rgb
f
225.99 301.224 mo
220.951 296.783 217.775 290.296 217.775 283.07 cv
217.775 214.75 li
217.775 210.514 220.977 203.703 225.103 202.747 cv
225.414 206.303 239.934 209.168 257.801 209.168 cv
275.665 209.168 290.185 206.303 290.497 202.747 cv
294.622 203.703 297.826 210.515 297.826 214.75 cv
297.826 283.07 li
297.826 290.134 294.789 296.493 289.945 300.923 cv
281.136 300.432 271.076 300.154 260.396 300.154 cv
247.696 300.154 235.877 300.547 225.99 301.224 cv
279.184 231.167 mo
279.661 237.815 280.134 248.242 279.673 260.19 cv
280.369 260.217 li
280.832 248.221 280.356 237.752 279.876 231.085 cv
284.162 230.561 287.86 229.838 290.641 228.95 cv
290.428 228.29 li
287.691 229.164 284.05 229.877 279.825 230.394 cv
279.5 226.062 279.189 223.51 279.181 223.447 cv
278.489 223.532 li
278.498 223.595 278.809 226.147 279.133 230.476 cv
274.262 231.039 268.66 231.348 262.792 231.348 cv
260.535 231.348 258.282 231.301 256.095 231.21 cv
256.065 231.903 li
258.263 231.995 260.525 232.041 262.792 232.041 cv
268.671 232.041 274.289 231.732 279.184 231.167 cv
.881892 .899608 .929135 rgb
f
273.469 307.31 mo
242.131 307.31 li
235.94 307.31 230.288 305.01 225.99 301.224 cv
235.877 300.547 247.696 300.154 260.396 300.154 cv
271.076 300.154 281.136 300.432 289.945 300.923 cv
285.608 304.889 279.822 307.31 273.469 307.31 cv
.881892 .875986 .754925 rgb
f
257.801 209.168 mo
239.934 209.168 225.414 206.303 225.103 202.747 cv
225.104 202.747 225.105 202.746 225.105 202.746 cv
225.416 206.303 239.934 209.167 257.8 209.167 cv
275.666 209.167 290.184 206.303 290.495 202.746 cv
290.496 202.746 290.496 202.746 290.497 202.747 cv
290.185 206.303 275.665 209.168 257.801 209.168 cv
.799769 .829804 .879862 rgb
f
257.8 201.217 mo
238.377 201.217 225.33 197.956 225.33 194.91 cv
225.33 191.864 238.377 188.604 257.8 188.604 cv
277.223 188.604 290.27 191.864 290.27 194.91 cv
290.27 196.2 287.928 197.529 283.752 198.632 cv
283.803 198.442 li
277.537 196.802 268.036 195.861 257.735 195.861 cv
248.066 195.861 238.937 196.709 232.686 198.188 cv
232.793 198.638 li
239.01 197.167 248.101 196.323 257.735 196.323 cv
267.744 196.323 276.989 197.213 283.218 198.77 cv
277.51 200.199 268.649 201.217 257.8 201.217 cv
.881892 .899608 .929135 rgb
f
257.801 201.449 mo
240.233 201.449 225.904 198.679 225.13 195.205 cv
225.13 195.791 li
224.956 195.503 224.866 195.209 224.866 194.91 cv
224.866 191.114 239.332 188.141 257.8 188.141 cv
276.268 188.141 290.734 191.114 290.734 194.91 cv
290.734 195.17 290.667 195.426 290.534 195.677 cv
290.534 194.91 li
290.502 194.91 li
290.502 194.91 li
290.502 191.299 275.861 188.372 257.8 188.372 cv
239.739 188.372 225.098 191.299 225.098 194.91 cv
225.098 198.521 239.739 201.448 257.8 201.448 cv
267.488 201.448 276.191 200.606 282.179 199.268 cv
276.191 200.606 267.488 201.449 257.801 201.449 cv
f
257.8 201.679 mo
240.788 201.679 227.172 199.156 225.13 195.791 cv
225.13 195.205 li
225.904 198.679 240.233 201.449 257.801 201.449 cv
267.488 201.449 276.191 200.606 282.179 199.268 cv
287.355 198.111 290.502 196.584 290.502 194.91 cv
290.502 194.91 li
290.502 194.91 li
290.534 194.91 li
290.534 195.677 li
288.734 199.099 275.003 201.679 257.8 201.679 cv
.799769 .829804 .879862 rgb
f
257.8 201.448 mo
239.739 201.448 225.098 198.521 225.098 194.91 cv
225.098 191.299 239.739 188.372 257.8 188.372 cv
275.861 188.372 290.502 191.299 290.502 194.91 cv
290.502 196.583 287.355 198.111 282.179 199.268 cv
276.191 200.606 267.488 201.448 257.8 201.448 cv
257.8 188.604 mo
238.377 188.604 225.33 191.864 225.33 194.91 cv
225.33 197.956 238.377 201.217 257.8 201.217 cv
268.649 201.217 277.51 200.199 283.218 198.77 cv
283.375 198.809 283.531 198.849 283.685 198.889 cv
283.752 198.632 li
287.928 197.529 290.27 196.2 290.27 194.91 cv
290.27 191.864 277.223 188.604 257.8 188.604 cv
.822837 .849412 .893702 rgb
f
282.179 199.268 mo
287.355 198.111 290.502 196.583 290.502 194.91 cv
290.502 194.91 li
290.502 196.584 287.355 198.111 282.179 199.268 cv
.782238 .814902 .869343 rgb
f
283.218 198.77 mo
276.989 197.213 267.744 196.323 257.735 196.323 cv
248.101 196.323 239.01 197.167 232.793 198.638 cv
232.686 198.188 li
238.937 196.709 248.066 195.861 257.735 195.861 cv
268.036 195.861 277.537 196.802 283.803 198.442 cv
283.752 198.632 li
283.577 198.679 283.399 198.724 283.218 198.77 cv
.822837 .849412 .893702 rgb
f
283.685 198.889 mo
283.531 198.849 283.375 198.809 283.218 198.77 cv
283.399 198.724 283.577 198.679 283.752 198.632 cv
283.685 198.889 li
.79331 .824314 .875986 rgb
f
280.369 260.217 mo
279.673 260.19 li
280.134 248.242 279.661 237.815 279.184 231.167 cv
274.289 231.732 268.671 232.041 262.792 232.041 cv
260.525 232.041 258.263 231.995 256.065 231.903 cv
256.095 231.21 li
258.282 231.301 260.535 231.348 262.792 231.348 cv
268.66 231.348 274.262 231.039 279.133 230.476 cv
278.809 226.147 278.498 223.595 278.489 223.532 cv
279.181 223.447 li
279.189 223.51 279.5 226.062 279.825 230.394 cv
284.05 229.877 287.691 229.164 290.428 228.29 cv
290.641 228.95 li
287.86 229.838 284.162 230.561 279.876 231.085 cv
280.356 237.752 280.832 248.221 280.369 260.217 cv
.963291 .969965 .979977 rgb
f
257.801 209.4 mo
239.333 209.4 224.866 206.426 224.866 202.63 cv
225.33 202.63 li
225.33 205.676 238.377 208.938 257.801 208.938 cv
277.223 208.938 290.27 205.676 290.27 202.63 cv
290.733 202.63 li
290.733 206.426 276.268 209.4 257.801 209.4 cv
cp
1 1 1 rgb
f
295.441 266.543 mo
295.441 271.072 291.752 274.744 287.201 274.744 cv
282.65 274.744 278.961 271.072 278.961 266.543 cv
278.961 262.015 282.65 258.343 287.201 258.343 cv
291.752 258.343 295.441 262.015 295.441 266.543 cv
cp
.972549 .85098 .2 rgb
f
262.95 265.886 mo
262.95 270.415 259.261 274.086 254.71 274.086 cv
250.16 274.086 246.47 270.415 246.47 265.886 cv
246.47 261.356 250.16 257.685 254.71 257.685 cv
259.261 257.685 262.95 261.356 262.95 265.886 cv
cp
f
280.051 275.474 mo
280.051 280.003 276.361 283.675 271.811 283.675 cv
267.26 283.675 263.57 280.003 263.57 275.474 cv
263.57 270.944 267.26 267.273 271.811 267.273 cv
276.361 267.273 280.051 270.944 280.051 275.474 cv
cp
f
296.637 275.777 mo
296.637 281.684 li
296.637 295.071 286.037 305.923 272.964 305.923 cv
242.505 305.923 li
229.432 305.923 218.834 295.071 218.834 281.684 cv
218.834 260.385 li
227.108 257.22 239.649 266.925 243.61 270.653 cv
247.57 274.38 252.709 269.393 257.934 271.986 cv
263.158 274.58 268.225 281.562 273.68 278.17 cv
279.603 274.489 286.192 268.468 296.637 275.777 cv
cp
1 .901961 .309804 rgb
f
260.828 294.226 mo
260.828 298.075 257.692 301.196 253.825 301.196 cv
249.957 301.196 246.821 298.075 246.821 294.226 cv
246.821 290.376 249.957 287.256 253.825 287.256 cv
257.692 287.256 260.828 290.376 260.828 294.226 cv
cp
.972549 .85098 .2 rgb
f
287.075 297.053 mo
287.075 301.582 283.387 305.254 278.836 305.254 cv
274.285 305.254 270.596 301.582 270.596 297.053 cv
270.596 292.523 274.285 288.852 278.836 288.852 cv
283.387 288.852 287.075 292.523 287.075 297.053 cv
cp
f
267.999 287.449 mo
266.823 287.449 265.604 287.006 264.321 285.802 cv
259.707 281.474 251.858 277.825 247.974 279.513 cv
247.788 279.089 li
251.838 277.331 259.92 281.038 264.64 285.466 cv
267.499 288.147 269.852 286.814 272.574 285.271 cv
273.897 284.521 275.267 283.747 276.749 283.447 cv
276.841 283.901 li
275.432 284.185 274.096 284.941 272.805 285.674 cv
271.253 286.553 269.67 287.449 267.999 287.449 cv
cp
f
276.921 279.751 mo
276.669 279.363 li
286.141 273.276 293.34 277.733 293.411 277.779 cv
293.16 278.168 li
293.091 278.124 286.131 273.833 276.921 279.751 cv
cp
f
267.462 180.572 mo
267.462 187.585 261.75 193.27 254.704 193.27 cv
247.658 193.27 241.945 187.585 241.945 180.572 cv
241.945 173.56 247.658 167.875 254.704 167.875 cv
261.75 167.875 267.462 173.56 267.462 180.572 cv
cp
.937255 .729412 .145098 rgb
f
268.833 180.572 mo
268.833 187.585 263.12 193.27 256.074 193.27 cv
249.028 193.27 243.316 187.585 243.316 180.572 cv
243.316 173.56 249.028 167.875 256.074 167.875 cv
263.12 167.875 268.833 173.56 268.833 180.572 cv
cp
.972549 .85098 .2 rgb
f
267.204 180.572 mo
267.204 186.69 262.222 191.649 256.074 191.649 cv
249.927 191.649 244.944 186.69 244.944 180.572 cv
244.944 174.455 249.927 169.496 256.074 169.496 cv
262.222 169.496 267.204 174.455 267.204 180.572 cv
cp
1 .901961 .309804 rgb
f
255.895 179.437 mo
254.513 178.845 253.667 178.438 253.667 177.558 cv
253.667 176.73 254.31 176.217 255.345 176.217 cv
256.318 176.217 256.849 176.519 257.602 177.153 cv
258.172 177.65 li
259.642 176.218 li
259.053 175.664 li
258.398 175.058 257.563 174.441 256.251 174.236 cv
256.251 172.387 li
254.19 172.387 li
254.19 174.271 li
252.374 174.638 251.183 175.919 251.183 177.635 cv
251.183 179.742 252.953 180.532 254.516 181.23 cv
256.045 181.912 256.974 182.403 256.974 183.468 cv
256.974 184.674 255.937 184.928 255.066 184.928 cv
254.077 184.928 253.365 184.334 252.338 183.571 cv
251.972 183.333 li
250.501 185.225 li
250.81 185.474 li
251.732 186.222 252.97 186.742 254.19 186.916 cv
254.19 188.758 li
256.251 188.758 li
256.251 186.873 li
258.208 186.5 259.455 185.184 259.455 183.366 cv
259.455 180.96 257.481 180.116 255.895 179.437 cv
cp
.937255 .729412 .145098 rgb
f
256.442 179.437 mo
255.062 178.845 254.215 178.438 254.215 177.558 cv
254.215 176.73 254.857 176.217 255.893 176.217 cv
256.867 176.217 257.396 176.519 258.15 177.153 cv
258.433 177.39 li
259.914 175.954 li
259.601 175.664 li
258.947 175.058 258.111 174.441 256.799 174.236 cv
256.799 172.387 li
254.738 172.387 li
254.738 174.271 li
252.923 174.638 251.73 175.919 251.73 177.635 cv
251.73 179.742 253.502 180.532 255.064 181.23 cv
256.593 181.912 257.521 182.403 257.521 183.468 cv
257.521 184.674 256.484 184.928 255.614 184.928 cv
254.625 184.928 253.686 184.572 252.658 183.809 cv
252.338 183.571 li
251.05 185.225 li
251.357 185.474 li
252.28 186.222 253.519 186.742 254.738 186.916 cv
254.738 188.758 li
256.799 188.758 li
256.799 186.873 li
258.757 186.5 260.004 185.184 260.004 183.366 cv
260.004 180.96 258.029 180.116 256.442 179.437 cv
cp
.972549 .85098 .2 rgb
f
222.309 176.989 mo
220.892 172.206 li
215.995 170.706 li
220.892 169.206 li
222.309 164.422 li
223.726 169.206 li
228.622 170.706 li
223.726 172.206 li
222.309 176.989 li
cp
f
234.936 154.068 mo
233.518 149.286 li
228.622 147.785 li
233.518 146.285 li
234.936 141.502 li
236.353 146.285 li
241.249 147.785 li
236.353 149.286 li
234.936 154.068 li
cp
f
315.028 230.659 mo
313.61 225.876 li
308.715 224.376 li
313.61 222.876 li
315.028 218.093 li
316.445 222.876 li
321.341 224.376 li
316.445 225.876 li
315.028 230.659 li
cp
f
215.806 190.07 mo
215.806 190.942 215.096 191.649 214.219 191.649 cv
213.342 191.649 212.632 190.942 212.632 190.07 cv
212.632 189.197 213.342 188.49 214.219 188.49 cv
215.096 188.49 215.806 189.197 215.806 190.07 cv
cp
f
208.743 156.737 mo
208.743 157.609 208.032 158.316 207.156 158.316 cv
206.279 158.316 205.569 157.609 205.569 156.737 cv
205.569 155.864 206.279 155.157 207.156 155.157 cv
208.032 155.157 208.743 155.864 208.743 156.737 cv
cp
f
316.615 205.899 mo
316.615 206.771 315.904 207.479 315.028 207.479 cv
314.151 207.479 313.44 206.771 313.44 205.899 cv
313.44 205.027 314.151 204.319 315.028 204.319 cv
315.904 204.319 316.615 205.027 316.615 205.899 cv
cp
f
305.631 241.024 mo
305.631 241.896 304.92 242.604 304.044 242.604 cv
303.167 242.604 302.456 241.896 302.456 241.024 cv
302.456 240.152 303.167 239.445 304.044 239.445 cv
304.92 239.445 305.631 240.152 305.631 241.024 cv
cp
f
254.026 147.785 mo
254.026 148.658 253.315 149.365 252.439 149.365 cv
251.563 149.365 250.852 148.658 250.852 147.785 cv
250.852 146.913 251.563 146.206 252.439 146.206 cv
253.315 146.206 254.026 146.913 254.026 147.785 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.1.0
%%For: (Fiv) ()
%%Title: (fast2_\714\756\755\762\740\746\755\740\777 \756\741\753\740\761\762\774 1.eps)
%%CreationDate: 10/26/2022 10:11 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj9=Qo/QZ\51aqk6b:W2$c/!;b6H[`Khtr$'^38-P8Hj4eh$4QrSmk1T,B5@K:KlM[_F)XgukO;7@#d*fk2Q`/EE;67]"fu
%cStl,bAbMEX:Pa=MLS[bn%\m+=En"4$p//a(7XDl4`#3Ng<FZjknKSoB"PC8.JsSmRD%Mu^'QR`_HO);,Eo;7j\'hF\)X!CWjT(\
%CtF;W`m%\]d68-Q^ZrU50E?P;mJLLm%S]H%[gQu&Z,OA2g\LW/cmo$!r:#hInrZ$%8'WO\B(4RNa>oBt*W323o;<lS-F`$XBog,3
%cjmY;AcjA`b7OGe&\cI'_m?";lcSm2qRtfsG:A/34O!0$Yb`S9Ea]PJr+E#/jBoi`)YAM0"TRBJAq%VC1h10cSEJh'LiZDG_6l&B
%JZl&!J/Aqr7#4s@^i$d;WX%q7cEP"#:<-eV<=?C3fQ(G(<n;hno(V(7q>o5>8KWUsD$JlQbKK`7N9iQ-f?LBV506u%FmkMepq7UF
%=N`f9K1acs<0:s?O/i54h01CXIoQ#JY84QR26'qa\guK^\S6E88m$^gp)bs<!^S"bN8VI^a)THi&%b*\butYPCb=[9Zb5MPGCuM2
%;D1n2m'jjOEV$S?W5IDlcTON/@p/5&YV0-O/F('C4$;O:VY:o]7J5/^&C^hB)NLY,iOGon5hc,&l?TeBk$#8F[TX5,fkskAIB)He
%j2lehfNBm$j6IepDSSTJ)`BMqKUrnO@f0_IpPs4\X[]/6XQ+JGnBZIfWrT#s2:'g^rBJ5E0LW+@J.W5<0:MAq[=JG[rRVGQSTf*N
%lbSqBm:NQ0dl;.BrRYM]dQ@sp]@BB<O^D_=[nE..O#F7,g5[b7\GOZs$2dWpJT_5^0!kZ&g74'%i0g-.)"[u&2Q4'M`lrgP)0X1>
%^GND>ia9t03\5KED'81;B)hKRr#t4"nTfrg_7?cZ`0UqmbB>:_T93J7Y.c%W#9!O.5eEd-$=cTtV-+eb8mC`k4=gE\^XG:U!YQ'l
%+5io2;7R`Q(Us6VEsMia'G0cgeX0te3S%6kHWY'lE.0f`RKX\\Jk"+ID<em.s#)tJaQ9j%#s\N3#FHhU/&"H]@:ib8fR96(bod!i
%YY3O8#"+@:&Gms-<'g6[<,^EfFFG5lKZaT(<q*Snq]c/c@7bL:1^bf:[9E79*OIH!j\3DElWdt\S'BZ*=<rmnP27WL`b\='RKeN1
%>u]R;IlLK$#.T19^0\'L>\ttLo<Wo"XAq@T^;t9u#u!V#qOHoPeHf"p_3RI)7j/!j0aU)j2T.B]IR,`;@3S1;Z3TB@WA_d`8da;.
%C:P*$rTnXDFM*?SV;9dB8?2NGRmueZJ91DG=FF/-fGIH^E^A=2PoBiuo[N>@,Gf-7<J3s*9#Z=%0SZo\=]![L+GcnN(uL7d\QfLl
%*=7g>=/NN66*+l(Y$%5d+CT@Lj\9!W@aiP%V$]-*&7ml-cd@dR%(G'XknpOU)gtb(J2`WOl;bHi1t'Gf3geLp$5HIuZC$ePMMBjt
%f_pA^qC?M[^qPi`cRUMU/Seh;099FXK)s[p[qR_rS6:KZhX9dF!1uf0/lp0ZiWSY@A%l-m/H/SO2;lXm5\.KQg?XK$.kF'.>e;"]
%m8L`tegg'k+aVMZl;",/rt>@rr^7,(^0GI]CH!"u=N[]d_$l=p_'cr%[@V^*9E6<-]cipc6!a2<2%B1aSe.-sSJ.)^Q52WH*gh(:
%`^<t4U];#h9aWdo@6>)c;o%mD\j70&QuN]:R2cLN8d!"#=?XF_VLV'YS8N:p<%Hd_'[We-bNW%iD'G.'7ms+Rh_02+mpR,k)"0Sd
%rU'=4VrPU.LRha'%Ctba',)Kkb8Ci9C![/ZmI4=5Cm<C>`%1d6"^IgJe?+VDei3XkU*%C%e'R&=mn".$Y6G7Ba+Gb3)@KV'pogcf
%N*>n!'.H$b#?P`\UN&N;ntFbS-6!2K,O@9:qDrBbg?!9X`e;c*PR=)*_)$1a0d)peYT87`Pld2!f*V%ATil:k42Rmg_(L4N'uErg
%^OXjDGa;L)HZmm)fs/)#2tu\$T&%-bkJ-!/V%=8\cYh1&?&BKTgp*>4a6p#L!%ZQ*1om1XCH"sSDsl?(?+[X_2q+q#K;FoKh7:F&
%3[<4";Y9urE`fME%l%@06r-d^hGRnr7$U1(+t6frU8f9*hk%`U76A4([VA*s#]`b@<3[o+"ZlKc-`7J)iE<QC>]:2*o;s_1(40a0
%6`fapN5IB5.DBA>jqe)PnbY5sIr]FM$J6i-p8]sjSSBu#C&"]5maZZ/.O!%H`B$e2HST-&=rH>8^K(Pff&8F_?H:Lpj5C^pe#48B
%EDgb!>.&+6%4hal1*4t:!E-\u`*rcs=R.e+:M'$rIZjgZW;R!NV?!M7G.Kt$A\^e/S.nN]YhgA"@0^YY=urF\2IRCKBN4;s7,&E%
%q`ISlWDX/>=2gT<<7.OepW5Jr\Q\;C\,ic4Bl0dp0T/6OFQ!(7YN/Ku0=HL>Vc+$Cq;G.E[g]ciTPWm\Ijk\?g=cI$7f4S7:g&SM
%p3X^<e1\tNfa21aRhSC*-b<!hpm2ZTq\2?Bb@,?"^d'71HDZ5/:'6,3h>8lW\NTuqRi)TSl?2+ZAFJ%6`h6W)?IZl1)N/0=F^th^
%n=N^DZ^?QYk2'F"#q*9]HXZe66tB%JK.C"XcQUVUaR^DBn'3)S38ujB+`"u+SjT+4OQSXbGn*tj:s:+^CH\LPSXI,FArVEW+kCqq
%Gb-jckDb6g[!CMQSi<6m4P2c749=TZ!I<]>&ZeUtm&\eF$dAlhO%($+1S0u$q3F@ap"F':'-;_hP/b?Vloll.IYt2=`rfD\F/[Go
%V2Y.*VZ?2N!u#a6dRq0Zq_lfJb%9J;CF$mU2b5BoL1hVORn(Ps.RKFn_V]ktR55A;9lZOog*>qHm4`@XK9cnsJ`Wopc1UPUAhEAP
%\&6@7ZQ1lWk4[s-Z[)Ib*^<;kT',XMkqSLZ'\S#@#(NJ.T#LP$9[A#6?jcm7XnP_!*>J1:E1!M)'nM1sFS@^Gs2fs#7q5V'D)4cW
%jJGCH^e2/R+dEuZI))*:J@4/2A#Bha<!JG9V\J4D#fN0m9[82^&)c#'/T?oV"^q@mH/N6TGaSeCk(/m!7c6^h=_-GZ7:AU^AKH)a
%#@?PDQ[.M#*dIM,#@8`i*o3>IT;`,>*@ZbVVB\Vjm9&ea@M2T]@C^A:<rDKLd3L$eCgU;,k)t:0^T\p,AIm7=@7?W5QsWrM9nd90
%Y8)!0h<d/p[Ye7rHOs/3`nT\!EJbLSZn'2mD,,063$C4rl4miU\NAE&PMW)1/P\7j(8ks7lhgsbq$g)_,1HSE>t9pUXtXnX[75Dm
%OlO<FN6+_Sn;\__j_qg'aAE`tnR;.C^W\Q/":ZmB#.tC'*>$^!5$6u[]am"93:lm\C-Q3O0>4kUdC/kY(LpFo,YcOO^\/k*'W@hT
%;3_G;WAH<)0bu5PZkdQ#TnMR]=XWP[2mgIpb.<=q&R?$ZRj5T>8&7";@dC,HCfY)cq:]O7-ss,iA5ffLPcNW4CK<?YIIf8NW@Z_@
%;KS82Y^U3Z-m_!^_F>gs]U@iTIj;(.+J"U[^8>2(hRNEg)f6U;/qQ^e8)\(%[MrR40Yc(Tl;!uO\4Ca9Eb<Xic`cu1@\#TqddO[0
%UhS9^mL;90AZ&?+ZZ]Gc!q0dt;s)QYS<g_mfBpfLS_:AoDMVkC6grc$_,N4=h9InG'Da@g[kft#B#?$cgI/f)+nHB._j'Nc"Sk03
%59V7b*pim8>;JK04roF>jsS6Jj,i'o"Sq]T`>a;!DQXtW90(9nOACXPS=^pr%coZ75sEn[e%8-M=ku&q&`eFC7%0\R-b6M64%VVQ
%47d*<ip?$P+'liZ;T-h++aBI2?DCTZ06`';WU=hgGFfLFa1_1\Y80%E]E2STZHQH%77uu)k_,dUpoOe:V`Co(V>m?!CG_*`eS]Y7
%.WOCV&b\;hel!+?5jq8FGLd7S+_i[!eMNCFq:o)nU>[K!9#gGTFA$Y;Z.+7pT;%YAHT!Z5]=<l/S9i_n%8V1;<2n-:OKSmC>`*lR
%Ak>UNj#h[`!1Rj\EO.=o\1*1!T0EoH8KO>r4#0iS_Bg'M.4jtf^Eqpd7@>J(cMmjkH.Y]/rsW6inSbjK#')$AYW\nUK5OqF*MsI2
%im?GjH,<t/M[6V&NZcT@3IO&jRsM%F#:IK)_HGonR5_'_Op46VH[?O:9@`_X$KfQA;OD&ojCZ!>Be=_'2Z>\_HW%I-(3-ZI>btc%
%HoR=!,g.uEAklsE6Y>)Z8S2Kcb[u^Sne3Sb&M=P7#sN53NQt[q2_[oKc!U@`_:1t<Y%OY,^"IZU"!<]k->Q3!6Q\n3,>-g5[G'ER
%q7#uW0<tF2-'j$o"nS'.c0!35#ZiZR@d;c?pu8(`k5.lfr3#sehsWHVq#,%ko7nO>P;sSK-:K[Co_ks.qG&VPh/oooMBC0uc$C9S
%0=jkQZLAQMfh=buc,i9!%U6=`9a,T7WDpL[mqK;5hfWtULe;nmD5=b_&hjk$h-uhsA\@K-5YIlQinL>CIj)TE^NY>/-O$>&9M`Wc
%"&j&>AWiP5BK";C<k7"dpM*!_:s;2f8V'mB2SpTU'rpAg<o.Vhn_@V[-O!IGq[ra"6$?Y`G(Xs1gK4*=S8bYjLJ$o!hg/BIm>=hJ
%95SqOR4q1YW7Fo;ae&sZbkaW-Rs%)-.][mL!ssH4HSRZSL3`!)4Jdk,,/kA$it%K-7;dU^>q03mc5_4C].H+S[X9#Ur\3X``OV,#
%mXY9Y*'fu=_d0kgF3\iVR-.@8$#VfMV*MkekN4lcSEH!!\0ZFF[:CK+E?a6YG!Y#8LrE8bTH."3]eo8/h/Q?4n4gN"[Se+XgR3$`
%J$7OC>r6?Ao+ZJV\`EYTP0][l^(_u_9>7stRnLIuOaJ;A*%HlDG[05g;Bg.1+rr?8"_T2sC5K):"t+I6#.55dK9<#nAV)3Wl$u<G
%29>u>-6XoL&/Scd(Igh6V]2-JeOljNO/[RaC+RT4T:,qi+l*MeBC3LRbb('5$+E[+JRR7cS[p!5YO15rIe.f4L+er5HqX'7b*PD<
%\j+ZWiEGrE'[>I`=*EI4OaqA$RD7$."jtS%B0@IL#<9Zk^[X;[?OEV,Dh<F$8I*8BLF8Tk:o'.J9[^p?BNF;7Xe$=trgG%%HB[:,
%h(/"cD4F2?UY3@X@fA^>(_$!PErPTWR"Z>shNX@HhR'Zdr/I6H?0+&(:@NBM]f5OdU1rAEq3sADi%!m^5kAccY$L_m7gkbt;/)gc
%ei>D6R(+S+0@cF^rB;mbR$VRc&HdL]?EfpcT)G'Yg!,O]0ProC#6S&6ZRKs&D=4H!Z`j(lDfqRHI>>-_qpc^dJ=-&J-hdK-a\ZY_
%qs[17PH+51`l*:rGsl-l9k!Jp6o<?-0TTm@Xj9(E4?nm?bTe%T[PRN2`]TtMO(_3s6pk3`M"b`tq:W%M;%D3C2\'j,]C/pm9RZ'i
%a#\+T2&k,kMKGWqkJ%Vn8E&dVghX1+^%U\"3gaYnXneHkB(F2Kh/Vm*Lk-qG)@KV'p`s_?q0Nhb)ekIj-IU#JW=SXFhlJO+pZDJ3
%^\@J#(^Y85D`U.Nqg6csc@<ah92V]Np\-$%n"n[4\[seKmbXRa&b=`9Rlc"=LMuVMboONfmI3.,6@EtHn2FjWHl;su&\$r$W\^2d
%-ZA)ne1]^`bO`j2bDU>%9l\Zk`nn+E;lZ/`oUC"NF3i5Co"WWbfl+UPiD3UNf6m2;>`;CGY3*T:&r#m889gtf$d==Vs,EXl'@)]p
%!1@tu_J>_`rgpoR;h'\@BDC"-WO?6h)'_Sd^s(mA:X`F)Zbl'0)Z+`M$2gu<!iM?hAju76GWIY"_4FEUG@F;AAQWZ&CARP,2o6Im
%9gMf9UH-d'1\I0A_\=Ps_F;gbKXISZ(7*Fg>KfSa"^`lN)Y!UmR?($DgD$]Z<\5_Toruj"$X,?cEib6!04TAT"!>SPWVDk#Pg^YN
%>)5kc=AKN`RMiA:%q)m]`?2Ep;5`'7=g=n5p]fHc;7eX?nh&,05A0N'Y>d>:ocbqUTPA(,=;kRbq?mC'E8+O-=\hu*-b<#e02l[u
%\!]\r2(&Vr3u#^!GY!EYV:r&#:SV"g>pfeU$=Oq[9i(aT!&5P/_>Y)m^L9TR4N!QK&jb2d;ID>MNAT]t0)+YE&_.*g)\hU#.BmR;
%7Mqr2J?KsBb'VAipJJo@:'rC""j*<ikG_,^eSe?Y"LT>fcP5;f_9`YF.8:3'F&F-O[DVK`.<t*Y>-"JMMQ]b,ZNqK"H7G4fr_k>W
%!>i&Egka]YDh''2^.FS<Bn2V:nAPf;U86LtBkIj;,&BA_V'tGp<JiQHKPXtQ1*r(S1n6ERWb9=e;,WdI1K'-oMQ!De(?J$<"6H"O
%Min:3GqI1O(?PQ_gYBkR'_3?E77ednVI$@MCJgtZU7Tu29T=G3WO4.RBPcs&fM/A78H[2<E;f7Ld`c/p9rbn>#'Wd^05(1$=fEm`
%juY;E2f?jb7f:Y69QC:ql;g8lhk0;WbMC-CJ,E*U]PA9?>+-;dXPEdG#@F>f&U;1dE)AIP\$o]8g6oLEq_^[+i`5;'?-oE5_-G@3
%"l3G1JY65gm1ASoX&4]VSnN2Ll/Y:>E<)bU@A&l#eXjf2j7kQ_s7N*4^@UE0#IPWN].\&h7Ti`*Sq`Y\]@XU7liiC,*(9(@])laf
%pLQgC>6nuOlFCF*eb-H*XKB@S^%+V/f;hQ4XBH/80t<`<!8<P-+U#\`Lu4='U#Q*<-%9>'rVlKeo"//=Hdr!s$Tl-6cPt+N%Ik8*
%`+#km,+j)[6ZPg;&"H&FYDPEoH]:X).4uAgJncMT]9F#_iVHVUTB5.SNk.OPo(nEDR4TM&Wo\f2g<If[oKuUU;;6#icHB:B+lK0L
%4UfM.+NoZ;<d%H@;)pE0n*SH9s0=E+i6tb@qZ4<tfund<A7[6?_j?/R-2aq(prIe"i9&#2=:o&[jN*aWeUsON9nY$($QG?c\/5[-
%(h!sYRKeGtdecB??hn@h$I)&:=7$J"@IW756k[#]^OeK0RKr9+/ACD&>Mm?<IROt`i4sbomR,=%j4^*dB!Be2ni274T'+ircqDq5
%2Q%%4i;*Q;QK*7Y[fOcp%AG%JM(2]ON@1]p!u!f'ohS]XiF:l7g(R$he/@QJF=s]YdX!OJJ"O*VWP]"*ZC*N#o#4,E*6\(QFE<Mr
%"M[?EmEEQA>YM%-e+R$?cc,N]9`I:2D,J/u[&KHhHso7O%"BM5ZbAkU(I-OpZn40PdaK_B6'4p)QtCCo4VuRg1&W'1[*)aq'2]5,
%;B$'Yh]p!g[OeYUZ,N&q1l-,91BMob-.:M=Ms[JYgXB\;4*.)Y(YWr(r>UI!6Z!cr2R,B2Lk)mCF3bLdgTl2@d6>Wfk)6ER@"chE
%oitb"&_HGU>gLC^>[5TB+]D0.2[?506MeSi:A@?I\=&E5[G_5*5Muc1]C6!1i3NMMn=.%^ihH@L>&VsfU0J=D7NWPgs!6tT<FpSF
%3+ft4giGUp%13nbf9V^+@ij5)R_'?G&l#M6^p;bs84E?t<hg9XIMlK]EtHj<DE!f1*1U>JjbQN$,k`(?Qt1_-:?6>Q7HSu$&f>rl
%5DfEI&,lIY5rf7hM]]L+]>LdkgdRraVanB>M/kV>X7lKn7QZ!.A[^PFs2\(?*9@!d&>ArH2,(X4:A8,BX[s%DTRU*H74e8rdEhZ'
%Z\CjGJ+8u=/$6^$:nSPmjW7_R:^jpc[Y9oFh10<qIh'tA6:7i)1Z@ZY[?/`qWeUGd)Wj!'19>52iFHKTl,(R%]gh2GHdM2^O0(U"
%cM5B2o&+1=S\[O'*`],g7KpRKIrH>&!_SNjDOQKT`JW[2Q_so;<7`E`^KRsk)31hh(G!m=Ij\+k3[.$/(,)2RgZrTnRc:J.>Xk1<
%SbV>S?RW"(:G3KfmrT+$_HH;L]$:'cLqc/HU2-;"bu)ua+DB2%lMh%F*0%]Hp&B>$2iEq_B0W8D^1T]oGA>\!bn8tdKKA%@+,3'u
%"O(A:jbOZLS.^t/;a<254ru`aPX+;3iutu>X61:uKOiSTAmkL5X`T>(M)u!3l8]T@&KQrQ$J0!u$[0L,Gh1\h=&Zc367g-(BPL3H
%+WKORb</7IVo+5heM\0.W/'3%!lic/=H*:'Mn)b`&X$*M([EXps0*;?WkE`@0^LW3,"DDX2Ge:HOA$@?!F)PTb*6X+Q=2"SB+EX(
%-gYGSSh0,!m+dVnfaBkXRDY]H%GTG5M6"L&o;G/qCZ(?R?FSJNNdHS,$?&KDg^P1b^#2#s*&Lm5Q?jaD,[Uqs$8UH'(`$gBS=f&S
%K1;aR[.4.bb^$g(a`OQ_$a1*PFq!*\dq6t0ABK-YSEA2!dRh5%SuK)s=Uha=QdZ9kQ)eAkdqX('bEd!2Xf@'T;rb^$mAo(.60GPg
%gUWkKY1IM[fSi3UA^hY+8VUhPqktCe[iN$TY2e0[n?)nu)+Ki4/K&oDJel^3V^c#WeDKDn"3/n0)\5J+PBj#4PS8.+kS]8.cKO,O
%NFr!l$1rGuDFUEX('AQ\`\+f_/i'X8_+a7b@HKQIVjlA><4ft\[8u[0@uRq+B1E&>OtQrtmm6+b[^DR.[VO.:TQV0\HF6KiUP!B%
%Luq'p%gKd4DRSP31AtbuU]jY'I0%O9F[-GLkgc;\HF:tl_gAktmr$XAo>Ie@:qZ/g4<,2!N]*IhlEsfG\PD;372<7Vs*NC9@:WN9
%_i$c@#htnN.!"b1^sse\"1J3nL2$Jk6k+6MYru,#&LHS_?@[BgfaY]O[=e]fRBoG3!hJ9X]eUUjT[qo386FHc`p]>/bjCX@[@0S1
%CKMNl."%LLb=U`<!U%@rdhRMp.',Q@\hFf5(:JFE*V"9XnIbHMD3fem.Y30-nK,a7C#d^"A<n$TckS<p+ECs'"c[CW!sfAtIFN!h
%5YmD*Cs%YsRh`h_]7QMmXkEiB`%]:t^lml2'0R]2ZgY[SD';;K^5H3^1Vd4G\6sgI1bHu%9hgtFTf[8%@I^*eXcGBX4&-(Zf^c0Y
%QXo*b(^VhZo*]G'T2gh)UNJ?\lH4PTC5^!5[Lcme9f=_t1Igr;X"DQZ6YtA!b\47uAis_RX%hAO\7:KYQqK2C,71[o9s-46l^3_N
%n=&8J45i20E'fPdo+LP'!b3+]4EH.SJP=gcc6h[p"u6WEE<A1</BB^3Z4'!7F2J;A<^]+26.]5&Di@(i@o:`3p5U*]\d>;lM2)p-
%YUs?5cY+K?^^Dm+KpiPK-<be<oE:a0#2.[1!e_o6&d*R+UaThu9%`8/=[PnMVoIjq'5H89#RRSEFCHT<juQ3to*g$#k/J'UiANRf
%`b\9"5aig\9ro",^aEs2!OA=_HR<m&^$Gl9AhJX:`e0<!_@eiFJBpr_1NWRi\`fI-R4?H>op'<9E_KJH$D@UAQ[ff\,\lUWc]kBJ
%FNiMCP8W]i!jWG,<PjKZK$Y?lS,18AW2@-[&T09e2n%"r/<8,u2o+nr,`P+Lgb]k,(=+7<P=j&I1rf&!,`'i9:!.%ERDI*!U8E?*
%:&RLTJ8#X_-cc@1p#^-ie+g-\CbcZ?4$fj6[KTC0M+eDb'=</h&"/lBRVZf0<5_Hg[S<W1$-G.lR$fi41URQI/JDmEBID`pI*ac#
%eMbC'SKL-kj_C83\SWfkgU(AT"DMES<BFVN''-AjjL3/;[OK%/;e/_RlDLMG6PCM7E,&(igbp`)C'$dt$_!N?V?p;+.?g`FHW*is
%fr"X69tI7"@&=5s_,UAV!\9Z/b;PVM2&1paMK%>BDJ6n)Rta!^"ZnSEPU75rVZ16U\:UU.Cn%jj2>n>+b#R3_AXhF_RhF1.eX;s.
%:kFUki$"PR_oti]:%G\*lrMTm[7qU--.j^ph:ngUbn?u%%$%QF*AYMP[d!*3e#T]IF4N6:/[f@=YlnMkAWCWmD;,b*[V6O4PIKo^
%AS?DI[V<#$$0p.7d;>)LCblE.S&$&uoN^_c$"/WoQ69qe:^&]WU?6>lF'UUGA7k6S9s?!=Dig@/OIG#K2>&1K%4%5^X@t4g9GCBg
%X_<:q@&am+d$2<dVS,_uH\.Vq6;4s<VQ_6k'p8](h\;g'e5k'UFD4([+Mlr-OG0P7TVd!)9gq?B7u\j/X+UJ@aU6PI[EN/FC2-V3
%&H5<.8sn%nR+;g'NBgsAl."ctRc)aBB_MX&+i1HVL`W!gJL5naRb#ssER4j?bu?&I_<"HH[LrX5VGfqtN!E:>;H',?di+rm0SCb)
%R&8^eVNX<jkSZ7[%[Nc0&q!R*Z_h?ILF%2"AmC4^@YcA8W#7[+$#[*62,R:Vd3PQP^hMr.RDE'A\m$`%Qo>aD2;+OgZB-@Lo*N7r
%"Q>p`Ah`U*RUBqX7)2N>65$RTV@uTrdta;Y:/$fqk.6AZBuDi:M.nCMP@9hmVNZ\;GS3:(n-NTmRmp)HL6se`&n7sLKUI@IKSXr+
%JWu8j1]:Kdg*S'g4(fI9bX;ps6Ti;O-H),^`3bq'69s52R>At4/;[%5:hX;^!FH-[L+,M^6:*.&'+rj!%qLjXh+g1k$t%]dNrp[H
%>Q;(!m4Ka[`PVcgXi?G!?:dR)a+5$2/&qq?jE<<5pu2U]apAt$<D#0TGYC</M^8l6JTsf:d[8Qp"*9UKf"oc,-^0UfRI/_9C.(4h
%)g&;d7aqt9'X)Bq<h;.:rQ9^c[37"<R[n1PW@gIhG[D2>*"<UQ`+pE)5?TbMqH?o]j9M\*XJ)C1pIe6#<u-\\)HfcORn%QQ@+@_4
%<G`]c<,E&0N*tT`er&Om<hs*qQ)<7I_7A-kOtf"XhK;]RC;7c4okX.UHWogf""YB/,bg+cir**Eoul\NQI%J7cEaaG=S6lnp9+_g
%bDsuB,V3SIpg,<Ng(acQSPb:p[k$-Dq`Ob(BfMd<k7%(TU=oP'fWft@CI'It0l"@)3ud_+Be:`?Ng[Q57UD.B)A6iL$9I:A(.RdQ
%6\Z;&2m?_Ih7D.j5S[a;VbXd&/,r;TZAXhnCpi!M$eW6iBN/=VrSg9?F9mFi*35h'ET:>qGPI!=ZYD'cdkU&W()_fmS6M6Jl94a0
%XA'@2iX41lHiSREiE;i2X.)4#p6*H([BTI?'DJ9hE*9Z(F^0mIhi=gfWuhh$4!Z%4LsGcn.g!Jb.KEC#\T6]u42*b&XO92@;l<hu
%95M#1,1N<"WRa?gA\1ZrBoeCX5IC1#;&#)f,J)$K#K2\`fcrCG51#<a0Q,FKn8'qh`rsT[&R1;5;d8-LfgrA,8kem]lF9T[kZ3mU
%HRZN,;fo(rZ$]IV44Wpl0Le*[&]4fVF/'m9[X74Oj`X$T,G:,D3JRQ2`0Zr&fX!2ra*5OFXnPIRP@m@t`#*)7#V@0sC?)Cpqdl`_
%<4)e(THt/9-]9'3$K.E<gl*fCFI;&u/Ec)OdiJ,H3qq)7p+A:>[8>KhK9jSLJjjAk[`:uCeSbjOb4VhgAo2]EU1'8:&F3N&s1B>d
%J5ui_X4A*sRT+On7V=j:@1i!Cd-cj_\m9#oZ9b5tS[B<^D*Y=h,Q\P5FQ%.N'R@im]gd9PT0ZdWd`;BpZ5lsFrWC@$S"m>7FDeN:
%]l?3Xc-\\Y#!3YYX-7]7H=Dm,Ql_-YL#j<KZB@8X%AR&#ECjH^NNPCcCkJ<K)0Z-tbC(D;X3_5*SLY_Cq^EE4s2aQdZ]jY>H58:L
%\.pe0`91Q,!S0JiCW2<W`q3*>&3D5#_L!,t@0`?Yp7Si2f=c*E%$<1tnXa4"fNM3=(11j7m\AB[f'$]r[DCrOG3\]p7g_.7:of#q
%m%5Fl1fc]r6DE)2fdXI-/Ts<h#WXi\o)K<:N:$kfdhT@4N:'X]67O^UEg;P8JkFZ*a7*8li0ZfSKQ%&L6,hD>$T(gii;!nF6#d!@
%Z#dFGcg5H_>iNB`$I+`BRMhArgj*%`c?!Df-Du3&@`Mj"W6C(5`n8)[88"o&dg+5h&P]q<=K;`[U,JUc)ImouJ]-95YUSF?3P$`0
%2aMZ#_5:X41O\Glg,]DrI[R]!c^Lan@+Afm%j`M,G%*`hNP'_ulfu$P_)N-P8I@l)j)&8.;;jERV6;Ud6r-=4T_7FKBQ:6O*@<iK
%#.YT-l)5TO&l1nnWun3$W;[I]%`7pBR"VE5i-Vs=[Up6[2g9u&(7"<_;N7BdbF*[Mks;S-c:bLoQ'=HL(50rSm)uTlOZ2]41ldH<
%\(D#.IhR+.2D/d90$n#[OqsKmFrH\b]Y<e@"%S.HXoriN6,Ph[GP*p=DLl,2^8b8'4"BU`GYSiO>7oIZ0!H`#pHC^pGk:.uHLQ+R
%R=0"'-,8-iY$\9$2f:c/h-+-t?`41^c<^1pdk1=>g?,I'a*[0pg@!#YH^jD/R?tAGT!ps%]45!7in*2cZ?:A4rH%\Kk/MGBZe9V!
%=(.QBp"`hhh<S3&J,]*%mcF]]NsaE-O3>LYpAVTWf5B[j9ZW-gKf/jY]3G40.F6kS/Ec<Ch%%e#pYt.ApJ.nkA9Zql^XhhfJSC!S
%f!EiDdI)&TN5'i;iFD;cOF99>ep+s;:R`;iV,*RrSS\75EI"6Z>269N_))4#V(X4n^#I_C2`tI%XM%n$b?o?!(]6E6^rVjh`A6-F
%[^kqhrYmj//@ndTI/^Y_TC.+XmSn@Ij]B*uGB68)G8bK6DhCXmVX_DR4tLW;SX57g$[/hiO^#'Y4j:ZCrpk$7E;rq;&G@/-If8WY
%`Ho'7>iM[H_l^9$$TU)L<Wh3]hYj`\rVWa[Y:VlI^X@T+Z'X3.](ZX7=P@#0G%&9FmeZ6FS%2#aIf86#^%GB3s7iP8q.f*:cF(hW
%jPf2=M2!PtT64HBk4nn:^Tjo`>.(RQ^a>8Y7uJn@@D9_ll4Shq]*k*^SW,^L[[)=HDZ_TZHuSO:k(Vs\LE!EI+4fZ?SPN_Ma,L6&
%l*:-D%W9GppPo'UJZ*mb^Kbe\'S4!$lrrK!S\=#tY]6jglf%_!:?1=MT>`4Q$VY'$hVM]#O,&ch)sYnlS#tkZIpmWgM]@_jUH:`W
%DlneU+)`a[ifit(C7mMH2V'Bc?[NX$)6FaqgWqs-)X*H9(+nKDIgKZUd382jR:pYZjbkJfh8QViKXpR-YN=PZna"*Pg$80I>=!6.
%DVdO)olB),n`4]XpnHQg*S`78jc6=",`q&YhVEa<.dsk'IX0A"YU#'LJ6G0Ep.+^hg%J@XC%%M0Z_OX[5UhX2/3SB.BDmhF,odf"
%ffC8e?g$+sB;Njrqr/>pgO&N[m#pO2gFhjNKB7maVZ6HA2?uO/UL']fDCuD&e#Yc]e6=I=CF!g]F4T9AD6#,kHL.4]2qO,&[r]U9
%\ig^r=*?BSHG02ogUFES(hMF1Cc-DO<P:aa/1o^o/JTnn_tRB5f#E>OfPW?HiPD;^BI+99&NY*EF!o:iTXg&I0-t/^kLnk?<urb=
%+Eu?tqGr*;g]*f$.i$@$Gnt[S=t(19oli`c-LAWn^?.V*di[B4mQPrhIsQM*d?R/91pE!Z^US^&&Ah[*2c//Zf%JcHVRbQarQ=VD
%\\$\/IHp\?f@c'43*G,>pS(LO<*^Y.=$@VNV)pb7qf&ZmC\R,0dt^ReA:"h/4a[3&c[,R&A=<tb0'kdSm[dDC\YCh(MQ>8tM^:C!
%g&7gdmWbp\^A7VM-R`hW0AjW')\9'QNtFib>Kb8-ZujW"HOCeMo=)l/hsT_H"JaHJ.AlQ^\A&EWo$REk@BK2FhX>%F'L^o.`Xa^D
%A96)S*Aq5nQpfOH:,\1/^&>h9[pq1d66=o4T&oBi*`*/uV:*K6XU>.8#iJ/XXQ>sYq,W[ZG.8O=4L)pKJ6LcHDClrs*s!Qm^&]"!
%HhZLZ8$4GXboJBS2@A""b6e;p$bIApT0Ih:;VKcDQGg66Re$ang&H;8F!4n;An>ts54f_8rMf[;K5J=d?0);eh]:]@YCNVp4gsh8
%\spT5:TX&moRo:V#KLrNman3.<rCu9cF4<m)Jh$^5N!]ce:3XOILbph[+pDNm<Z]2J3SmOs/\TB9$'6MV$HeA9,Qc3JSZ-GF7@h_
%4BYuAi7)O%b,ZLU")HXQ`o_CuAFrGg,8M\oFgV&@V>OeJEISYBI4Q_`d2n4nE2Y!96hKc#kQ94@LF4M$T4g>hgCa[?Rq%uN#Q]3"
%VP,@Zm[%>/DrpmV@1GA;iXG^4/4GBM'O=Pmi-/WeJK*e,jmmkR\]9$!iX6%ub`EJOp?0Jq\,%n:Fc%Q@a#7=oPfqD3,+];&ld=bl
%p5'[V+7\\`^PaFi/+<uO%X35#Hn/n;(FFn'K.[@Y[\`/>e9?Spi#`T-L^M*dHKB1gc"J$k\6,RE6hJhQpuk:+5bS]=9S;Xo&7,0S
%%6Q77Wt.o+V9@upWUt2&[59^lDIVsc4!M-[,2$c%8=r3EBN?BT)FX-0!HUZ7'$Ml<+/9X[-AC6k-R9<]5tbH,5t+a4*!O7<5=>c9
%,%B2``6K#b!ceT=<#%.BirM_`Q!uH*mcu57L2jI'!f$ipEc6+[`HUt8IB+chktfd+TSOd5MrfKEkS3nR*(K"P/>Z%(83ZIj\YS/>
%K#Vm$ef\hLjT.ssc(:]+Z$JrWT>6d1pBjuY5ID2-HHt?ufe^u-?YuL'E>mj")S*bloB0K_5AsiTBY!0TcPnPF\_LND4opO[(>Y>Y
%eU+j2;**q_5M05M%W4GbHN!Q:<jaH%q^)h7*\lF2Wack6.bkkT@tBd30]l"@+8i2&H1sLiW(S4q]K_cQ/;p^Hh_!sVbIc)Rh_GJc
%6fHC:c"@gL>$4%!`TL%2Z1p0OP;%453-piOlL*02*q$0`%XqW7BhFlo6;)YkLJ*&N;9lE;iV6Vp^Q:[9N558iDSU$W@rW(2QpJ[B
%bHDD08+?'%@I[Lt_3^rPEmE-041XNm?G9KVHaRh'h:W=nb!b'.o3b^KbXS1!2TaE6b9jOQds=&7)X":fL!PZi00;\)eUnAtV-Dga
%dPnDpm139g2dnr\pi!.%2bg4`3#NNWS(fS2^V2]W<56#FlY#mEF0NS)&AZEJ0?Ba_YgUGnY4N/`ATJsD5+/2E)a=V*8a?`^MB=,;
%-ClZ_r?1i#'ZYH'4C;6;,%l.75Q1`XjSo+p`PZnRe`u0bCMLTa:ZrMd;)R8o>lk+=97?hg!-8B@`>67jp)OQflq5,r"<(L$FFdg<
%dgNb]=AjO='b6hd?MD-u6!#A@V>b'$]Ds'S*gXO14SF]fn+^&bEbUH+9V^?Yn*7D9D_6B2nuD>`?X=Mo?9K!#)mhnB9<t;]Y#-/7
%;M'>R\9BBn5k[$;N0c_XH>odhe`_FT$\$nF,d=P$GP-U/bIc*k0+TrARWnE@.PB+q[ubt4iokNa\5^j_oP)$bcU*5tm%#2"]?a8W
%IGb$=\:hT2]Ml?8G\c^*j6`$D9jaNuY_Uopq9-I,i.i;BopL"5K1)@'Qh8ZWnV&=R."l$2<U)FL<Qtoiq>9-5Rd3YLgo.9[O.9Bp
%E%ChViKMm02a,&5hct[1mP]=&(UjV-6LC1&g9,gW]m8,)S$-`*rI&ptfV9T&hO4<$a[N*TG1qEPneJ#&Kj.b@mVJH$aQ_j`X8CRP
%N/p$-gZrLcK<MiG=2?st"<1Q\266@hdtST#?&<+be_l?m.lGY-a^l+XMqC!Q'KYUF38*_8`A)1&h;#^'.1;45Cb166+t(DHK:I>g
%TsSo<>;$_^p[mG)GFoqD6]MFI@'!;G-Xu-(`],unHZGfWqQ*cB*`c<"f3Wj<N-*XUHb7cUW8K"ai(E<>ZW^U^]=t7AH66LCZ[*44
%rdn8>W!.&T+";4+k)k;=TB>J:O.?;Uj9<`qp[%X)lbh$!_[#U4/H4;"5,9P"m[\8;L:c'oI&jEB4Ztsc>^K[YLlE`]Jda^8Va?)U
%/AH7uMSWfF>kPE=\&qIT%"%bu]bn3OGD1V,hUrWkK?^dur-7[RIgQ$qD>+m3hikZV-W]8+na*c1[^FoGlfFY]gkW$&6#GkD'r?M_
%k6mV!?2`NjZhi[(mW`phRF)hSc7tX"Z+/InnU%g!_pqOue^*(iD#Bb-EK`mBVamdQ1qO:6B)25%FL$A#H?E9bpfecIq>;!PmG!hF
%f`)GjXI&NR>N]/[o_#M)K:V^rms\Ii/N3R(.pnCeh&Y2k+O[a/iYO-@>2;4QHh67f^&*%ks4ug`b9nWUWiP@(]pHtKUV!U-.];1,
%FHLtBI\g`Rn*cSMTmN1h/d<S.oBpi=?2dm\>haa2;\Z$\NBp2]g%)*>p&d!EEA)N\]_Uq%J]MQnF:-PgH_&EhdR)kUESkXM?5-^1
%M(D.c()tfpLZ2))n0$'6d&sYNTC:P:9k(de/O"NelTb>Ml72*Z$?n_W!kCI<f:UsFSJBK>Ht%K*Pq@NW<.//5Fquuun31Y>h-E!+
%,2_$6?%(TK9X`#rH,o[I*gKLggd=jUJ:.-3lgr_G=ThVs`,Bk/:@eu3fCg9>+*,EBpMLGebEJK1gg(Y);m`e[Kgu9jlcR6kK_"b1
%WK?u[k2YULgJW%efSQ>oEkVH`DX0:&rPN]KIEC(Abe04j7@<Ae$WTQE^=:S'A,/)>gE,&+7Qn<;gj%V#PHQjFHO428q9/ZkB6j4=
%p8b*P5-k&WYUX;j^fC*c^d*h2O87Mkc3s,9[[M1?F>o\f+.luSFog7J^'!f@HbVe\)Y%^Y5de&mm\$%rrf0re8:L4/7AX+cqo](W
%>6LY7IsKn;`_n'@^K``QQAncs;YE;%dJPJ)RfBHi4FL%3n9;XS2bLVaj0jd/?D/=#T3Q_?=T)?Lrd83U)K>?1d7S,2S1U&XEeh-s
%QG-K)7<#p)4t>Y8kM:iX,I104D8D<'[=]bjd&05FXP)V)S_JiKCp^J&4*Xi\[(7WhnVu#GXU!#Pr7kBKKMR/Oln?/5:V=DQ,CH*g
%MbDJ!ji@;*:<79),RDWedc+"bk?iUaEMlbufK1Q7Zl$lP2rXS0SU\u^9W:]18^Mn79;EnUr9-m!#<u!C2cd4W$.E:KHeTD/rWlf<
%Cm3?9>is[JrmfS/kO]Dp'JbchQ#KlsjnE4+J;I@a%@Q?l2c#dcNl;iiTXb$'Jr]Nq>k;G)JT._8Jfa",.kEc6fa"H?8gA]p#n>ZC
%=q$G"5GI2CYl2ZG]".1HqKI-VT7@&&mg9^s-"#KQ]jc0b@O"@TO58o0l+tfR$`4M?!)I+2-;pf.TjN8NdYdJ!=+a9,5e,e[/Zg\`
%:2ol#4l33/Pnp!1qseM=o_S.=*W2WYN8)h4RIhr-Hi#p4^[6H/),Qeu>Da0mqF40M`nh!rqTJhigemMT2(]B;?/2D\4.sO_F`[u6
%QSl8EAT,C,DADNAD&a>b._BnfpKSXUT&3d)Dk/eYY$C3-nP-dan\$lR[Xp.o\+B9JpC_RkA<8p!nJ8RF)CnIj1/snCE#Jg`<%qr4
%Ya8--Hio:Sk=&(-IVmtl>IrF%KmD7mK/3Q=H-CCI?0[=hLst]k/cYM0_.I\bne0i+=F@Qe=MbL8Nm*4=C-c--9O$>"41Fk3M0A9(
%P&[NRh"I9G;VuN_jb&aP9'AUP:?'.d=g)W.I+[:HiX@MFb/\9N5+hO@?Tuq";OSVk$G;Eue"\VSIgi1d*&!GZ?sS3]Fn'X[G]p95
%a6c(Z4t<,QZE(6EWh5X(@7N?hptFnd8!r4\G]drkV1oFK!Xj&8rr&]ihE4<K,Niof\l]gN[badKG-eOIp3-!%ZVTJ9iPt'8".T"<
%J^-GpJL('$lE6]Ghb3jJ1n_SXi.*t==utns=t+=F&!$s:N-u@63t2FfXZ'<64IC)5Hi(L#r,M&p3;9:pmbFl:-!=T,>qn>`d3YWT
%g6O=q,9jHt\G3;uXctp"Cp!)IHHj9&U?d7QraE':#VM#GWiK^F@;gj(n'?0cO9BYr;tN*PhENK`\dEK79(k.I::?u1HgDfdkJpr$
%Y*OsYSB/.Q">f-<9!Qmem=@_i?HQWXDlb@VARIV4lT>DtGLS^WoZL/;`dN+omjs`)[jl14o9e`@h]CZPBNF>DPrigMIW6HZ>Is1M
%L5=M*VXsO@G.3c%j_quq[,0-q$@ICkr`Fk%+$;'F^'tU(m2eLJIWs6:+p;Mr7RL"U8k+K";8L4A+OO7_GMMo8Vbb)TH3+0Fq6tb,
%hg`2h7B5'\?QE*HJRr1?QPRXdGh4SZQ]'1-SQTRf(2?Y>os_8t:_KUY?+r45n6YA9qt!;IXSM+S#W*h3^6Rd*HPfXEhX4rZT6&?9
%06mXFJ40tB\&uD=T=t3$p9ANh5?fe3/AGL1QnTHBGcPQBnb=M>$Ki5%qj>eJdj0t$Ejp,7Dk0lZ@bED`WkQ(YgTO-^X??qtn+GW]
%E40,*@D#[Q^V*HiMY\[jS%sZ&F#R<Np@+(UT=WUe]2_%#Y+Skf7((Q`ho"875q?h_+@,p_Dm"Rrl/dp5quf.2$@(O1.p0uWCZ`K3
%It;V_HSN"D\c1hnSi:hQ8b(:*-^m,sD6E0O5].Q@J.\h$!:YMq\lH>N^"_gR?=e'2o<FV!Fe;[[h;acEn*/E*Q2Ko9UCuATcel*<
%]he0uqE-3+Dgf.1p$b9C>LC$odL[nc\Q*l>^gF%t#%ulEkr+9#(Pr%i*qu]@#AY'4imfbQ[AYmek]0p.UH!!rX/k5ols,Z':D#X^
%$o>4gX7\l[F0hF"B+t<`aeY^F9.Zr&.$dWH%K6,%iLH]iADR"FgDks,9<mr*4(u%]n((%pafq[,`]WMdJR1Y7[[7bj*Oi*B4ZjK6
%H4=>k8)40DX.=\Kq/N=?qtQGap:5@U?\hA)q%B>#8Kt[lXqNm5l3n^pOW@U),cWi0HBipr<P?=iQD>[O6;X>MMg^r1.Z1']**^Y5
%qo$LB3WOf)?262JiB3kNB(bCL3XJG'R_BOXB;$+ZZNs(F[A7ah%dG_`)b?OP'jlo,hf>Uo&dOpuX;G*'gTf"26m5'm#]_a;'f)0E
%*+N_qkqba(E3Z6@NH=F6CV;&aqn")n)q\Q3U&)^5Gf5Wi#ZD]/`5uCIe$&5+<213Gbq>ZNlcR/-c=67NLijF?'CaXh;c>9j[53HU
%V5&%*:!d)Z%;!LZ!BkTE`DA0#O3<Dt'C][LMSEFk%p(\H:/CCC'q7=ClJifsOXX)g^)3J3)i\>]H3KXe6F0$I[['5;FI1b4f!np2
%#/nmIQt*nBo3lkb(PSWqQ@_m+9mHNG)ZE:@N8p$J*Hftdi&ofZTA:M625QhH7]/[Ep!mtqMD5.GXpOT&#[6eq:"AJ*;Y"fs4k*fE
%d4AY3S+X#<r6^V0m56MX8NaV0]pI1VeO/nMC\Y?17e]0>@mW>-d&^6B$RdEBiG]@:gVM3G4AF6gJM@;ed;SRnM5R-*Bd`85RZ6_Y
%T$g698[tic:7kT,UX%YUIrSB70tOm7KiJSpX_Tc=KFN#,Bqp2M,*Nj76OqRNj)o[)#AFED4+]X0%nT5;S@ATq"D\6pj@?P)RG*b=
%*A$gn%]VI'NIGjEla92:K49A%7N!$^VB"NGdB[j"+8m\uon=?]6WcQe?Ztr$Mqi%<HQ%di1+ZLE2c#(oDX]H@/97&6&n>,Z,K8%\
%*b<E//Q`!7PT8+f:8-@>L`:Y`.^2LpZYFS5nTrq'=+R+aB+S=3lc.ECLt@lNPqU5uoS8L'7nPpj-(_b8/,:3Z=/AocpP"W,q!omB
%ZojBG02Z:*2[Lr0qD:cRBZANmL:F`79uT6=dA2.<O"1/LEt-2%&J:dj;/h(p#hFsMs#!2Pm&:f]DB^"9R<jdH>dAD#d=)`=*n=&e
%9#dVl5(tO)FMm-s?N%5C<,6!F=TQpN:+3(1GhbGh=#f;$p=@pr#up+2q54dX=iR$.m=aX>6Sa]#%QUV[X4<4s*87oe.(>B`9V+qu
%A'Eb@oIeU+I:a<'cZT:9T56A7d7o`h(P?r?cm4XmMB:&7*[nQBoZl?DOc94aK)b=ImUlgu1=U=%%gQ<_:]LDe*@M[UQgh48A1=k>
%&CE4_a*=<;gV)EE42oEI`d$tU*gDdIlNEf,'u+!NOr](a'>]P*r;DtIal,I&J,K7H:]K=pm))%jRlUss"UiR9S@Oq=5&q2s^'>`B
%mP13hQSq@$h?Na#!_VG7m8*ZG)1;8fD*KeK!;8/i5$=;rhsfadhg]o0b>R)91Fn,45O1#G13I9-?C(DILWp;6Q>t_S%@W]Uoj!8\
%Zg2->+b%FP?o9hn$er=qKjDG\=*VsZ_/k?C%Qu?sd63h/62lea\=9>SEDEgtP0+Q$gGDi`LOC/`&KP_OV9G.Pj-ZJfYhATR5-o[b
%S,`XJTDe`?X'tnG/3[N%r64.ujt2mtSd`FG?:1$7+hYrK23+@$Y@%YX:WAS:f>LWD4Q;9mUco\s"=UqaWg()>-Tg;r.6$S&[Kd@G
%YWBtf%-c:5D*fKc'-pR'@f:jubOI\\]:NMFM,+:]$-V&:/IBl!ZPN0Kl_[h%/3>Yl"VcK?2P`GOO@Ee;LCpIR!2i#^_"LctKBU:W
%Se!gT"I^1ccgeN@1NO"8$-Gt6:s&4ccD61+3i@`F3[[:_]U!QU0FCKB$kh&%W,g=ZWqS0#TBFZS[2>V==<m-0+=nc\&(o;RL]e)?
%`W.)%GC]Q17(MEi=bh#&1$2\Xf!e%Ki4U]9,[(10YQNYq,9T&T/Gd_G;HpN>2R5Ejp]OXY\P0@r:WdK6/qF%NYlr[qc-@Rdp?+D-
%@jriY)%fCMWDTp>1'AKa73Xdc4Zu,NoX$"a8X,u(o(s_4**'dL^dXF%!'@>2fBm,M4hd^&#P$s`#Q_15ljo^dTPT/g&GdNCM'*=:
%G+`ic/N.Q![53VL^mINqPI7?M\F>?GF[7;Zl-9l0;EZ?XCol9p;\E"acq:g8?m?\f"W[B9"s(`Y"?q*fj.t?VkQdoOTGbTdC*>Gg
%DVGrT%.FRD$;rLX6\m#BVZc8,nLXHkSQuR(.qY/OatNo\T(RLa=c6p@J04"]N!>nOd7R!]`=<pk4g-oP/Fb,HOfTpW&N@le2M-[I
%NQ)4Rgkon=LmKEfM/lE?pooJIekM/PT&m\Y[;FIV_NWbF<`MqI+sPZo(5[DOp;c,s5)L\F0McMPN+=o8+,"B_irWU./8b<CTtQU<
%^a$/$!j1TrG&[d8CV(3K&.4Y6\-K(B"\nb371HC*A.Fl!1s::N1l*PtMf!*9167%2i`a%sF*h:7ffX#SR!]Cp#.dX>;DAu&6tnPf
%5Dis%]H[<j49[Gh>IcYf3eZ&T6!QC\ai/6_5bMbjob&BUq'[fM=1\bh[rH=K&*S\Gr<7j"O@EAlnh<D-,7%H#Xq(lh7_3\-oPsZa
%!hO6S:s4LATG@\p#$OHYodJth5lZH.",7S#c\=S/_MUVPEelBf*]/L)em-6TYc_V#a:Jt#@':cgOYSBW1k)A*_RCWoeq)KuoR^Ye
%Mp5Wi4&U==#`ck(-T4jU<tc221=65#lSb46fbBU9\iUOQM8%[&$LX<6?6g7S)Y3]/)19cJk.hG`$I^%5DH&@mg/DZGf6+,Nbb1A-
%@)cRn!B(X/+>nO'r5!IDD-trX^n;`d$:9A=itJG]_+1."71?0>ob890D[I]h-SQtfiEI*T(,c1,b!A>#;NJpc>nEQeYF6IBG$,4\
%N,6&=)M*7^>Dtgp7gWG;KKs!LWVb)VYUISB[8IS)9Jo`opg"1j-sqfH5UiTDI]fIdU.R;q<&`H/dYE\,d5u(@VOb([cIn>)FdP!0
%TiJ</2?Vi8TN3<rg[U]g8]2\D6Nl[+"$]N.V2HB2;9]T<Y.Kj#4l?"a!+6dD0rQ9+fLI2uI$PGrL3r+[HH7W&*/,IRVYNrN%^Rl*
%;4f.g!>E,g[:fZ[:dF6S-kD]>+GRQu1MAg%klR<%%NN0O3:pmG]\`h>:a=*U7sVm:RofUgbDeS9^F=7,9EU_8/fb+a619C&,JK=Z
%J6E;W'ad!'b$hNl*1.S&9%<i.L]km+]Rka\TEXF+,n<TY\99Vk7L=Iaj91Du`.&Y1(,,p-?Vp@uG-ME\_/#j<TOP.gHl)GjBP>`#
%7%4W("jCSXl;0[F7N8EUdF"grGB>tZB%U]EEs*2b"l?;-(cEI><3ttD"N<9lEMD0;+dcr<T^kMj"oA?HBN[BDgm3O&bU:FIarKar
%>Dc<4=hk]IR<M2XTZhg%E<128&;!mF;<dh*?#(\#hke'XD([tlfEGe61cJYWSRF]OK&iTA'G?-TJVR(VJpDnOJW/32>%_4haB0>L
%[_l>r+C/N%n:k2I14TT\+#K>ih@sTp%U6.Ei^ld2QjQeMK@7]@)!-Uc!qC6W`jg,uHjg9W)/=e9f<Vo$Aj.H6.p)?HD.)&>+[$V6
%".R,nNrp"GJPdP)=>DE7gVA4+<?"I^,2-9pd32"O0D?==!*G'H#f)RQ5@Hdm(3>lk%6>Uh#JF'?2(bfj\VCs.HCCVR6F8s#L^CQH
%@@m0@>qU='h%V<#d4;WONV+k'duQU*)sC,)N4(mrb4@#B/g_gW)sph&,#@<(%:O;T+uPjb>P(RINir.1Yr]lDIY$2BnR#aL):h@#
%n/2!oc12^?9?Zt[2`9@M.Xls=0ad\KXH*J]'(b,`^Vp-8[/Z!`^unXS!#;P*-Nk\^V%a"V64BWcJ/Oi&n>jAS==SG>8Kc\_Q-TIp
%!(0@;KBXut1MGoUH5tT(!^\TJ%%JJsh8N3\KgZ780p`J_Uef0t.MgfeO=+!^$jSBt*]+%0'5]j)L$]66kXtFW/O=:/desBM"D^kS
%Q%_sa&/h^2oQt!ha611@KrIclpONnFUhKkBn+2>9!@cY7\-(;8g<e,e4P=?";&`EFYa\)N7Q5r6;mnZYR^kcCTIn?t*AtIW;T36Y
%=^1t)Q>OEYi!]n3(W\soKTK<=e?QHCBU/Z3$qU0A0B5I))$)`.C_)RgJ.^Pq8d'4<e=;HBJ?kA)P/'ZmO+<-VPTGpBioi4GdMmqo
%0s4GO@6s&1WgR9\'k-)MHN^0qMu\.hiM]$5T&^k'LI3.&LQZ?Tj9(/t&gi[6'-__D6,j'\pAb^tYm`=hN=m)_S>aR#V>H+3)U"=1
%@Yu'u])<\+'1lihlm)LOZYt3%R>>igOG&XE$D\>[)I19dA7Pkqj=3dlJ[gO%.LtVYH,.@dLUn/RJ>^3u(!;P?NpI##9RU-6^`E\4
%Lk6]g/g_8_EMO`9"J]n^KYp2$9Z@4$:gJ]l-^!ad_<b+9#a+`:*a$3nfEQ*5enqPuA7.3[^*W30`?[XO)8eG6ftj+`h<[*h2rd4R
%0TkI1P+WKkX10LUF>.)l\6LIKLK#h?Vc'CM8?4&EMiD.r%-#.e;FdLr;S!Z!#>UgH'>QeO;>5Dc+)Rb)KA3UJ.)eJQ\OnciY-6&/
%V1>Bp7_L76=Y<\l;qMnF0Sq\\VQ3s+-G9c.,&aj+3%Fqr1.<Ws.!;KJG7W_[FY.[1M$-/_@DYqJ3%7j:aMO$nE9N^+F-$o<>DF-u
%1^Q=d;^=r!JY3rF-1<sRlAp4ZZAF3d9/GHkA&?hULl\5M1fB^;;p_aq6qD'"+TkCXL@K"iVYaU*-5>B3.!eQ.9Bkj'Ao^\SJJ$fg
%iD3;3.MRMidFJr?nt&BD'.+qp3"lr<#e#U`'+?-LkQg4,U"FOq<+VS>+=.l]Qf=3<][oI?&r>#tAYJ-98<ZO8!Dd\H<J'%C7gAjA
%lTn>l'*2XH1buiLE0[;^4D5DI"$h]:,U0`Gi`p.mJ=;h;!g4j=+&83a6&N&<BHBQO")"?kX+77%mp*+?We<$e3@HU`YFSmTK..^0
%&kYrf/4<)_`.gt(U5\X8T)6TmQ52WN9_!KI>NP9<E'[8H`1AO_81<DD$XaNJLO#\CLY_,O`WnY3XfmF*W$GHO=Y(2]?pGAWTp]Qh
%l>c)&+q,tOnVbDoMra>`1^)A&(SamjEZ\"8P0ni&N!aWbi`d=`L]O3%Qlp/!)Lto7%F)&O9H!-W16.02eQ7l^+/>9V?E#4g'i=)o
%(`67^`6k9"(KA$-5*4)YEYY&2/uAe;7roQ[-D7mi>D;K]7uB96=;q^lZDoYL4g"*;8982?Gg^hL(uRaH-UD\c7`qH&WQPMkSBFct
%Wud/'>RR;u73h%"ju6jL&l;Qd<(8coPk?eh8O5:EJkanF1)!=MV0f?qD%,?(U<FAQ>&lT7q!`M;2P\lTqi-K(b/]@[Ie^di,a(e+
%)W$k=;qVj;,K/e$0Tkrn'(WSV)&PY0##$$eM%[;PG+psYbB+R5HpcsL%'O[<bh>$f'',gN.^kt:<*<HlbL(K\5BX'W`Q5,;lYOe$
%].tr\=B_^\Zl=En_r81u=<feg*YC.FpkD=%16`T``]13&Uf1JYX,(asS#N(U*EW*$7(RV2jL^ZH/JNr(kVfG@FD4T_9C7K(CXd*t
%@U.Z1eC&bek/HDI>d*eC?&g4'TR/hu,A^?CQqg;)Ho0!0'/<n3@j!$[`mMH:1kWpW+uRt`!J]W;db2R(U!`p%@S1m>",[5>eDjJA
%0oB]K-&jY@VbAA?["LgMgX>]S6tg1YW!%[:^kEB,^djlm%J):h/:n-oA"i4=%OjB;3grF_'gl[F^rf)tgfCsMbSl)H`0G@Q_FX6[
%#,LJVZsB1%qIl*@B2$[9nsPg_jd$H;\9RLR\5GaR\E6]#`0q9K1jqJ[*-#>"7MIpN(Ff)/C/^g2T.B4elAB=Z.Kb_)KC&tV6lj:S
%WQo=JG!WO4N,.JmVHajsoW(r-fImg``.4&Y!AHDud**,\[rm@SqQR]c-E*/lbgeVlCdO)>g^c%m6_hPR@&*M&\55/%kgJ(ZNT/,H
%Rg!9Ma3YhF<C!=:?@9NrY$-JbA^Lug!J)fI@%i=2X@[8%;%CY$^cis@,g3K\-#,n6(t>%9GphiaM`M<mUikg]I_MAqr"lNXQ%h#:
%"Y5@?Os#'0&jM6;SgZ1E&P8B`'=fLk[=4qi_ac,Y7(o.MI5i'(631g/D^ltV%2<<'.S"@!(_o7%]-o0uLluQ8mph[]Sa:+E1,oSP
%JdX3D#RYgbe4$SO+!'%d1-\#E'e:E$i*p)^-r"!58V1V4rJX?LTaA\L5Seu.+PI!F3!rdT*,roFTnnLs":LRNP$rHSTS^&0d:^8U
%)epC4]"!(A!nTuYLWu-dK6<7n$'P_=QN8!024\5aD.<in=[!la"5aZ^M^Te%K$lHl(nXNV"iq\Fn>J71=R[.LljC&9o2TH2,76WX
%,TpWn^#k:]k7'B%]Mp2<,4Z,=(P_R0d,+Nu1^mDd!J(:YM/8la3s$I8U*#cq!/=/f6@6r)PGnUIO=I2!)*t7-7&%IsM#p0`%PT42
%UEWPX9di[L3,Ur*aE>MU5q?3;$"PS^U^9.jV$SDEM)56uJKIio^,!S\DN<+5PkpEG1GLd3p53>o>##0Hjn846bi@F."$]rn/;^\*
%5f$[Kk;m!&h*Vp]/gOu./?Zn@g@ce`X.n-f7L,u^/K[H#9STBl$tEag&YpPS[26t>(P;04O#*oQWNQqG*r<d7p3sec7=UX(B1_cW
%N2:&,U=^Zc?^Cnq?MKYcEf%U,Op0npO$U30/^BL$7GO>X\rr7;bg%Jr_It\Hjd,h4=u^cP@X>otL,J6Oo][i`%5Sfp6jmXh@:Li&
%_gi<L_D!IaB!C)r?cAp/G'_Zcc(`]*4Z$bDWuFVJ8JM#/!',ou0NI.e+Yd>*A]`l?Kmp/!ajL2fLGgD-PrODF0W_?J_lUUP"i+GP
%TRa+r)=>/Ka@.?jB!H_$?U,PAW>6RG08s!oC;G9p6NqkYAZ[8G5@@T>>3SkK>k-/p(%k!2H8ngM"$'d47hiF0)4hSNF[W'FJI85V
%lQO_c*#k]gMYE#eU`kte!'\_Bn(X&6<nL)Jh^S;VlmfDrC6KBL._-n[0^u8tdiOPk#Eqic5(Fl[Dbrr3UkgoH6q2MCX[\TTona+D
%p_`24W'&*`Q,]7GU812a=bJ3!ZRGJTT,$*j/.rUdSB/Kr'EoJQA.i=2f"['53I6\!O1&&'KDINklrf_:Pi4S9U/[\[!%R&q/47k1
%=@5XddmOW:kQo&6(tHT,+sMYDL@icdROg-'AF(?a"$9>?9$u0Tg9t#@'[*s:jBmeYY4NC4?:n:G:s^#].dI6S_=qJ(a)NY9lK^1+
%7K[*)dn5pt@5,Mpkocc*)4(>?"Jd/5ar!uZ9p?SI8`<2B`j2D,.O50G4(XA-'WWb1i;grFkF&Lj_e5,_dEr$k-><cl#d#e.61,4`
%iotPI(QP2fKiE@%"h0B<ETBQ&PP]S36\JTm,`/7?i*$Y^75U'B,mu0Ul&(L,eC.+U+H(2Ac*)0[a?nf-;/,8SY3%Rq=.'oQD#7)9
%a(;=]Fg_^?U/]"6S+,q/R\0sHMMdJra>bbL\?C&X$hjtTdRU)h6un2UdYD?'9h6PK_4E&>L^J3/C?]?qUHsG-DCO9%i+>k1%uIDD
%)&/;(b$N-PNZ+2*g<!W3`]G[#bYX0fMjpXh@h1lqQ'ep1]m,,`496*"7+D>mYpkj,GX-h$h8Wt:L!(=AB_#+f'N=ZSJW6te=-CP_
%D?RTs"6^f(=rDS+-Yeim-,NK.K?L8nG`i":MTM/P_Gk+SKdW0o@[fl9/NsIZ\Unc_A03Be)(*@W8C`bWO[9]?R**,7;<=d%Wi18f
%,Ec+G!N(\hF!6>_"OcsbklH%<[SCOo1'H8=O/&W5@rU.#MB0>@-J?qTFG5@.KIR7\Jgoht/p9\K=;5)o;+7OY0+9m=)3tD6iHU7?
%0V(ig?&)"*)?tU_A8iL,P(dUF'NM:E;4q2[FmV+Ws(0:PC3Er(cm*d=_:'^"8uA':GI5mXWeqb?H]TsA#b(]E_BNeE9Q\?:68s?a
%"V:.%rGh?=RI]uH/5as_$@<+)\gkaVD&Dt6UB2t/I:!@9e1SUh@[(O6(dt_d'g+o>fMCaD&J4Z1;,OWo;=<1R8>[Vb84JW"M@%1'
%4`:)L=Kq>>J2"a?W:J'J5UKAF-idO9@UTO1YRAE,YEim)qBL$A^aiBl0as%hQXGE4djuaq#gA,<*jqXu-/)lp:pcA+!!/:QCGG."
%;K;lolC*2PEXEdBD-W];E)Ai8#';*]KaW+S_a?(^o:KMa#4sHR)i_9e]RUoPb#H(CaQO/C&U!`ga7'b/*m.JL(i@%cVHWa,c>[72
%nZ"B-r-:I]65FX>_*#3R>,!Xe"0fij+<&$-68Q^s,TRWW>*oTIL6HeWBp:FdWDXV6#LS2n6?S\hEE#CDFcNNfRPA+,WH&M#AYQIE
%c;MahoKY);2QUj4D$(OCJ]Sn5T"p`!,:s=$8Va8\N%?_!cCdM2H91F@'?YP,7V#CN8#NA7.+h"Tn?7t(Q+4_8!ECYdZ/"3`eUc3d
%hCt>6N\oD8$:?5(5@#=1(5`_TQ"HmWdt\C20G1N3c.,^_>=&mg"`8t.J#ST24H;>"e@`Ld=%Q1/1pW_/,9edpR6VXXYg=fKKs4[T
%_f_*QKh6$Ac_d9t\\LTm:S]_?P'\pHWe]QAX%ObT6_tu4AQ'?1E9%TXN8n^>),q+=<H/"BI[44eoi4-c7N!1MQVTYU:^sOljqo[K
%Xm"UKP#XIW,`CS+ORYkq`(.dMs6TjC.jaUADMuZq,!\1]"WEtZRV"Q\RE=P\YWF6\?VB$g:U:FO?'uPGKkY_h?s7uFS-;rZURE'd
%VdLHBk:1:IXQX<W0f*;'+I/#@CUHZu09$Pn9$XA/p..?%gZco7dHIr#eRhb)R':t]e#?7V%9K>DjsbJm?kD?ZoVJV(^qJa]`urf@
%'"$j1:@OATm>MO10hL6G;)qOJas)hf?!j'k'Xaet7;f)G)6a[Ra$GaEnsl$((og1f>]Cn0f>\]"l4r*W%h"N$<728nW*,M"qQq5s
%-+q;4P7sXn6aX8biLJ'YJ/r4T88qNnc.)hH?o!"L?c:DK1?3q1;:.4grP:`+BY#U\-6j\N\d#c<7FS%ra-na8+]\@*cq)E&F>L2_
%;n-149>aZ$/V.LAA#d@japTSOn,q7:VWJ.eMk,kUYjX5b"V1#pI"?FN^Vh!l"oM$++n&A)"n%J+d/T\%A0lCk%RG'_nH`S^-'u^L
%s-.mTMkbcQ;aqKqO(8s2@/<r^V0t1iQlebF4R","Z_bqo>""rifN$0Qg0u!';a/o;G#T^N@MLP.1c\Fr2:9R@.X-c!Zn/](_Ffi8
%iCMgiFO,VKQGBAO?W156=eY(7\IVfNK2F$jg_-#I+]rN<gEk#%W'6Z/iKgc3DFRo7"<osD='!1R3s;T630D2M>V69)D_N%QP.n*#
%%+hHq(V;_Q*a?&r94EWCPcDk-#E4Y[o&\p1Wa$-bO=)$O1c#Q`m`M&dfL?TK_ceuMf&JgjMl!3n6&dtPFL`p@oY/s&bg8krBHS[b
%)RH28P\h((gh,MB<AGarlZ.V05u"e"(<h=P;fS5E6jE9OZ4%t[Z>P6:)?j,-lZ65%JQ[*U1b;@p1/<aQ+<TukA7+Ii%j'H/!((KT
%RU;4RdJ"s(4n(/`+mUZJe?QMf"7(84br6\@Q/N9r]KK7eiM/p/M=PE*G%Y?iN1hZ?3XUf0pn-r[kRa&`_IZ8c=OS_%0X@+,chLD.
%R\I.X988.Hg*a>#LiVV1\@)lU&Q,>0R*sCi9*.8AOqWC_8+!(MB(11JWO<uY6cE2>oX[2cpI6A:cSW_9)HVW1\2f46&f.r:kr,]E
%*jLl7T%h4rQg%P?;+\J;H4KN4%1^28_0+/,$bPqb0oBQN6^Xm*eX!I9Uc(jBV5d5/@^'V%UR!5nbI&T)gRbMn42J:c:XDnu\n"26
%5(,Q"cFAms1+(G3=RE+tW?.A_aeDl]I4Z',YahWphWDN^>8,4UTq$+>RA9CkH//jKZq#MGe>Ol.J;\#bL.sKdZ5-CRdJH<j]:Pom
%i%a9Vl)9m5M7R#P:I`<W%\?'S=\_qe-LqZ''iIS'#U<!aq<69jZ3E+VkEL?H't)@uXLBgc*$VOX,U7%1PCc,dSKQ$aO:ugY),f-5
%Y,i'G3o*lS=<mm'A:GnaO]%#--Z)kqM&_>CR<!)!*G)`k=YH4cSEZE)O6(1UGfTkEIZ<M='I289.UVNq<Dn^$^)!mp'R;#3nkjt:
%eZ0.;6$7$]X&c:03ajQFKrqu;n);Y_cjJCUSd(0H/SrIFM)5E'dW]B^[I"L:[e?S%l!C:n4X=O!JNU2M+iN\3hs.oij-1$L*`_o^
%V_8+i0F1D>pb[HcA9>NEi)mC!q=7%`'4$D'_D$/.<kPICbiKc+[Au64%WpK?<4g\Rp9GK6g-PXr(^Yg9<5Yh-,sLD:IRd]%MKmHi
%A%N5&G#7W9q-%,kbnI-j(6KtpO@e/^A5?8UreB\A+,djDU';-B:lM_(+#?EZ5f0iU.'/*p,WkiHdH=%V$fqs8:5G[a,dG=P']c[f
%$N&&R`01nZBHOPk.#XKM9rVXE=>q;cijr]&`qWi6SeK_3#]22X0GG22,4gM6,YuYi%qnP-0Dn*>5h38#dR&)qJLdE;I9iu:lOn#g
%W@W>R%j%:)L1k\g_a0O"P?$bh<rElh.I*'9Fk$r=8d+pfU,r.:*/mn.3jS$@0eGm!\b)MoGQu'J_Tilf7RpX$^:M;i[@SVe5?DKo
%7E2\W<JjCA@ib^n5jsE=d?ERu,9JH6oLUF,?h(]HeI.S?)6bf'0-s#H*']9d7Y]mtaBRM_6DSIRR3dtFX34=pX`$iu+bQ];YYJMq
%JB$:Y,*$W#dOq\-&^,<l(nrNT/50+W*O^-fb-8jA=e^(?U0[,f5%Y%hkP0Ko),*$f^9%lgJROC(JuAknR5cI:D4KW@D.F2ZU0l](
%AG`),Q)T[[*-(2oQ+*BZ2(,GN.$h"l-81a]Z7@UF__ZGmV+L*bb3)*$S+rBsh#/5'';LRk>V@TTFJ)U@6on084qC:#/*^`$LLcLR
%I8.+oeVkku]'Cbo&W'\;=@*,%Osn<2H_.VDRCXDpL`F*cQ&65D\pfL1*^XVG\>u[&R,ppD%^Jc+La<QpQ6gU'Yd%1a@ER_3+Q4A&
%!l^nF8>!W#<(3$2p`qEkA1%`L<U9o9MP49;3p:+;YV_eML*"hE,7.tqNe7$8<B%u@qMJ9(j5BKG*0cTV"?)hl7"];WqXqWm;&-=q
%$?sCSL+o27p;I>Q1hJ>6ZNbk0lEA>gW?kgQZ10:kKtK"@9^qT-U=rukO2`]Jd3__AV^4"R6*d95j4)&2#*cE"1_'6VNXuUeeI,ej
%`)]GD9JNQ*DK5'8YT"U99:nK.io#EFU="gR;3rXXabdSC.8!Gt=K*O1VbCf7GrN&LW>p;Pl1/SHTp)dH0to;(:qV#Z01J5$Ls()e
%&OV\Y(h3V:<6n+b$56?5:9]g`+r<al<K.#/)f\a^95e\3M:e1D\##DbPd?:7DkVlZWpaL'&QWi1KnuHEhtM4]Z\W"H(^AO3TQmi?
%OGos^T$<@T['%SNk^>1.T`sjJdH;7/o88r3=:l;3Ff@JR7+%NDA=K?/3j9(l`.HP?I6#CFkQRt2WgR:k(h`Ehfm,]Z,S+,>Tg;+q
%J4V;#/gRQ@,_Fep2ecP:6(jV+Ke>ueaqGe/K?-R`g(4`1"R&6".SNfI.[$)@FbU3(`S(IZ;]QbVRNjSHJFoV@cLC$A=!ojV=!,ob
%R6&%?/$fJ+!oJK-86k@l":_o.lhUn(0IKr1V-(.fDW^4/*CPSbZ.4'*+c;$hKX'^>1Md>k.q/Ps@3?J,?id7%_ALHmVn!*\25Ch_
%_++:<\?5/^lSJ(n#:q__82H?#;1PcB`[UC$6Zo%?D*^fa'RXoYcdq8II(WfP1ui-^d^3HJ^1X\tQ,886b7^LL]KX0_#Q6o:W9&Y4
%<<o@/16-neJNYUCYb]p:-[r4+FJSPO'1;?jAg^lc(",TiloqE'ZERHdjIrS%Yh;maGB(G(/f\_GS*H8#Lh$qi\E_9JQ@_+b8"FM?
%d[,\BYh!rEfN%#9%-=m)!A%4pdAj^<b/R%D@jj&AoP^NO3_2s%'OkR8:WZ8TAQ0bqE3=(o'\>_!kf>&`&L)pu\cBM];'R^I(ia\m
%!;*aXb_p/%^2_92Rlbdn1\JDZ)(?W1U@OQ3Kg?be#4/OrFYo8Eh>$:\ahgB*kX_bVDBd&3a5OUtiHf[tjV3`M)49Bb!$YaP)CV&b
%fYD$^<jjHC7MEnp!gD@/AdMg4Raj8OGU!?f\s]NK-8snH("MY)`N)tJYIGk',!euoQ6G4rqS$!&^9-G6:38odhY<"q,k!(T@'hU/
%m7uZ+b'nGt%9Cd(A[A/;6&`pd-<)f?S1Le2CjbJtZnN4_81JjB?e"5:oC5pSY-+PiZ+Pc[)TS1GH=A[ijJ5Fs8%72Og;;L$W_PK7
%Y+CYXicmE55^BqtMSMC3JAH@AU9lHnp1`%*a!t_aC2nWL_%4@i$0'T8Q_+T7aQ8sD(pgIfh<]-pbpEojn&QodEd/UU4/PJhn1Miq
%j,C@DUEVaEOl`eD6m/VN<=14!X=-b!>I&e4a7-=Zoe!PpMXGc0A&oO('BrM"CFQD(P&7W[G,A@d:lpaM>`B(@`'fk/eZr3'&T8\r
%UWG(PkZW7`Qb)Bm6?R2rmUft'6sQANVO0fkIU9+S<@=X\Sk!ao_r?[`?mX`>1mJK_cdi-6APW+!=ttMClf:/o&"tVF\Z`##D0]j%
%==2J.!fBNZ@TT:]?,[0tn?=pjS"+Vh0#R7DJfIbH@O6nUd19,bWaM9oe\s$_FL07BMDM0AeWoQ[BXJ#@nNa5.5='r+0ML9sXm6OS
%05iYbB#h3!=4`QtWD5I1lY&DgHs`'ZZdkHh>X,Xgi<olh]t;B7*4^:=d(=J)[s,SfiZN?U:6:&XYATH@;IHBf('l7u6qU`jBSOLs
%Qu7@)9dX7gg!u34iR+HE,idkD%*NGlg8qBe)62SM\MrJ>LkMEP-P3g7$r2[2T+`6)+caU;jBnukPR_)"FG*E]HnB+J>cuA#Ja4T1
%I^V;)L2f#^X>(##,>Aqd;un6kkW&,)2-^PC6`NeEmA_ZG1#;+snnp2-obD:2q!OLM<i8/]PKKbJ%O:LU&QDUo6Qa>B`:6-jY97lU
%n:jiDQG[iGf[:XNOMgo`*Rp6R*=.@q/oHHI/lk=e61fIKIRYA::T4#f:UCU0*MoJ.'.'f[\acWD]r7FGYROM?>[PkGphFuRhiD[=
%Zc21Vs.?p4gT`"sZLaYQmgqDZW/GEYs.A6bPpE"';A'."/b[_f;/D='FnH=,9FLIcno$,7-aP;J3>IYo9o:,K7(&j5&,5Jga)'G7
%ASgE;-!<Ng]O&AKo6L%(A`[9A+oC"9s8L@C6/s[8nf&P95_Hg6e4'A;k"Zf!dHlR29H!]>(/o7i\IqYLQRos6@/pO%HgihW[\IgW
%M5M0gDt>#\LqM)GY.seLkZ0n5E\W8FgaXbM>LMSqD@%Q8'Qe>$d21gJf6h^W/=%&g#aU@'Y:k-g9-iS#3K5,[.p%_JBrGoN7_D+A
%Y,BPt0"_,\jcS1$2Q\?l5<k3kQ/i2+^--)RI;W4Rkae8;*U&CtD<L"Bff:G"YK:nP70-kq/&<F(4A<G2o[gkW$I<A<Y?#dqqa'7)
%!<i3?2ADrujUEg3W>KAK^Nf_S'eN256e<rsV12Fo%*89j_/b)kE&lo2;NtkLV#G/;f35]cCsCU-26HdZ_/W^X7]pB/nSZW%Pk6S4
%+[uneHS.D*Np/3QJ5nclDI.N9'!mn!?I)'RSooAk3CU.nJR9=3SW>RX&9Zk_"\Lq2\iJsp)@R]h?InA)82gaph`d`uik.b;)?`@(
%aJ;Aun=<K="_N]'.K;ASJXeW))W$JARjA!c(ilVXBkDVQlT@mfo`nL@dYGC2WHY1<^:QqO$5>PX2^GEiPLaSb+;A-oUa9f8G*X)R
%`E)9WK6$iE)fL8WCh:_]-Ba/T81@KJc]%1#>s,muXjEUL6U3n@$k#i.^e'Ml:lY:inSEnE4uj1C-_1d^7/IE3pZ^(mGh$+1"f4JB
%\p.9)Abr_!TP#+hKS:P;13<--(hVtsd$=pZY3nsbgY&E&@Y_;Q'Cs4PmKanZL(u31ZU^t3^QTlj)4YIr03e$Ra_n&iIo"2#^"iKK
%^XC,\PfJR'YckS.&#K[5nE,SE`SW[U\A^NV$^\V<]'/^o:DgdkgSYIH^LP]2q&?5k50k/qc80qE8'RNaV3:kKj_(uR_/O6*.]64\
%6/A-$L0<T*P>pI4>Sn0A]j9S.+Y'c@KMT21if=esaBu4>jTB4+:7*[uM%X-P8UZqrW_r(sTq=pg.gAnW@ViWmUB9<3m7QBWZ<'W?
%0Y><d<@@nEQfHGU!/H1=(!?7c1HQLrFfNUMNm12-L:Xl-`YYa=E&A`e#jU9T6,;XJaK>r<5j4#n5#:DkFFAOT<B*(ZK9M(^<^_Pf
%]p^Srna'8=M&Tdr$D$U5SEFPD_i!+H7V<m/$GPl(6D`T%()h-H[E@"S!!ZS4L=HXESm1i+.iLT<a3AdXcqZQo<$bL<\>eQag%9U_
%9tS%[!4^dt2c57BjoF8@M7TKnQm;VV0,WMZ_a2mDU[3o<E6[;:g5%"Smb&mK-\lmsrA7fMUJDhla5bBIjMKp99!^U)B$+f_74:>;
%mED_URW,)ic&CFFia$J;inU@iA)Xe:-pe>=:O;"O-"f\qTr24+/D8jUa1JOkOs\#Y&+loXiBs"$HOdr?o0aPq)eY&RNpiGfgu9?\
%jgt@Qo0m<NgLlK%kO!=[6hTSEUSI=\o1#A8XY]/)C%st-kHB4NP*`&;kB\^*S6Lml9;N`dBE'jf(u#7u8Fqgml5lYX$,!ElV#t7D
%G.q!779u=r`6VH6i^4*^=f?:HEtD7-c$`0aPnsH-/[VFuZm=0d7>,#!ig;4/2;<uplY*q&7-YbI_fO,>]6H3EG#qb^FUAS<LHX!8
%p)652P1gWEZuG"S<=lnW!=Nr<`?bPL9Ag4l2XTjo5l1*F&mHMgI6,1<L)DahD5G=RGYKisL#0'?B1qje?^EkFEpj)n4V?F9AGa-d
%M+IAoO`[8FKX1gR:rtNqI.![Rc1YfeE@(?OY"/C_I$q)LR8"+mqWlk_8go@T#:<5h)0,J3OHLZUk.T/ZP);3eM,8E!%k;n7"dSn8
%O@_RJY)Tg!!fUAF76[/]b;=slLYi]eZQ#d?ip(oe)&(W8LB+BNJEQ/c8(P1iF3TU_ak[t@W7U>q%hXf0O,rpe%Y:^\_\`@m/3g:p
%"8`Lc+mB!:[]*OhYS=Yl*b.;7eXdbp]EJ9'I@=M)$erRJIc#,\hOPhDi86Rc\G/-uM%7G4c4_4PDkAIuEkZOrk[iU7>IaTjo-L.#
%2pE1fR((A/B;aZX9prc].9Hk5_aBSXfUCZocoN)*i"1-\;:sC"EJN/NVucX]<BH9`&8-W(EXhDfb*jOl>"\4-7otTUgl@7)S[jpC
%<H!32:k.eBX.hf%"IO;.0hhq?D0K^F:#AoM(,5clc\n#F1Bpr]>nFG@l?1m!=L1YlN#KFRab3?d9@6pogLVO7*b\]:k/S=#3V6r4
%^`j`[E42'WbJd=qbhoe),^hmMCC;1ta]4S$F"$H4(dF#BB9%#q*HF1B045faN_7p"arHC#VC1(`IlSJBDT<'#%D5_2$gE0[GC"h]
%(m=h#aX,TeRK=r1hA$q2J_Z_2:DL+g"$.L!i7[:_o?&.sqD,?<RP8ruZZH$g+WWnZF9H,hb*,c]+7F?Yhki;8=M@m`^V+k:-jUO.
%X4]0K4gulOQFB1b6n/OC.$0eiO\?f=h]R)!rNs0I?l%/?(O_At)_;$7i>gD+9\'sWaink]RYPDsP(#!6Dn5Y0B9t%6Q>KLZTOi-A
%rKtUVY%jRB1Lp#c;S8&+7'2R_YT#,iB#ER[3F#UR"k1-F1,ihaPrU;92/^"#p$,[29ll.]n4KZq?2!ZG]#*1(jU_I$RcJ0NQK/s/
%I[tLrH^I6b\85sggWOFDlXVCY;P^>+M6I]"-r6;LeB,+'[`+XjC_Pe$`sD*WNcg2]_Ig&aEbC-&B\,$",8Ynf(3)`Q!=goF7u/!S
%i)CYP'<b)$1EW]5K=p'3QbV+XZT[5d^3=:>m<^rt+$,#2^-ZoE^Nkh&A:<bn$%2YTf1@(lhnE!1KC;qn]"qTP9+9n9er-4!moV=8
%pqC7_"MjQY<PrX"a1B[ZI/D'3l@FB1_YNteR.>1\P2!mplL*bGZWca((*NSOR&,q"O2&-YH,7l<#d-TNG('b$Bb`^3,BEK[VZ\H^
%ke*#(Hd1;$CXYI8lYWRMF/u:jTdH"PHo\d=)'9u6TZTgPl9Ws_;`#sm&l-s%?O&6J<W_SC<I+5tPJmH/ALWH]Rp'H6lIkb%_Rd%(
%JI]"pGWb7Hq*ik(Q],DqP-3D"i*%Y)2ODc@RQKRG^g\L?G!/`s%EA+*_M8-0dtX'oVQQ=FQZFC7a'n2ms7[.gfY41k&Ikhp%UsHB
%CF(WR-VR&pBh?lt,*\P*)&uhZ_cnJJmI#gO)f'Vc*b7fdPgILE#[6/tftCT*F%k)EKdO;Fe$@>ZRSL*oiF2.`FTlno83Motj,jr$
%<,kPd7Gqd#AV=d0+&2GMG@n[[WGhY>l[W%];]QILd<7M"pj8t^Zo(>e.,"J'"H4CNUW)M:`]TB`>Ud+71a6,9U4f!tgI%B.<A^Q+
%HQLQJJ]`o0H[\gB]o5,(hdrEA17;fMp$*=q@WeOUP"^&(Us)=nT-UNs:7Cd?PHA@#p0QUHNhTu.*VW":\=mL!X'"LN!:$dJN*;An
%2p;>%f.?=/X+a'bZ;lnkNR"6*7+LREU5k\KI;D'^\409[:\XUWVtAC1TNpLT>O&u7jZdkL!N%WoN0/gmOk-V6K7*/`+-4pBbT(&_
%3BKWA]>clY,#"`"i6)OI:>2qhallapJ"cK)#dA[K]YBD<ntA_N(&]*qq!H=l(.L19f"F#h&hEY-#G?<"nR!'5WdK!E/g#e!oV*V*
%G$s(IXo(V;4fP-A5"HaRoSE/Fd(G*F'8o,f)Wu<YiL[q.Lo(Q9CMgU0^aD"jol\RRfY^1cT1+TOVEbQF]V9ID0A;7r];a9W9f345
%b5l&m5nH]Wbl0%l6Z+50_*[>1hOBh1gPti#.:.HbeeA!S>8^d+XQn%s/t@:sp:4#9U.%^:/qHlq&no8;5B>Zr,&kP.'/Ih2/C;bu
%[aNGr[E&Q#MU8WYIJ1Ja;cjRb_^f>ab%9S?E_%-H*F!TD,1RsTq\?_.h]'l82N!3/?W0]j]eAOLl<:,MaK@rR!+'XoNA/!cZU90\
%F)r[pf6_O\q:'4=&m4!'iB-l0Y.dq?"]6&n_JeV.jo$[d_9CA*2TT[1G+2c,H8s"SEn&gAP56W5<-tXHX4OEK.0Hg1AH9Go:O1BV
%Z9;`Y]c3MefYgZYlud:9'-sjMrY2@!=lNuS5YK'5;tL]3Nd*J/(=<k>9G(i;ILHX5jIKXQVMS#u^/;9BTNRSXf]a<Tl[#q,'dP)a
%<Kh#(q1!JeMVOC<hrClXJeS`=a+cSD=QW3O8>/];e?kd-@eF$UqrR5O4;CG$%sTlaQ*8Q<^9>qVQ?9M-O@t.TfM?L]Vl2!eZ.ikH
%6$C9[:qEZ*&n=m\-^=i$ZRJ2n82n"I0I%Cc&[Y*:gl5%%Xg9D)e\d;;l]tb`Pfr\7j:&M'W*tobp)/2\^&hF4h3WK2K5V8L,4@[q
%27R0>FuBG^P$drsN<7]LC!]bBn[ptuH2@)'(`WX[<qHqM&8el;MeBF\:hWd?d(m5Ga#:n44p6G)Q2`,hh<D^`'ZQs_n//,plmM[8
%7^>:[Knl2P2q`3:Lm:8H^76l\9NLPCR=JK(pKS%B?GH@.C&Ll+TO1"#Hui/a3(uF1AegX2$BD)H0!E0\](U)_UCbWT?GN<*JC;0r
%W$(=mhu1o5O9;f_?Ma1GQVKQeIWQ<I^7_;=aeU,Cab-)aDqD<>ZHs%cR;rjh=U!/C$Ep!l^.(,=3%NAc&b:+S%[//i)pJjZl.+Te
%GWPisTa\g8`]pmHFhO>d]Z7<mq+h$G8smVIAm59i/a:Z&Bf5FBrl]%gKq$f&la?s9AZ7_2SCSt&(e:L4)'[^%e"5I9a]m(7Mu:8S
%aN/OQ706Kd:S6Fb16=C3id+FE*5O7IN=m57?g.<15"oP$F!jgX!GSVBA3qU=:o<tHHcSf,L/G>c9C?!*-\]KAWq!c'k;Mu<4W]I"
%C(hG%.Vb=-r.,$-<(_P0._g8&I?h5cM^c>SG+6Wtr*t,GDN^T;kN[SnUqA.65R+t1l[8Y':VE=q6&CcFc;&dg\+>>T(A4ep3WJm%
%h'&&nAf&$)`:EnJa:(@5$RA`&V2?Y^'raLG\hR/PXR(V%Rd0r(]6g^,^n4qA`h37"k#O[:i,+JKlc#6/K*rSO>EO!_&#+uL.N"1/
%7"Jtukk('7J[`gXnCYVJQ0E2kR7;40R_,?o'EtEWjKX1[SZ=R:7&F#d??bq+6ut3_8D[Z]gWQ4@5-i\C'605M"m]aY0FT,ioY<Fu
%-Aa4WCu-egiYY>Z7F\NM7iGSOL#'JMn'KXmV<YC`,%<3rSm?N;nIU$X+r2Qs.cL%s%B)dnI?*q$!%F)oJ=oB;0o5[CU:7m*Qp;8"
%%h]=VNWWXJb#8dMrO=iO6TA$X((P-hG\Zsl4/!S;,>UID'P4CoU)_9f*L:$(-[$EJK_t7n*`0!(niDrJp)8Jc%mD=]$Z"V./+8kj
%bna-95#.([][Ll@RM>mR@=HtG6<V2I0\V/S[bLW,9X^i:XLnY3;7+Jg3/pHlj";i5QS+%j8NFd'Ma>Uj?IL(Ai9^j`@2U=`=(jj#
%dGBN4=4dF;rG'q]$TcuO)k)4[kU"EABr[Mm6$X%Q64'EC@T:en6N:H,m%U*oI+?QXOoqfs$S9"T#PqhO.0o_#q'Gb&pWP>Ii1&n3
%j:/kLQ75E$`d&>IX'a./RIABXrPQ>%('FKCq53WQ`YfTEhO/Eq^@paQq888^FFT;JTb=I'l4nE<`5Y>rV]ZsI!6;%#7?[AFY(kko
%^N22Tq)d9[^,!YtO@GQ=C)W)sCnp&SY:k`jhXMM[S<q/l7#uNuqEk:^.gJdfj9aE-jA3TJ3ibm3l(`!I\2Er8aF0oS=FC#u1j$LJ
%UI-5&,*H4QrG?%Y,IgfSp7*D^:t4S!]SsrPqj`D;'@gg""PUANFs/f:7AK..NUQsA0#uiOju"HH((Deb$r3+NhB,0@@8Vr,3<9kg
%s7gk2Fs-W^rGW8A<F9j6G&5U'eM=t]rH/)"5Bk^C$jc]20um<g#?:>"i':sJ8df9iT0D8(+EV7'RB0/iZ]kQ4Xro99FJYq>2arem
%#1/I+0k7GOH^7%V^q8^[d\`^OQ:USl>S/DkLAODJrslPceIm!KV+'ni=H;0G9q6ADqJ'F3kocmF`9_7ccHoSH@UA-r>K_c0(O8H2
%OkI="OH-$a>*mT7jCj@ZX7CBRV'[Lt7T=<KQAWNu!7i#$.>PEJPlGN`;;OqA2(2Lg=3jR@@L&PoViGZ[MQk9TbLAR:Q?!K1?clha
%n4SsIH3*?!9&LGf^\dV*pTP"c_dNH6ORiE'#j5Je?Qok0C37MK;:gP%V>!/591:6DTnYQb&07L$8'O]5pV'+fm>h:E%Zs04&QTd)
%<a]Hj<C(4nP;Q@ZWT&*Xasc5mC0n@L[N/A(9d?Bc,NL#)_WI+=7VT>R6=7br-q]SXh5dDFY[0!?@D1HCpSTE:H%6O@(X2X7Ps-L`
%_*et&VjP,"M8=W$g]@W*q&kMN!KJR+%Y\Q"LSEmc[d1>LBn_"6S\?Rg.C#@'=F,<33ite5)0&n=ok_osM<7+"p\'>9i+9>'`"CsH
%:ms`H8L%B=0;TR;`At9LJRLnb3Wi^'q"#)IW.Fb]3+kO\6m6M:cXn/=Y.D6Oc(\NP)n!Tm/j?ua"7J54$EP7\Zr&'7kK.E#)aE*c
%J.i?!k]cOsD<_MX40%XeUH`noR0kND*NC5,g8&J7$oDd)95uZmj`PM[o&j:\BglSm+N(0WJ:Z"jKW8*ls*X<#MI"4K&^hobS,5br
%ibWBrF0[!UW4CTngcO"Rp8B>@/(d+-b.ZVSlWnofcK%P>j,oi*"^;WCoB$A9b]DC'TW*f<6(nF?Vr,Lj7;B8ol.t?b8/ol>8![@s
%hs7at5+E_5/GX6Qno[3;Lu]jDeWJphajn@#Ff&4l"nqo1n](VVRQYM1SrmO4Pp6YHRDA.'%PU26U:cbV9[@i%`)sitbIueXEe[=8
%A%HP'n?p5M_kg!NZ4-FD8D%4OG^tW5o]WY*lU'?5a,7Y1rrt+GA86Q)h"emNH)A4LQ13m^Pd#U>l%:1DEi7`1@?*g@0^'a?Pq=fb
%K8WDpLa03pSNfMPF]nmJ"Hs9i@[`'s_s,^dk-CAK,8E""kj=nNLaT(%T&5_*Mk\R4QK1/7nf7)i-#^HhEqii8r,bdjg[0mk(>ei;
%1N2=5r?[h*SfI&9l9c<!h:B,KLi0V18]RR.1U<!\o>>?s+?/G8T6E+NC-h#EKX%a%2D&h'ZDf*V-4!S;O]T'GNiCml'\6<Q2r8:S
%36*bMo2jsqfgG/a!brhF:7ZB9HjVTL_\BWom@*QD.L\sPF82Td@nrK@Y<dsZQC5p_D_l`B"\9jD1L`mA,n8SDN]lP&8U)lX&m^\R
%X*7+I-bL>!AEd"Vp2l*MZ=hV6-Ba74.a:FQ>hA%`;<D#Pa`*jUY4uW(&\:[."jORR)lHGnfrXAR8[e@^OM7YU:iYRU;[4=>r!8QF
%r;IP++]$"jg\#sVjmUuj0D!Sqh/l$q39IcYq;L*el$"j*o$,mr&]9u@2UiKHYo1Kpq!'N.&hd:5;CFQVm5/JUcG"IEs/#>!&S"4A
%ba@O9U\9SSXIf%i>CW&iof)b9Xj\Yo,WILm'@A3gXL;eSS?fa?m:mTGA^1!a:<2KkC.f`MYio2Z?8&%U*W<Y4pCr#8+$9Eo<d]Di
%LYZkKF&0%QN:>eAo:/UMcmLdG6t\>>Fp&AFIAiW\2NnW0j\gS<:LF%p",cbbnk)D"Z%Yp;l?76T2[=#"?B8Ws:;2%*1>,)s/AVtI
%%u\p;]'"LM@G^,blcO]TAHK]k<#02'^gB8tJo\WXOTIp?[>"W$dYR&]f@ZT#1aTd$rAXZ\#i;F0>R+"@^-h7%;U+BkGTN:p;f58+
%[N.dYr0FuA>mOIc6R-,U`.!0`4\`q_B>W3A]d<P*dWL@bB[U$eI[8%g1B`cA6Z;k?W?k"*S^_T)B25")+$,1aCgVIh8F#Ki)<75J
%Xe&H=L"l@U*4?i@(BYN>\$mS3`u299P/8YJf/][FkJ_8H;sFK[3i>k=-^FC5SQ$i+PNnr4\od,qW1%'6<T_+O)p19UQ'fsh<=Zfm
%>29[hrRG?,g,Z;35,Zr@SQ6dWN[m=j1,sCdXHdDIC)<.*(eU2^8hD>;Pe3QNPBdKin1>p*_G_Xmq4`"7Xd?n"1Tfs4bK9:%VL9![
%X2I<8-Hg.%1EZ+7PI*OYqW8*>Sc@?fW[=`u+eb*;\Afdn;V<Y?"k!]2-umVh?Ic51Z\0npLH-6>a)%pAb%EJ[@80%ZFD[;AS)F<P
%K3uEKPud8=%57^%3!WT'[WLRUCKRlB3XD(To?4g;I6Q'iE(=GXY8o=1K7$2S>nq?2WhmqQ,95T\;AR345K?6n122`'fM"30X/7l"
%9-41K]Y=-h&0sJ*3oBm67<,=&/:`'20P('!>'MP1XV"pJmQfW!('>;@prTg=]5spQAID04Ud*NIb]tTig?!?E+[@q2?<loo#BI"+
%(J1d>kGuXN5!BL]a)Cb:Pa4=n!1EX:%\WH@?A^J5Jgm)_lGnU\-^0G<]4onEWLQ<thN"aod'-r0NSruA$;jukh+uBG1Q-eX:JjQ%
%(6$*g;Ht8ORUH#>:iA0A`%elA0IUl/B?S[B6IHUEF+4V-fSt08<sucBCPskCYpl(T6-S!('0MsapBU!Z(OCU3^4-?^*,%rE'nk[[
%M7Hh)%'pWm$FMJNHERgHgMTWCjs>7YBsa8G!\]h7X.[@m;Uc^d%"_P:M@*GKR'ngophll0AZJPG+LXG.QK7_F4s-R*R,WGtl$XQp
%,IhErki-8a.1U>U=)l;5@`^!,0aHM`KiV]M>:TJj$tO1Fr7;Ec467LpnXfD5l3r-@-QX_ujk_dVA\7+1pu/i?mNYKYU!B8BFY*s.
%Ilc_k=;UQG!?"W[mohM7.hF>0$a(>HQ7m63lLlF2?6+*bYtcjF^hVjrCK%6\M-FMq:[MPD!]]1I>sftTrL8sZ=k/Bh;ZZ4W3+V;H
%^V[OR/jL1?\`2%QTknY(CU[DN27l5RNe1u%;<g!O/!5@hmckNKQ)3;pY#d\_aQh+;7>/)A@jYD,>G%$CBJ?T+.lUZ_[pSSTp,.=I
%77hW!0>$i=e+1B<XPP=OK@6;_=4cm'dDmZE2d2fo<VeZ!)u:=I?8'WmXhD3ffRS-[iLk(oD=of/4%d?#6O4mL-&6h9HVTQH+8Zi<
%?!^?c?Z3ciLh`h"@:u_5`i.Wp.3d?OcHiD7g;g9lAm'3@qEMMr[)j-s^U.H$!U`cK`COMW8h_:7c2g\i.J1'rlb4I1?QInVO[X`4
%1nO/l&$X[[0C/)p(M&nAQG[U6+N+:h$6"aVH!(Cj+St_EUpBTeb2lNCQ7Khs-f@NILKQ(McXFPRBskMFdVn8YW]X@lF"r!]kMjp1
%KS@l#B-+,)".kGaO1OI9;<=hpHi?k`cp[of`t[`9KGOZ$r=n3s[9OM:6L1EWTJYb\WeSL/?r%JTU&;nBkg-N/&ag,'UtOD]oe!4V
%Cb)fGW-&%cB(XqADL.inlfI&8&KGqK2?MCV(J*qZ#+DsnZ^d77&j"Xe3=^DOEPHbmVbp9>^g6hlj"NF%>qX9,?#-1^2iluQ/Y.L&
%j7$5&WVi:8H]C6Xcd`Nkm51n*]g*6)Q,5hp$A@s>*"[Z>9FIM,Voi4MVdpX[1/&,Ynea0mN,/*3KC<.K*4]oR=DPO:D`GncCqkm$
%gN'Pm-X/KHjKU47N^lf*rqpqO$=KSg>Etlf"Y6CN>]0ngORe_YD/ZrFd,r&&hrj+eOXt9XIG%'PaPhNEE=h,<D&r,,EU(2d1%\8*
%Yk\;ln_RF?37F/]7d#h9`OXORH_";aHhiEmk&sDM:).QN75h7sWT\"G7Fu"m)kn8Xa-u_59p]i]8qY)pKK+E5QL)GNgIm(=CY[4Z
%<R2H<a-eI`8nZtYnF?1H5@*@7K2@->T.<(l2>-?BH;pp^"n!XRTsP\fU&_?rWc1e%DM<<R^Ukm15d0EF/O9puF?ZjpGMT9a]0uH?
%$;uX0-MVZ\BE^e$W%qE6<'0M*lV44)\sX5^[k;KMO;b-cKgS66(j\39PZ>PGpT6,i7C=kVV)s0\(rFZsO:!eXiS:+KNVdl%$kUg'
%j/CXDKCBRX<t>^.J1b8r<(1oV6CU2S#>.jW+.8IC)99Ujp^QFQPiSFaJL+G<JoMai49@[KXcZCS_X*"=hs>&78U:s=dm9j<51b;7
%ODNstms+PAJcr/Bj+%lqZ49N>Zb?5&P;U'+i0[f!%:.GZ>SJ>>=4'X<nrPrs4BUFB63k;`q-mJ&qLjZAM=q0E_>PILERldX5hU#1
%,scTnC)4CLlh(.L#F-ATKjY+__=E!TXScXTZ;nV4c4in5<2`R6<`Aca0/C<381W]3T9%Xr^$#K=6#qe6j6cV:O^QQtP8^Dp!Bek0
%7?bD.#W;oN+o3u'W][b'H4Klp_%en;+dS5E2KdCT[c=tT]NF.QlEa*!dp6!3r%gO;,!:(1Q&H8+?B+>t$?Sj^"Q[#IO-QQDM!/5a
%X81SuHZN19Jkp5(acob''LM8p]ci?giZt8>1o/O1^<5Vk8[j(b;>)UP`d>%Z$T7HP#*JOqk_RY`MSn^%P_*':)A;uSLpA#RUfk1I
%VIYnQfq!.oI*d,M6N7pu>8033USIh@@#n?MO!7IWUP)I.cg^28GCLNbU^)_%HY;,(\@CNYbT',E=Wood`5t!(lb0;>S.aBjk7.[S
%.0MZ6T8lj_^J_ch05Gec-ZrUohOud3gCY.K]:C<@jX-+D6iCM*?[=3"h,kc!>)'qVUYcALA7[<)BMeJBeN39g86rbH[=Oq2rdZW>
%kE:4Z[N\l`eUB>4>5bHs<R"#MUeCVPlFG*oBFCuDi%U!)Nd[-F<^.e#REi93Nk1Z7I:q'%+%QpX"DZ5ci%=t14cktogZn<9R*IpM
%4h&f+"dY(1j,-FR[4D!uA_8lOriqLS3BL@/jkQN22K!0JS8J>Re>$l,P:s<ciU4BZ9n>]UfTP@64rp8tV:2'>;^LroNn+dOFeEsR
%ktm.;<d/M<nbR;#SY$uRpONNJ;m&s^c/6\L>R4i]rG)!`fW//R%?sIe^7K@i_*G'+WX)m_9=c#88V:DHhY*E%%\Z>4q4#iQq!qNA
%Y][loJ>hUlmDuE#mo\!#3Q'[f[-^e%L,7V3kG+%tPL_O$L+Pm'o?<p,n]SCj52>luKD,oNP1l@Q#84kN7L8m-VsA+U&Y:guEj[2:
%<Dhkq_FaBG+3d48;iq_f/Hm'J7[l6Zm2e(@p6(M$TrF!U'cEcb/Lg`jGO<[#5<jQ;KZZV-p=o>)-aD:0;#+b/f8#So,N0IhO8)]=
%jFF0d;//SFNibq#_&.g2GFdL]f$,V8@^U',^.)h"_J+h!,iD?)hNm!qJ`a[V*-c:C_(6jg@ANfI_KP&=IrI2j7<:.He]@e$n`;8+
%:]jdtWa5i0bihHlG,^VTCZBLES8bf0QDD"mf2ROmD8^@O'"2VM!0U0fc7PDhlp'Hgm^R<28;qCY5,)^tbuE7nb[1iIH.HNBVmQeC
%\(6Xu`G.$Q2l;TTal']RU#@e.K@cs)e)K'H\^CWoMJc^G1u5Id:kYd:na"BA-ndmU1n"Q`1X.;sRenY+HYf7"]UjHYT_hEV#Ge)@
%r1hk+V$E6^HgIXl,cOjeWoqU,T@n+<iG1L+CY%*cK%Qk$Y7%WbYS]Y-/5pU'bfVOX%AK%uiUr*iDUO*b3[='-OekCMOmuAqqtep$
%%-[.$XSH3P`2@,&?_J&2mbSVRnSd01U+b)ep)d;3^NBbg8bBLZ6$es.mR#<ao@s#5\A:,m7.L.mhht6.d;Rj#1q);J+6a!eYp8N-
%hm4]L%DI6lM@Mi-]J&ODDr$i@ic!\C6=Ad,GGgOoJ(stp?tX^:g@/Mie:#^KQ,%mAEWb]=e=W)%UeDEaVZSrj_"8Os<RM]^mlA_8
%/:k5:r62`BbV0@>6U':'%^6'/O_f`si>gUJg1H&R?!Sh$X]'?oe2XXK/M5+P`t=%m_lgt6XmYo&roQOUo`+R(mnmLf3U(F"geFBh
%XOpS+=t4jC7R!8b!89OJk5KVNZ$A/IY$7-8o42]LHBt$ZYs[,h8ZXk&-R?NC3W0M53P8#7mUnbI&%O0*1SpFKh,VTE;NUUs92mM#
%\@!7n2n]n_r=RM1\rsY!6""U].e$[-Oa8PL-:q$pmKIT6b+W.G9O%U)Ytb<7-WA,9ohmj!_Na;]*OY]o`"7uuq1`":\NLoGm_+s\
%NhfUk&(soT*G/L4+n)ZuW&.A3r&$.'_'_T(:2Ybh0d!Z'MM+#J_4a;:7AE!pU_V!]L(&p%]Vc$Gpo[M4hiTYJef)Q:PQaNf_cksq
%I"+RiWKt4a]"+HNDO=SFK*M':V-D+r,UUd6q"-k-ai0a=O1HLBO,WQpNPdeOI8$FMf#clJ.rRU;aX4:gM'N)%ie]RF<Ba^O6a=\6
%BMo_3&p<;7!3PtCfh]TWnlk#adb-!jQ6Wg^JI)phR^=EfV8^;$*0WRa;'Xj^dEQBTj\r`t#Tf8?GSNoT39CI7-Vl/\eTrHBLHlKF
%gN4jCZ^Q6<h<*?^qss@3G3IbiO\Y^FEN=i[eVbNJ!hY731=8o_T=o'GTI?=&,mM(c[[nZo2)Wb,PA[@7k0\'2Dq:hOZ:KthYVYYp
%6E*u<)7XcG#[R,=NX-`:+<@8$Xmg3r+OW[!EPpa9%PEY,-Ok`Zr,`B)IFJ/Y#U`hbLSg[oJCj/Mmb"Hk\8AuJ?VM0\.f^^_PLJ(5
%d894tL\`a(#^;;"EF,-UZBlKnT#=A\kGc76kt?Z8CM/n+99W7HQrN5OAXg^tWp8fnYKMpOJFho`"14\;3b\/nF6j<Ln*&jLP!]Kh
%Pp8l:B'C@%[&.+i.iJa%27B>^c_e5'fr8l+,^b[d,J(sQI1C=>\$q=B;VN#Z>d4Hu-ErZM,.#P#qP=sGb+n`o8GCr3[)R*<IfK'6
%?+?YRo_@g\:4i1g3]d0URr9`#)OaFE)nC?qfXC[VVQZgb-QlCqG_eZ2jao/M&]q"@kIX6:SnZdepo6BOW#i>+$O35LoTVW$_`O63
%@$IUD^0I%Cj/c"K@GJ=**Htm4]COncOo0o+o*d[l_OSBL1(6aa%kG-"-OV`,W4BRt)goYt@^!>&NZHl)h(9VH2WDZHa1:'06+jX[
%>]6,T=FkLfEqZJEek1oBTVN1cf7cmLBq"O=3]km]8r%A15&PQ]P='u\GB"1SAH`=<N3&@m0D(3?9hO>r`%O*]R[-R3n5d>bo\sjq
%ROO9<+]0r1q[aUZ!Xs%lNljam[iJm.*CSM*mWlaSZg#W6q`/P"lE7tg*qPh\ikfid+"[PUe)(?B3db6hRP/CcPUo"Y\7S[,g'RKf
%h.2fJcC<jYC'f<J@^!,M^P<gl$XLLgN+[5a$?n_u/'ngNHOC#2X%''%Jo$/^BLXbrRTZjDF0qF(_b:m[_4a%Sco+$LjgpLn7B5@R
%n`r5&iiP9<_nV7m.FkTQa^[19U<ta<'KIoe`dT$;N?1D"Y93f?#4t35%R.BI?($cj3b1$oKRE+\]u1YRb%I=&i;)q/4g4@m=uluu
%U)Mb!b3N^lAG<!o.[kPM_D->ZY2W@GUV)]ZN't^BXqQZ+H7imW;G)++POO\u4a;tL"8G/CZ!*E6]3]tk;X:5_^tH5'QU@SAEWrmm
%#6rbGJh2B3L*d$m?hee@=&.:maY'Tlm[RlQqA0WJ)c=&,.(T-C5eYoWgNiBMnYp,bn$h^Z1KmA\_QBpnc?=3Z^(+RrKO;ICJ4a\Y
%ljJ[FI;7OiGG'HUGO8L22RC8)0!.P-gM*L0I_GRYhJV!Il<Lg*$G3t/W6&CL^+FT`ITef0h`&8VR\(6bGN3)8/p[M34bWVZ4NN(j
%Q$HhKC$Qk'7r<$Nc1GZp[G;n`on7b-7=U\ZW$T%-=KDM1T^i=H.U2)DHXH.-CeW.'NX$+eE_X>=@-HsLXa_X?i'JVunO(ChqIm,]
%ml<c.6^;LTmeX&lZ&$aFV+E3r:2$(Q3SBnaN`[P7':>_lh'+BMQP"Yjqb@_tD+@\J(J/@@Y@%5'\3EO1^:si,>*-.jP"OX>5=NA/
%D<%NJE1UrugPluBceO3H6=8,'`6-=JkUs"eoNZQp3+POd;G^H$5Jc>q_E=KicI8Ns,fOn[oHd;Md8W[aVl)r!PeeiCmR;Bg(HQT>
%g'VPZB#J=YhUnT$a[,=[2h+$P%g=%.?gNY0^H3[c0(M/r%K?1<qd2SfT7?aA?N0*KTDe/<J,e^&5J?uQQ[e]^s#-di].Uhs+n!B`
%Gq8,^\rh[F9!?RBC/DDGALm@Y7fpS=ec?,.CGf*1?(i27:-l`'W=H<J'/3:YXsG7QchT/I"NNH[9aLt$@('.#XjO)d2M1Fsp_1W2
%P9(kY+dujE8sI?$9NNL&@'9+9V>)#p<*R"Lo/1<dW<MD+H9\QrQ1@CBs&S"eENUPZP#=hor#e-O;4Z8.4KbLto\+N=r=WK[\W1J*
%[?SBY\La*ETi858++OOh+pSF9+c>c3B6mn'l]^&l1M"E+CaC+qij[>h]4??cBa$*=27VX9&I#b//nClHn.\h8ofe[pj=l?4;6Moh
%"MK62=%jCU;H+7&r7;U+P>G@jpq)AdEk`DpWYM/ob^l[MD;>Y?IjVopUf*lZVku.S&LH9@P>N?-h;^gZES&hDIS(dP`bK$0HM9f"
%l#c)aa0%1Hfrs3^VGc(k0KLmk)IgFM=J^V6Mh>%&qq]@QL-6L+es_V!S7ANke%o+8D(9Lg5+WL10s5qrN3p[(#7pa^O'N:5fVJ)N
%3o56V0L].\d8RaU!4I=`HYkpiS[qBI_M;*q6;"b'Ng8)L98O>CA+`IH9rl7iJ_iSGI7nt'knc)Hp"*/lX(gH(%N']`EgBp'XgLJf
%L-$*K]Z].<i',1+b7AXE=G6rgn+teal!c#'5T]H#UIQsLbh%5(p9b!G96STQ]QC2e@4dp&H?bl,h(gU^GfrY,N)'t=q"_sY&08Oc
%j'Du^Os[[?ciK+*;qT.]2oEV/;muDU/9PWifI3eBa6K%ZJ9NN.]Fj$O/g1g,\=3#jS+PeG!om#/%b,oo\M&[]PtSD_FV`N&obOZG
%mQL.4_0QY*J(%!qcFABOdSXX'[$VYOYDYGXC(#X<Lsn<pT<Xpg>-E8Oo/]0TZh'NmJ,Wmf6IkhEfFtILR>B@nP.#j&<GgXZ2/qdI
%Hoj$#FOp-8&ZWK_o!qI2[W4&%c&6.U1b[>u;s!YA'FX#m8+B6(JiIP$`+^I+'VeU0l:jI%ZI\*oUULpmjYNDCoT5=BlKN-F!lrWj
%8a>NgK*,3[N<G+T:f1d3-Lq5P+b^-lr*!58=ZLO#g[gcRh5+L&<`P%!9[i2<3i6%Q/2b2e?NQ6iiD(Ls'>aPe-C8TR5Yg@(&XOen
%S-+H;@kW#.N/j/W!d5W-5r/8pc]Q9<A$)6dQDn>MAnW@ifXRpCQH!/.9tu\:YY<lU^ZdKBa\n-O"Zi2(q(s6aM5'!cmm`,m1(rIU
%Q('!H6+ohBiP[-$Za@kpiD=_plgLIldV&2^$>uH6YoR3KrDZimKUYVmq"\o?[%ip((l/l01VdSXV^OeNeEtQo2YH=X-Tre$qf1f]
%cZc1?h'#jT[eAkUa&`kop\*#2_?6ZsU<1H9m\K0WI4&#2HP5_@*6hl&Q&]EI7^^Sl&6'@HaMJs&\'b'6rL],$I+ZX4R]r.!n@n$"
%6q^hX'ef6-;`IjPW$<NY0Rf&7Ik5Mt;dDm\lUru\,)g&'&*1_phnApY=*p#6Hge!uab.in$M!T^'2F.-kE0o%AQue6rp/Wo#%[]h
%e`miNMOKP%%822>U(!72ZTF=3&8OTqW"<u@Sm'(El3];%"J4,=7@aO/>+iF*A1'I9ZBmU,L(!t0_Tb%gll+JXke(VbA9HS[o[5->
%RKMUd=ot-t]rCTB\K=o8n;%\sp'iG1mCk;"-oH<nONMQTXlB&Ifqf_'JMQ/p!A&s>:BoLH"A`&=Gl5'o3WH72GeOgIe]CNIJ"PaA
%H8Q(dPM<>IO.MEPq%@GE"8Foq%X:Vl\7_=9Fc9.&0#O:oUPiaK`)Q-^F,,30/Wj;=Sfu!28Wdm'>tSbb[RqDY9_)KTr6:Q22m(p'
%1(HmnesF"4luu5Ajhm2LR`XS14V^.'!,'UN&eb@2jZ^A$Y2D4Ylr#uZ:dA!_50lWc9=Q,@Y7[o&iZ9m)e[4A^[@d;ab<ANYJ+8sL
%6)Hm]D4QMr:I@HHj\53ma'#8lUX;ad7hh<24Pc=ECsciAqMI'FQ[)"J$VGkH`fcB`G@tL?<TFWja.T>B;*IY5doXcICjC6t,\fh6
%$[c;BG4M>!%sa/JN%!d<&=MncWE'R<ddD6;Kr?d5FOe%;-N!<@nDq4cAPng]^8sp56@V]bokkLW,`)s'3k_aYAA*"Q\%DYl.:Y:R
%?m,"Uha:DRF,"\905Z,0i$g5MAeGI.Dk%appt#2-K%?^S`@20r<tbZNnn5m_![)RWWkNFPb,n9Xs,?d8J"Gf%kr3K_Y'sI6jrFmQ
%o'qQojJG>8MFXH@>1p8EPPqJm3$607mp2pSMW,RDSE'J4>(q'0QUXqGFS/UkF/rDBr(C%=lMhk0';E-HW.NZ_+G>9jkB'InA0E)h
%Ge<@%)2\dljoJ\Ah928B-g^9#p"MHI.N?A<DOt*KZnP312L!k9kp+XCDWW`d2Gh9XeB2DmL?)E:E.*\qCjqb6e*l3I?#aE9k1kp_
%fb?\oNJluZL_Gt&dn]Ek2;1p/VOLi(D(<^t(g//8a0s89jP@Po\9NNjXui17S)&oo/S)k<"*.b>,%B-V<,0!eL*9D,b@r)qdCimn
%dpSdZC;8R&]MHr.q%-8GhphQH+BRro_]`L<D+E+jHh5OZjFI+GOWMihrTZfX4na"+L%(]pI;)TJ8mp[\>\\j'4+t5=khhjf<VlB!
%:W(@Oj8Z`>JiUJ>U-b7/I^*5hDt]@()pqt_B8"kL[4\)gGMhBZ;>!,i7E<#3N_?mn8H]t!QgHAZqt:b#<pT.6NIDj74Nh]D.]j"l
%oPVr)(,'+bp=S`aifj^/%!JJ)NQol*fcp"V)=0LXlTn0C<8I.g0#&^hm*8[Z*`"nO]&#C3oY)R=iuKr^Jj4t&\HnXPHgamrbkRuZ
%r"7ZN]SJ#)NqWgo,Y)Lq=lKtsThf%89""1Q/hQ,o/E,I?g/ll!!&c2/D!^DNblP'rmlYDQc.rr,>M6l\SS%7iD>lh*R'rrWP-(#Z
%iHX87b^NPRki/E<4?XJ>\4s>"]#g<@,0[R*1+PQo(7(E@%W*Phi,JY"'t>i;[![gB)%K/2j$rs"V39+XZqutH/^j16JNZ+R,H!=U
%Hec8\;Uc2rEIG('Pb?&^W^i^Hcd(Ke:S)O^=Kb0D#l9k=K<#GBe`YuZbE;8-1Nf:]iXZ;-n"6sb7^0eKd<'bIR8r`.o@-?g,iC@I
%R%p.1MZrE+&^7i6YaNSOlT;.Qph@!,@<srk0W<c?K!4sRTE-C!@,1(k1Q:(ZJ+:V+(\g?q_u%I=$"!*RH+)0\nULSqROFDf]*#W%
%gfrV3%E%JI6u6YKc.mK_[N@ia689d&lt,6HAA]Wt6=:D>#H_I;.#=1T4]jsOG=kAI,oj%`)#TnCP0lIdhf/6T7F$6"A+(me<$MpG
%RhRf`rM<e#RIg?eAA0XnAb^2"\QBmJc7hA'1WDduCgB+sI<Y]U,aX;b8)Q$!o4S-rm%"_H&1;ue[N,6lX[tT[pI$cFh+#5C*dNS[
%p[.PTm*p(bn&/-PC`JP^@>I>4p);ZV",Bg2]5ASU0-BuR!ZE/6\7si-Wj<!srp2PB#=mI&Sh"[!)72Bq-tj7Z'm6BpLZj74qS?52
%n-FB)Al>B"\U23@r&:$6!9q[Xr;j/e"Zj3];'k`!K5//MioahE6."S!XqB+l@olUs>>RJV^os<TKMg#uY7S8/V'O.Qq^ug5e6)D-
%W0Q!<Co1mS2[p57PBGn+-l'Qme*MkEOk/dBRC9Yu56sfL?)<:oV=nTf3qB#!P/J-N0Bb=m(t_BKcM56gcRAj[gjHse5Ori="J.:8
%LJZL3(3fV(Gt6pLhpckq8HoN%11>2EQO>(@UHRf^.%)X(^9gkh.A14q[DS?+G>o,Idq5;."D@lX/F-Kn9m2+oKq.?0ab4l1'grfC
%GJY.(D6`hPo^s&(p?qR2@B;$+&V7D/]t"NLKC/_TL_/ZHS3B5"6-72?4k,%KEkp-ZKrD;;;382T>PAU4/Pui/&$g;ZfPHjLSb;-<
%iC*[/f(Tu!0S`&^VKPPF1VTb(ghDU`Glpi`1m:K"-X=`fWCmhSj;Var2fPdR*?ZrXFSrk$Yd?Kai_N>tir*gsJs+a<^-dO"#Vl6<
%?G/\(\MSpW!=[?Ek)DnmL=4f-'&4cIiq6SSBKu<^n8F^6ab#MN\]5ti/Z6`[BFDT".*KnIIu56h080_<bO_&p>HVhp7hn^]<:fop
%esf)!fs47OTLL`<Ts4+aRVWbNOQ`m&$=SNpCWT-66bYOP1csg??)Is.'G"7'/(4#_&QZc9E,#>`VkcRb)G]nJ*gf@O)g@!^D4*Ak
%Tum6eg`R"s2bhM'>,"X;X*Vg^,oc?bpfOSW'66`;6T8DBFM.Z)mDf/5i.p8(@6f4Ch%%pl8hf>2-S'oh:.FeGU1=9o5i2r)&;[_)
%6OK`849.8*F.X_roFbR)Q<Oc#ja)`J(]G?R>DN_tSn">?=7deea#*t"`8e?c]>):I/I.n:L;\R9?$T4(BKN2cdU>kc;CJG0;.^?K
%m'fZplo27o.G80o&^qnnKj*e6;KZO+^%9TS\)*d1OoqE>eC*ob0IK,fT<FaI-dP.*iLO[Mp^e4s09Qi3+!:1P7/!><?fk'Y;/`D5
%'kBL&6+jN0IerM_&X]YU,dQf31b]N\ki-;AND^;'Z=8YJLI%*\kW('*C*@tVSq1fios-H'*Z!,c)LG'/B,Kt!'(+Wm.VH@O,9+CV
%3MI2]5/bp[IQWSThs5%We[GCY?K#Wj\1HN3Q6R3X%C?kL06(+VIQK(_/]).-h@l2#E/L!]2D]ht8XnRB]:](kC\JuCnD:R"m<_49
%o/4pQqIa.k&\V6iqL,qfmn!6BT+Ps/n^N5G3n7"RH)cHYjf)<=`!2/b*I4\Wn$W>.[ZN8^QLRd8`MbGjpW6a&(dEkkmW2jEhmiTS
%<8,D@*BXeGEnj(.Oe_"<0k<AI0Wri]e&+lQ;NH60CPB57q<$C8kFX[S#&@p6SC[cafJ3jBo#0MgW0AMT[ZGGu[%H6pY<5)R:1<VW
%TmRoi4_,ABP>q+6nc#Z/WrhXi0<9#nFL.k\!548piZki*#V4g5MV1jS4N!?L[;01+J:X7RpfPn&Rc/P_ND:ILZ(0t$M%.ajMUlC!
%47qU`"8i'o*=IsN[D/d]YJXHB[%(PVOZf_i=8X2j<_\GCY#`uj2K!)T0Ii">c`U0rm`\*]%!G7$F5Td'3$Rgc(R84m@p(#jH^cmE
%bS'P\[J+NHCr;qsm7,/lHZHd-Ih)?hcHV@8`4:gi&9:ATMI\@GX(FCK>]/nR2YW>kb"3*sTQ3&"ZOW6Y(+GXmitpT@'=rRZ,KAtu
%5NC'EI\%ggBA(b?V10%(lj7[3Ih5NMNuq4@[."2,Iuu5Gr=fNC?LF>]Jn8k?l5-MJ3"P*`=f43oj-eFH8%E581mp>0EiMr+c#$ta
%!M&6;ZD64ObuMok"JNG!.,90=l:Q'K>OXK5Mc>$Wf4Q(SE_ca^_4H8mT#&Bj<3<EKYeCQMC9;jS4AZ^Godfldp<$E#A]55qh-)j?
%KO"-0)tijRYTu7aqrS%T88'0W&$o4:]!HanOOg$VSc\[Dbd=^I,("mr=Oq3"-`Lo`Mm:0_(%j;7ZdUqe#Dk[Y!go-Le*;53aIm"d
%&L/V^beaXCWZo>]NiEB-f1i*i@d9h^UL:.q)e*T26gf8$0DJHV32*cr=)DTfBiJoiBl2DGM%j=jFOcQpjF&rHUuA'-eBAFOi7\Ft
%FZ64raMAmj(KI\^InA!sdOJudZ"&5?M9>>qe?9fIVGUG&8MZ]XDDup#9=Hi<gWo8s(QFC8gd&8`,ODN\bZn&lfO;Gl!7&6W9H5:W
%X'l^TZKr&i$&(gu,V,sWJr?eq-B,]E\5.O^r_[d^n#*P^m&LtYAjrg5"NDM"hQ#B]D0r2qYl>9?(>%>&7<7DXg"p/'Bnn/a39J`9
%)$/\V`X.$kf*erQ?!r$bi7C!&9C8ARFK0lqQ_?UnqUl>Dg]oL+Ft)_SP*O0Ijn]<8ptCCWGl>+'5hJKdO""RJiJ`Ui*,JN;3Qj^P
%2_k8<!h,5Gd]qDE0&Gu-'V:;([4fOI!,W388$!CGFDWLlO0s#*o9=$b"5pi2;TJDK`"XX'\odWcB]A!T-q0o@E8a"uCg_)A4:n:Q
%O*44Pl4QPR:n6;(AGLFr\N<NW:[nrF\bi<D`utJf(4LU=WgW>$Gc0T2X"f<O[2)1A**=>,5+HXTGmX"W:C1'^WY6CVq0%qsd'[lm
%s7U^/klb'l:*B8\cUh/\o't:95+o>V:82.>-Vh]Eg,U1_gI:B;akR'QGt/b,^0TNWi/e2A-4,9dS-tu!;a*`J&B_F,/H_=*;9;4,
%Bn[0E_cW+`4f+kFf)V(F4b3r2?r>0MAj++_WJ2fC/QHro5kMo13@Y3aW$b0DeSAL!g_%BHm,h3dIi:VtS(UMb<2i`(c_Z?Ye6<?;
%-VdM]o"%W)k%i<2o7L'52!XE<\X;hRHg$i^kKTF1Dq8s)N+hZYB6J.3HuKDncI3Ho\`=Th0;9F_`SdY7j0[DEPqpG7WB$R))saJf
%FYehVO7A*">1?`an7Xi_f;JBJmSrV\kh;t`?Zt;)"6GAJ/]rK6/](hE!W-'(?MSm=o0K4A:P,4NnF%S;aHQK`X,Pi;.jD_E/-`HJ
%2u'M/(mBL$<Y)IDd$<6j.$Cu&"TMF?)7Acf+"CKX:(YE']tG2=T>oRD>=_$uH)PRMq/-;%4ZDW"(X]</71l5T&nQo+5P"Das$>S7
%B)#QsU`!-inl+2a\s:0$q/VZodd?&JidLMMk=Y,/T42<C4HYg1alGTKa*(PUrc42>fPRN(FVGargIB5c0L@+uSVD^55hQ99p`+I=
%b%$33V,QrHKW[P:VQY4$q>"]R&=03b3Ce6.NZO\<:U*LXAAejjs7/@+DsDnj0:_To+UlYB+qup*nYjfVVLGL_8`_i6l`&KgU?!"-
%69t&XLfWs5*CesGbiaD=#OX_GdkdYF<2H2AQIr4LFO&1e6s4%?a*;F(9jh:'=S2/uNYYpTm(YI4Y+G5[*Qq3+T%\dG%W`Oc,_Tf7
%X,lWf2IN^,7sStQ-1YU>N7I5AIQgdS77<=:95fS71[m!`^JZo>_q_kUEnlAA!t]?ABccFn7E(9$]3E"[Y9b[%VKtja&TX6fSNF$X
%E=nh^++[fKcS4d$0#-,([o!*dmTG&R+IqJM'Yk,Tk#1rP@E536mY`DVfl@e1?i'"RDBHi/;Cf]MZXfi?[*N]02]&p9V@cR)FgJe5
%rBq$A^d318ga7Br_OmV]GGKj&P8FX*#CDrR_$+l266Kb@W^-="&N\)V(#N.[H9'9@[&/5adY,f)d8N-\'h&:`Zs9`LCIC%S7_]n9
%2XW@n=/rBoWk@n?nKR2KBf;[D&Eo!4G!u(hHfOgIJNO>ShttBSUm7se<.nARJRdIXnl"#.,%_u2PMTh@FO"J&T8N;aP9M'Y88@d.
%bVb?+a8ErKh''&%^Y_(P__a]!/4?^@oGnc]_k#j3X2N<O4nJ:@rF,+QACMLh(6Wf[:+[(U2(4\XoGrQ1Hel_+'Ek+3,)'eOV\'K!
%-Oi-JqT8234YCdj#*#mIoD@BCgpF]_!b360Uk7G)+\a8Wm5._G*)IG$L?sE;I'$?Y5A*=Drih;l@66KqGW57.r>PHHNX!n[E">'Z
%gM(2QT"XZ)mA>M)8&mO6].MQjaB3>]U5aW<]g7/I[3#SQn,(h"*V]7Y!-l!">(.a(f%q;er8U<?3O9>YcJiBTVAT1XXFpK])_6'9
%Yi-A_[ZnO52@f]O%kJ%;Z:3*=85U\sMmH$DZACaqJi)(VLi.OT[)EGVBICsoR,H:=p\r60B,"IN,$\gNQa]W&0-g*pUoaT<pVHn%
%/$58o_[^gUPB]NRhpACfrpX?G4b3Rmhn=:@Y=lWY&Gbk0@D&2shE]qG$/$EpPkh8?I,.``+2>""@]Mm8W-El<+ZdegVA]VCl.QOH
%ea&.)?]"J17s1u"REK$`:g`7>+*MKt%!kiBCkd2oH>&2FW'FON&%1CGq>-0PlBHZ-:jpZS]K67_rJcGK9qSm)"#K?$5hpdD?^jq8
%1_MO>ILV.5Dc4mYeif=R)bDIDP"(Jl20s%[3J\%oN8>0QM(2m+_a6NE3ii;?S[PPRb<e%>k#-^",gNEX>0%\#cT"I/*>>6'b;7m&
%&&g8+W/>0ZJjW/9W_d&L#kaF+T(&A$AZjSh+kl\7e[sj`g#"behGR^AQ"TtI7uM*WVX`XHhDeujVY!@ffZ3HD<P2Y`#JaXWI&8:D
%$;)c!$\GAPFq3CY`n**1Q]lY7%_L*D)$c:&$=o&TL;;!"16Tpf05;9<(giS;:""N#Eg%T__d.d$T%^B?kLVW;qB1=eT#l5$<1'KU
%`l4k?>=O@hppRG93kl`,]2/,N]BMfpcd-c5c+<4#^pd)`QmF*q-ad-.dc+th<O'meX;ro7n9FAW*hf+K0eof_[pdf:\TA#:^UZ8e
%NNAZ*-k[*C5@@ULmSXMU2Jc)3D%hWFEEu#&&6Z0?#7(jhe.;(t/Ae\]kg;hE\cE*Mo,rERAWe_3]>UXT@>pB4FL70]_AmD6f$WMn
%<W:hjiD(`mgsD,O[Zi*"G@Dkt-OE)m6BgASX=[kGo.6oVrR#u+gc2\Ce*Rs7Qb;Pm<FV2o[k1SeaSbI`RYo-q8/@R6:,Df0%0j\_
%'%NI=MQ;3:nf(0V1\S2lgHr(A25K;mM<n=<#Q+/bn+RO2W-@ciYB/;5WGlE1L2mPkab\+38Vdh5-T7cXO]ZL$:$(]-@Mf73PBt&"
%?ItqB[albA5/W9!R+`!8`4?.7R8&5Nr_?;!Q?oO@`Oi3n2YVpY=[2p+OF#<FMDj5c,C@EN'.]Gn".Q[&rpDYKL"bF0`ok85!6AOe
%l"e&Ej:,Ph$IggiSseDslsBCo+X!XLG*$I+jEmd7aQCeARW6$.![=Zn5FRAXS[^TC(/"V.jLuO7Wd9rP%g9j\1WuNm065mrD]EO:
%>pO21rVY>uAuc]1T20WsXa9iC!Mk+F9pnOVqI/=1`=jRuLgoG=F?^URc*(1LB,H;tIZb,VaN((\Bp^0$o',fI56#@.!/^H"23;6#
%pPHcSDXl\I!6][(EeL!e1pk!+.PJ!I=&Hii`?qF]51osBdSQEtb!t6KhmT3iFB:tpnquAZlS!@+*(\VPVI+W`1?Y:t52YsOGu.!%
%rc)Z"HAG/>klU?Q9YZm&C+M_mm$LF.$5Qn4n]k\L#7Bc3BX]eRIW=-*YOeE_j1VYf`6ES)!;]A]pUbF=Hl]OfHecc`\eRc6BSq>L
%gu)_B?*m_kCIlCp&I0Cc,l(+;,&;Y<S8mh.p^j7\Y"?3,8_tFXA//29/EX27I#'-!]&D[RIrn8UQ?X,:K74@AW=0%r>/:N_>,Xg(
%e<n[N8PW6KWN((dVRG=(EuEdb[R-2*Kk]dKE:jJH5ZTf(#FT>6r)d_#e?sS$k9'f36sEb1f+-H53fW+aA^h,'7AI>q0kdT'T!Ohd
%VVr1<]'T0ii'OP>5sd5'UX9N0h!.DfYT0,%\@1"`L/L-k5.L)-L#\>:d0#QB-PWTGO1)?_57VrO?0s[RVF@SM*F$'gI3g`(W3;Q2
%6!]@AWXl#D7p6gtjFTY-+nQ%T@BJbT@Cg'oYc4\n!AK!f=3]tfQWUk%=c:GoU5bR",,pB4TQl6+.pK5+6J9q>@i[M^TjCcG\a$ZI
%&f3rs[)^tOR]<UUnl@d0f(&36'#3Y0KE.h%)efp]Ig5"nJOcY,1)`f-Qa4"bW[k7g6A?tfOg!-UMM$RNMW<"1qVA>D4+@F$kjAMm
%rl-5oDYVJ7S4Mh4QT;;![kDk'qHK:I^OFpHkK5_9GD>[*$_HhY[O!"4gc$j3If7O7Sq-Lg(VYCtX\59nJ*Z)Ae:66DkK5`$!0#tX
%[t(@WrPudM^Za\V4^c_"9-A1Cbb4X;jbp7O/I3gV*7E.k2UutY9Xou^i_j(m<UmcDLa4i6,FIB9"`D0#Q)HZXl13-Q=c+T#nfa2[
%#5BImmI2ks+Lf)&\cRDVnj4oh$45Csg@g6-2=K.e8FUJ)^eQqT3b_0U^0hX*@l*Amm7-%ALk[s,DOJ)%Pt]jo-e.-Xin%:*1UdR(
%.5c-2Zad5;egd"-.lAhl^eI=%6QK.]W`LNg?V-qlh"+0E\OkpsBMa["%L%n0ruEgO^jZVRnb!SgV/=IJ0WZilDjK>4DGN)84cT]'
%ckTrn\+1pu(XS.;#L+#d![jH)UV$l\%\d<]a"Cs8YX26FJE@"D'8pK^H/ES@W_8/u/\(%JOD!V)5]9;J[1K*cj"D'CT1gi)%&\9&
%F>2<%9a$*@NG,o21"MMi([-$t-*AiH8%3d`Z`.EfeB;Z.USmM`5.::A]X.ir_#c\5*^h$f!NEZ>#cfS4CG+(d<8kAeW)!),WA+#A
%]9\`ubUiST5S.'/MtY(64qi(oW^:2'aj?U/QoPJ^?3DsR0K"tJP\F=;fNV'#[T6QT`-gmN^Yjhc&YEQ5oq\[f!t%O7Oe1_JPNCA3
%?4SW9U*&d.WdGe.]HT2C;1T<4?69\M)XF^^RG@["4T5a40lT!5QL[YK"eIL5<=PZ`#=D8ihM,$3fi"\8E[N^B>WIcEbAur)M`EAQ
%qMo(68:J.^F$1!,aoaibqtK#uASCNnk$*@VWB#W3e(q]R?1;+OJo^Td"l,C0O;7IrD%2]8?XJ>l0LG*T%6i`KD>2-#L7u;<:U'`<
%"0PtE"C8$G+ltYN-1&-OGE#b5e&'Zu<DAFIZfs*DXVhVB^]O)Pls`VQ4=bT)n2]Id6V&Br(htTcR4?R_U_S?O2QQ['<>!rri"!l9
%7A-37rJC]N!t-`.2\kj5%KtTT%cg#cBMkT,+KPZnB$3.$K^aO>2(I>$(,;U(c%Km3!Wq9t!UafA>h$3`S8XL*Pr#K_PA0eK=(*bB
%i:Y?pf:qtLqh?Ur"N4422#,YRZ,5@geM2pBe`A2VdU*/E:jX+7Jm2]fe^#FJ3IEj#d.P?#n%GR&Tk'N9]@[#p%5iLsRpu`.XY/uT
%6Qgg)G%^T67Q"QBi$GBH]AfJi7iQ%4Y,LBd#UF:\?8g!>RR8W%$<EAn!P$MS2G9a-rOj=kUqb:L+=>q@?0S71-5n7dc=HG0XK&`U
%'lUiS07&%(To3ub;O*I+:`?[*"8aC(W0D5rAC=Q2<0<[S&?^lSeH]W=aK<e5*hb$t.1s>OLs7nNN0j.E!phDQ,<?\-CsL*TE2X_B
%S8n>H;^b8?P?2RD-[r<24QSVh%n\<8.J5;8PWV8d+TsN,Fc=(q$MOe3QU(_ST6q82/[8:%PjHh@WQHV\!s5H08b7aHVq`p0];`>!
%-Uq$P(VpKeaB84R8W/=?:^9-H-E_FTSBRsjX\cr`<(L#UEdN'(0Qm01bCQ`EC5*N@6m%70?h9.t:pfCbj_2`d#o()E[SLZ?b6,$t
%Zfmi%DseUfO^Rj%!6orU0M+ism?t[\oeZ?E(^86QY%gQtp&jigE+7m:k7nkd!_8d<\r$Je\Y2C2?^Q2c"$bCc%Od%^>"dJ^(IJQt
%#sJo7BYZ^7KFLh;f,m#[(%Qo<NW!u7qtl4+H&Oh'qg=VMG)O,Pk0i,AMKl28MP(4>"cBqNZ&a*kS_4hVQN'-t'3@&oi]QElF-b7`
%cqe2HN@L!kD2[]L6d`YkN&=]C_?$GE_'[jVb@i58p,-]cFFqNc[Z3uTh]7eE]3j1cV^gBhD*^@]-b4Os&4$S^;c/P@%O6GmY0Y/`
%@:sk-L&.:ZfTM/_$t\gFb4DhG\'j=14_\q.T)bF$Zc*6CBV(tD7)W13>='9Kem,BKn4OS_(U"!8eSL1oKC_gQU(:[2MA/u&YIXEn
%gLRnG?9O<8pI42nCHeY0c@K40J$X=o$gP3DI?EF`8ZFh5khX=Aacqa]D03C,qS`_&+9)Q`QZj[07&0an'@L;lLKHJt<;;de@'WZ?
%c(59WpoUa#6bt.**7L4a5LaU;BF0#<qtoZp\QQhnQ[)oe/tMl6(,[ErZX5OUKP@*(fCO)VEQ-ecY]tf5X[2X'S[WjtqkcJHn@X,?
%fY)Gkr^"!B-Tfu)p?[W#)8-.nF9aG']rR9JhVmf;KRl<I'9h\kcDE'?oJ)#]JK\iSTtcM,;,J]*Dm_T%PbOA5VA%\'2d/h1:%_:V
%Nq>0oA.jdhqF-uO^CMNG&cu$o4,!YlML#OMMBjbZrea:Q0N`P;)5FaSOWk&dbmmURor)!4"C6>RArcu4*`,IQMg.or_O,4CCX]kK
%5n`(2"B&)E.K2fsY@3Ul*a-tr*Wm[hC+:6_V<iA7R8Lm1hCpQ?&JR<%Unt8ec^-^\nD$n=+N3cST:"NSTqlL:UCb8Nl4>]"ic7RS
%mFmZ&&s4@N*<e<cYdVVF?M:Su6HVahob+fk&U\_4,3m@n7')T/LkD]c,pr]2jlS!,iSN4LL_,1MpnQ*T7.g9fR>?u$-:4:QR0_ET
%Xj&B_a=s]kLi^0iW*njM'HL^LZftk-jLic8NSsbn!V'17m`C3qMU88@0_0b=k7o=*bRm1U?OfE:"!L_k.>5@B<s\Wso%PHE:T(hQ
%!W`,o,>\b9TW0IHD"_Xkhu+<_[M6M_*Juj]1j`E/UR0=6_<L&)l[ob"o/(:Po2o[soG?skf:P*)mH*V6.X4PH@]@,tq<1VPIf>uW
%l*!Eu,8Jb!1-mLlq]I2EV(HsaV/M7=TkNV0B'G&]Rn6i-oGW75<c1dGFA,*6@>8SaY9q1Ys"2EH8SXn,Wa9=uht$<U!103%a%Z[%
%'akEQlAEG;!q]m-QUMO\SdJF=G:0:68%?B0e>ra35&Khk:2:JnEtHG^]5));%Yl,>'Rlf+:`Y\V&pKni0W8#Rr'p9\<*QfBUQ6g3
%aCrQPKjEG*F\(+OM[Ma@=[e*fKG]Y]Fj+3Vs+jQ2lCuJ?:U:89$*/\CXC/(ajkGLaKO>*9EKqse)$RiID/;d5C,p,h9k&^.a.X_+
%fUnY6,-S!4>Wp8L??+@#55C9IOQ')fk@>gXLsRu@48R>Brn\maV.+/A>AZk]SX!)t4nkP>hY@0`5]<W.hqjan,Ii.9L6it\%QtTG
%=9eTCO^T-K[D:F"aKfKbG'N#j?]X01*c<_c:;jQ!ZpJJCOW.,*k<?3or3]B(Smm[i!],N4@dgUi>)pqL6C\69=hDSNO-pMmMD:4W
%R]ah"0F_pGDllklBfIXtO2>[FWKTljc:M,OP@[WrKZ54cRGbTFmh!/]4'c%F4b7P?52gm9AVhYoC[-VP"3f-4#ke5ZqTC@PRP]g,
%]5'ZA7D_c3DXs7oOm]&?k:!.qodES7<_;lD)l^b?"e:5X%I7o6=?$U-+BI-2?6u[1f-f:P^gC,`n]8Sk@OhNEM?,Xt;rmQsSDcG&
%gquI5F1/C_-:8)."5JlWW\G9gmZJ:e'&a[`>&5J`kgEIEhN'#<&_u%jC4_;$9=rq-L&iGT5Y>=LdMWnb%L/B_0XYc&`J`FT[<O-I
%SQH!IOR)O=TNE?=mc:dI"mA8*)hLk`X2r2&Vr"MrMjof0%DiOUZ"jbJ>JV_p5Ru[65me?c.ZL*tAmo$pJ9?Wa*[2WLNkJ^rVJ;R9
%[1\3GHc.75?)8mW@Z7W"QKdXh5"P4&loC]QCE*jko9f_q\bK0D`A!<rL$>B.\$HD\TYsqMIJuQIEA[;aYnI=$B.OolQ8/TDQmB2C
%@E(Q,JQ#4#N<<9q$H`H3:'-7Q&Y*7cbFQ;1#;oAjk[6R>?Ks#o+:.BheU;TQ,g;4bQQ9^_4XXJ\5pRir6#KNi7UJIO>@GH/n[3kW
%Da*oc*WhDko:0dS>HJHFET[R8^&0!n(T&76T3(D3-Sq0+&:T*!rXp1[E_"Sc]lcEDdP,D/2/+F!ii@9&(R,l<hZ)7%VL@7^JtO;6
%ZXB_CPT5:2YB35smBL1N,'KVf4/4@"+<qHPDAkP77cj]uRW7W*W6n;)HQ94Ck$\nSK4k>kY@Zui;f;eNGU?Yc([lGtb!*$F4"Ss\
%Z`3%?om'69_8<uB[g!2JcG9PoIKp</Z&c-PmoX>4NLL`IgKEWBPR#3V-p+5FWB^Z3GX#.:m!KT,3%-_7Pml=b!BE!u]O-*Rk>')'
%1#S\BZ$.qF2]$[*N-JPHh"Qn4;]-$8S5kZS"eMVK-UWhG.(LHR2t,ot_2"Qh2m$YhYDB1g*.kij#`hbie`X11_d`e>kLZO\P9KZU
%5GY]MqjJ*G0)G2Pn9/B70dST+A6jttf[rsjZq_omJfuRI"Z31@.nEGJgbt_M<5D+]6\I5(F4i#gh/W)8qH'(F[2@l4>;!9L@,mc-
%X61FR]k7j.S%UbTFnO+I#pA=>j6b=qnBEfAo2C]APfmhA.3;p7`,;Tqb,HC/,IIUT>UN@$pZe-dqpuIu<8cl=::Koc:Ngk.2R4>p
%HJ_1,^mcb+E+Vf"!%'&653YK43sFaIfr'R;[$n?"`?[eC'h[L0:R\Dna0mpdLT,:T5-pB!dd%59r7q)jT_2e_&QGZHaB<*#h5dTK
%aH#DDBK5RK[3,2,g?P_)7-,l(XkbNeOu5$b.)B3bM`GXZjHf$F)tDPT/7ZVEX*,N:K<'VfSr^T$[\aXI\C?c'Q9aO)VpFY%UedTb
%VGu8E\GJ-R\rp[EaV-Gg"?Oc9>t`C#2(4?)=_A9&R5RK?QtgHL%*:T9St'!$<-ph;1Oq'Yk^B['P-\E)YhCh$_FnHT2qCsml.iM@
%=OXG:b0_mRdpC)hh:%8T/Bfj0mULCu>Dh:&>&`[1rU.HSMNu`"Hi(\A$;Gn32X\?Tlo+YJ%5F`G8nFMn;R'=Qa!VH@5QidL,_g6^
%I5kXl<>!W.MY:VVSDAk9UnIjnLQM"O3e$o?^3KX%V2Ms$!fljk=+sX'hR"oFoG^kdTCZ:=#/C/WeH%E%gXeqdF*u^LiQ'ii7a1LR
%djg2=oTjV$%Jsum`NT9,[/s##>?B!(C@t(KQIjXOn"Ng#q=e?V14ZORcuHe:Qm'Y%5/sg<6tNM-heluK_Go$`W1>H'Y<C-rB+Yl*
%8#Rhsk!V]hVQ*1!Ibe5)T>(!jMB=mXl"\DPKFQ+e0d\jP!o%gHUgiN/e+>0kMgC1.3[olJQ36Dhn9SKrjEXB\N;/T`r5RS;ME-3]
%93hdHQmgs%.QOm;b"Za=-W=T2FWa-bK0S*?_+@iKl-E*kQ/0aX>b]#3[CX7tH+I5E>kJEN[okjRH:c@]L0ngsq]_VWo'Ip7iF\Z]
%;q+8o3#E>emg4p\rMPoa&h-l5a\n*("\JM?IlUZbJD,";8]#$.h(\M.]u%D;3st+?^L`O,(/2a8$@\>ECX1+u-_/.%-a;"=m`I2a
%04eQ=?l+HEg4RlZ!T(s7%g[D.:6q[c7`UYD-Ckr3)AhOL]Wu(''<eme:Z(,%`,A^a`rXL`8Y^)@iU:Xr<YRc8DY*S!X.@k2c6ON7
%,"/'V/js'?EVCU;eIO>g]dNjfQ#FakIDPM`*Rd-C5-L0$R.9^sDu0NT=ihQ/>BA<6W[I*>@gRPa73S7X8MD1V@!KD_kg?CJk33T)
%DDV_o$$hbuX'&*G=WL3#&3@tm=n:>7pr;=TX:e++Z:`+n*I"gb7*%_c"#$Q$p,d'XEp'b\'.O+FhHJL`%o["%A_jh$ZM*$>DJ,.b
%N3;m'-%TW3q.O<!<AuM0/S%qkT&Js`V&j[D1Tr_(Vi:3E@9#If=oKu"R%]+WND8>cT44:(-Cf'fBKnfs9RAT:3O\1;b;gqm1-%`m
%fFJlcojE:^R8>,'OZ@@Dh2o9Tk#X%kf]V4*?G!n@JH5.-L!(BE;2P\O?0%[>1(;<Ufk>!\,>-ds%hj#QB#PgjJuW1jln_2sTE!@/
%c[Po7^\O@KrMMmYnNZu=5C>?L=?liU07Wc+s7,j`kmr:82uh(is8;?coS<JE^]"/05K)d#\e,eR=%2(TmeSklo7-`/huCTDN8H39
%?ad.WVm!<%oS5[2_]SmL^H:$oQ1BF$O8Je-ho3!:Ls1;A_Z/^.J,BiWnK6&!0E:s"rqjH[Fg"%.rK%!Qs7=;2Eo-4&jHf8LbaF1b
%o$@?p:Oi.[e%bkQ5Q'NX^]!aGs5B$Rs3q#<O2(_hs7uD=5(>fQ^$3<-iue9nTE"lA[sWGV^\rq']mP7i^NfFZrlsp3oC%2*0+\'X
%kUiY:'cj5Rk%j^>&*sijTtd'L+Jt!lCIDGbp&LWS@L=8f0@8=6AS*>TC]tJM)oo<ZiMT"Tg3B11TH,41qPn]6Dd'%/rRIu;^T#++
%0Q9`:l$d23MEH)NjJZ6^ilOe!_d579bYY9LUds5K7<gC@B!-E9'Ok*iXq6YFd62+K"$<]d*;BP#"b2s,:3TEj(-O#60c-i8s4Ikt
%Vi0IaPP/r-a,>bh;TXJL,#oX"_kqZdqE]J0H1WV1S_)FG-]n&KC@MG%9[YjDTP'oQZCUO#40K]uO(=b)O_WsBFLs,olP(6*F4',9
%6PZ8_0a(H?c@nbVBY'B&B63&]R$R0g?Oi9[K57'<G>hl?;kQJNK[BFI>%EqDMbUg-'nR)O7*3E@H.%a;6^@3t0:mJUhIuTt0mG"6
%'a*49a<nI#nQ"09.b+KWLuT\G2Qr1iEES??jXT]LVV.@GfKp+[jph<RdUW-c"m"X79`FWT6`i!U,Rppj+0$[@jX.V&gr_K0Kp&Ju
%KCr#98,e,j-f11Re(dSF&ugf%qG2\!)pkHJNCa&5\u`ucCm([.TK@9XLYkn7eDlHFB6hFml__U^+MRj-Dd?Il4cM4"9N[u5786WB
%g(NU^Jh0u81^Q@T;j8f#+3h;fmCeD;7?(]^42i(pn4`2F3CQ%)-c(S9VV9T0EADn/+d#f$Rc>4%nheaY*p,YK4Qp]q]6oR)PmT\)
%Z#0kMRf96a/Lt>Z-Z\@AK,s:VfgKKe9iFrs;q-.]_76ElP"Z_aQDUYWAG3/Z^#VCjLN+eN+XN6r0\mrfbPN%oYN=*L$2.A8m(Ee/
%3ZN.RCB.&(o\0pX0GSsW1?Dr\3\j`ZB,+DUDAUNZ1KpgHHo3P&2o>mb_fmnu?gfRo%o2#-nf3?o-IGsnj1D,tdZg@:Xn3M>D[eY.
%kJ.j<UGZ%[IB2^79ll`T];kjeaeUR8nqnB\0S&SYb>M1>m*Cuo21J:lDEp/4WB&L(Kb[4&KArkRZHp3EED$ib*kF+30WA'+YQM&a
%FDauroKG)D7Gja*Nm,tF-TrjaH1*e(TW`G.C_nUUn:7h1k9L-9f%uLil@@b4+p4NZdaUH3HW3R2HN6X?76%6SLG^2l>$el*O#YOc
%Z;UJYmP:&;59'#/ET\43O3PR_NVAHm[aH98U>rD]6!M8RPKeO/*5!=:@KJ@E9Q#l_X*UF=^BdE[_\JQ\n[$O0cjE$_0ej15Hl<4s
%iu@;kJAC,3/lJO<mQTY%Tm<"LI.,E=CL!?l&FC##1p$o"XbS$dXEDS#m1]X1ZtMWXPpibT2RB5mkcL"Q=i@3K64jln8K]E/V^R&@
%Pd.NiQ;b%Jk2oXb)"P/?<f.-o_nlrn9*;TfJ2pXhRZhmVpb6'F2u6^"p8)6OB,?M$]aJ\DI)g&>r^RJq^$5#kkB*sjh1?$cq[1Nm
%8+HC5r"*Cgn(/3b\+oDMT\5r"f#+"4^jg-7#f)\=U"gZuCj^bZG$GMQp9"sS6.mGg6flUr/]X8eT854m.V]c?%3\I#VI;?CJqs.<
%&,:N[*^W-\*#KCqXh\R=3AN-FH8W>d;#rmO<9Q?t,bN#[$5'9B$rdG(f2RgV0M06GZ'i^n\Rh%Rj6*XM7g(>la5p["s"k3(2Z;VQ
%T8a;3$m.;aGWGA+*[,.n'NPHcn/G76%D>e`j9dh\*nJ34.P0O--]1;JKT]gPGt#\3-A/&X$?Q0P?++?9[8`F,goP50[<9#+$J&sC
%C<1&W0GW0.`sr;6C`23cnMWREe0SK,Iq'V5nbMU25MK[f7R"gpRQ$@(]#+qX$d)Y)7[MiV"N'7<n]FZhH'Q)@#q-&)=TVg(ehBh(
%5bI''Wng2a?1%7+Bs^D9Ul]EC4eok53'D\pQ>ruV:m;^K@)tQOHsmr`=)p$8&7b#dIbOQ:3!ENobe-LsRd`2-!kiS9F`h\1N/aZK
%mYofi0D.Vnk!KUZ"8<Bj%h[WC$TlYFPoigME36C=9hY$tTpXPK1kq@i3dj`rk6tQ<)6b:)_k?B\l):I!,4#i?Z]8b1W=d_)_/?\2
%mB&J,NY<mK.7al`Tktqb`#dXC<qP6[CEB1P&_+ml63U-Qj6@D3X;pLD's7?GenMVacFZ<56P!13k7r'A2n.$D1Z"]5KK^OBT58B1
%=@JZBDf#Y#@6)a>=dHJc@nUTg+s[s,AFu^ng`"F<`J:DQKObYr;BB"`@mZja18]TpTU;n:V5ZO,LhsD44"aGPk>,#k/Q:k-#Yko%
%p52medN]BM('UJ(6clmC0DLf2R*p$85S$YN)M'^i:4>?>cTfuJl.l#]XRG6r%'/X>5.:[AA;Xgb3qAHT:]W1H_@4:e$b3-hC_<r6
%<;RU[*m,pcTDn5`%^Rp_q.0JV5HT#`JJjhC.o).Lqe3R^V_Vucg27dU1$iaF6;47s/AofB*.n(<<f"k'&Ta`KCG(bBqtU4SG@3V7
%I[hBoFTR`OX3Ka%[.5[soJ\/^F(l*W&Hb6hZ9paV5$<^*f:g`WjHBt-$`oR4=A2^O+JjZu]'E\qjR;?=rTU,;("B7$Y?<[96MO/@
%?T/9l*USW!XXS?lIdnVsI6)m#<BpJOmr_Iqs/K<pE=(!D8\rh-0_`\/?5%1Gi0.W!1:=)'XS,J>o-#AHY]#7if2i\?A`'8k4eJL!
%m5jcE1dC;UQiHJ>s"eb.hV'&3EKK1OZU7`']s6tBU;-Ur`3^or]-42f7>llUl,Vc$#En!8$rgk.?:^njb*bgt>[Cj)P,h7j_`HI>
%KsYYGE?iRn.V-XfWR(6UW7iZspOi*AXJ%H#8lE)@XXu#NL@S_Mi6*e'q=JD(IZAl2baLe!k!g_DKE>uKJ()O:Keac9(('$jbt4r6
%^b/ZHf(aah8<I=g'>#i#Jdj"&%.k_Z#VV^_jh08u^)qVVL.K"#W:YK=gVW!:!ZgJC77Sr$eB)t"a/!ue&I'"V:\imB]89Hp;iM(X
%(fXQkUouu9?_1!SododTM+=Zf%V*N#j#a`EP)PVj$=LhkP26Ma8'9Q4V]/T!BEg>2K"NOXX_mS/XA`q(Z'2ad$\gpNN4D:])"ns)
%)RFFJYf`9APGoN=P)d'cjMs<]gVHLHBBkN2,RE,oS.qDW50A]Sh0Hr:X+*9g,I7$Ar8nEtJ<JmA+SdP:(!.RhiC&CD'Qn/,KHU->
%6@fYCh1[*=>bY`9)F''S`.f_d?DMnd62H.rU`j%e':O8OFW!rt02/am]FAZ5@;Yt%l6(25O_b&a.8h.8@O<5F#0]*9+&>315K7O'
%*ds,8neroIGih@ZUX].c^c_W>&$f%#r?1"+6Rq'@\>asQFcHP^+27(PZpRtW@tm#X1X".B4_YGUdl%h$!V'&>KTEPVh?"43,mrfi
%TcZ`r>MFp^3!4bJL+P&o5o,Ll6bd\JQX$/4kBW\2pt2$!Ao'cUVolGGX0p*<7VZU^Lg((?iBO'tABU>/&?CPPkqFCjludo(-%[Vt
%bc6qqU8ke9U3rRrZr?-t;d0&LM9[Z;2;smi5NUcta"XU*,`*D,W2jHnd8!MRX$$^O&f78DVK)&iWRZn_qia=u40r:9?e3/k)P5Um
%)iG?X+-:_TgXP$d_6N,tT(ZZYF",fD,SnS;`D/oJB$I7\81jm3D4T2l$7JcA&]oY^5Or8JLM`3ChefU%k6p9k%4ZrVeTG\>+/+?.
%dskk+g<$%7/Hjo3-83[:n$l,u831i(f/6cqH]#oDK2fS+Wi;=adN)P804Te@4LjYcgfe:dMcaC!'B$I9Y;5BD-TBdS5djoeQ"4N!
%j=urP%`Lp/-*ce:&q?Q\Hm<kO:?`sT+b:(;T$tDtGZk\KpO2?o+Wm4o*R5,PN7XFadcLFcZ1bWPbYm7I.s`Vo+VSTDG@pL=7JK[k
%m_+N4%r%BOk<f(OL=JOZLIJ_sW+)D&!lE^*Q$YeKg!\C+MmC"\E.H.kJ`l1mUZ=]-p>qA)DRa@*ZR!7QLp/=@!Na,d6K:2oYZg[(
%0">ke]-OZjImV,,\8.iO:i<-NAIV=*5([l&[hOkCUIe$s?h%<2`A@#bR:>0N)T./*8ZrqGKb`W*K,/4g)[S!Kg0*Yn/>,Uapj,K&
%J&V_<`4I%F,4uBd%^&<Gf=a^8o<LGGcW&]%.CrVS,e$X&:stdCenQU4<jd$^:t-2G[FVoH2)O>,P*1ka[;!d8XGKn6VCf&:G*:Jh
%fC?d>Yu9o.]uX(cgS$n\G5L.Z3`R`pX;gaNG#hrATpXI!:g>YnFP]d<&I7[8rA5?j]8$_&<XC//?hI;Rh/XuRBAlf&Ou+VomqZF7
%1DH7=*S1=BF?ICQkZj;/g[qmd02fL&d%\8r@#"fk8kYKDFeT@W8s!P\IC;ft8;_)ZNh*IlMqI@J&X<W;#Bg]W89?!RL;heO:R:1h
%e-#X1h36>/hekW8_#rm)kG+<17u[@+@#F2s1%=K;I"+$AY'Q"WDeJ"uJMlrNCcq4a%/g*>i'06,T<lfK=C7e@E!/hSJ8I`<o"o!J
%D\u5G7(P>)8jIHHE*00V^^iE:iJgn`n9j"5^c()Y3G=&opF`r"TeoQ(YWamhk(W&`Ip:TuASl`tV8dZer2*Dd8t2*E`)MM'_duhB
%L;)#pm<5N$_fhf/B%*>k]3P*t[gU/8=VK2R9Z!RXj7\Af?BOsj;f]R12T+XC]1rq$?gd53c^4Tm6e\)MP26W*g5T@A<fmTjb/"1^
%81UjDEaqB6L;M;s-Q=B0PeuXs;/\BV*^KHJ1!Se!YU^7Q_$b*>DePC,.(b>D+sAD!^Q@a'LOVC](5/Z?YaE#18>T*0/2DTlP&f,O
%]1c:>]Oe++]A"NNL13GCU$j4AeR_HL1bb.32f"#GAYT+kPCFJ?`^3F7q+pY2G*lr=,EqC?A9.!&)>?*T9ospfqiG9F%P-i:AD5`V
%cun$hq>ddp37X+,B`8r$Qah#1JH_b%OONU#Y,tEd?"-h6<@e$jKM[n,Xj=?L=?]R44l_P)-$X-D[.rlNo+jtokJ6:s`<0bYP@;rf
%"`hF-b1*B'PKBI,VIGQ,ell9;8X0BO-;c7'6D-lNM0=>pc0Tb*gY+AsJ!4HI@qrGC1!c/5ql=!2/?B_R<@!\HQ>=[7ZE3PNfMuG+
%@bq#4ZE,7B9E-Im\biR&c:Fh?,<ZHR?-3qgMK3lnMJN>PX2#:<s(E)-pc&F1["WX]\53oL2R-dINP:FPS=c*.j0+%cMY`gfT,?Y&
%ATF:`&mVphW6"<CYL0s/4)Np%TNh`pn[QRTO"9?\"]u(4=(QISX"Kn,e@b2mY^t+\o,=OZ^lU!>-Ii'NR&ToQLf1]h>`"o0]3<h2
%dEAQ7gk$l.4GI2?+N<.NQF*@chtGp/a--))%Xf//s%k?O"9REWmMG^kDTXYaZ7Xhon;'lWT\,nAB50mQ%Vb.a44dXJRCW(;b-%o$
%Ziu!n"SG/oIQP;k>ZRrQ#(t<;5Dl46RQ`&EGIhLW9P.77!r`S%W=*uZ%5iKVIcM4DbUo5d@Ao0"Ns0DJn?eIXX*8*T@"daFgdN6o
%@5q\'7u!=P+Xad59J;C.QWif-rF=8$8IHk8?QI&QB\Xs\2')C*!;Y+l]uk@2P2bo&^G;1N3h&,<7\1qF@oRqX0Jl@rhHdM=BVHR0
%*Z3suTr?Y!L"^?KK/k[Zi,TU$3o!lT#pQK?Lla:]8\WYMMZ$'JI2GuPi9s\lBH!nlokiVK2_FsDQ13j<\@#AJSrPs/W-1QR!@n=F
%Sp7E+$@uqR9iW/`=Y$>"Kh6b=P%]H(qD@$#pYMe/g2Gnch1Uiil>%kiXhC.fX#h6"Di,&1WmJ9`p-MmECK7T'h2>6d\^4%+AV_B"
%fIS7%9;BPu"I7tjNg\l2"eTk03L"X.Z?"*n!WK/P'ppL<*u$3NOP`'3<@#D]s&BYt`<a<8(2D*Z^VZdg/um.\1ZlJ!n,Q^O"3cRN
%2WS6(dK$Bg0F.osq:B[cNn@]42Z(''fb\Wj*)jq>7ePsEoZD/Z*dm@rrqrCKa*)1V[A1>rqV(I&TlITsnD9MOi@6360ZLo,(K.rq
%8d!D()2r]+G4Bb`KoK6[LHBarfB&%@aeNoS/4.,lYJ0eC*1RP@c:$AV\;CnuR"(Bbb'],g)$"4a2ZYU&]]J+-UiA'Md4Q%&K^_&g
%%ku<No?"B,lcu$^7KJ'ZQh`Yp@#)"gKBVj]c8=Zda=mX#/8hJ#4)N'04crb$<I5_2k8^HKTK!T_R37[<JIShsGRplX(8j0>CPq8`
%`luhra(5H61ITE0jd&2qp5B]J&XaTC7Hl<JULuKo8k680SP0[`&#)CC^RUO-oGJt+e=cqoN\"4KEbQunK1?JbbZ,!7Bi9DpM]tTr
%c;g\$J$@c?KmtA-$Bb(e5.E"Gik1?O2,j2sOuo#(8ZNQN=Kp#sp7M[d<k(_tU/GN60XBJT[VoJGr5gXBN5OMKLIN%OZeq>(9$Cje
%BM_;`5VsLH=rK(1J<Ec\A1\UR9!fiDBS*MC]?C[1e@o](.\aQ%N"Xta'(mT-+f.?t2XHaiF1^KS^NB#$.AXIdK0!94FrB'drC-_Z
%`K-AC^ARNpgGaXDFLq]!J,:S.gMbsRGl-kI!JCMmh[7Q]n(8%N2K.I_>'.4mic$V9IR.&FduLrg(#E.g(JM\d3KSPt<*^nkPM##s
%Yuisu+YA!?8@+p"ogCX/CT%EU)i6H#jAa?H.ZQco)R2UB-g=oWWrQI(i5n)`qk*k6r4dQsJ!.-'fPtV'<ET:U8cI]]IOF3n`=[R+
%e9&"P/2fQqhmhJ6p0/?g?Oto#/3UXo[.k+Yr_(;nSQ;@'QX@lPl*')VI]E[VMT5)MiY$C0>2U(p8d'ducsa9.5K2>,WXoU&`fPu,
%;s>BRAndJ$q#cRW8P4MtHT_X\?1LI9(I"8POZ_TAU)I/hBjmi70UL9ufY0DJ=CP,u0<mF=nEll8'Oh45jCAu>'4Z0`UmeB@E)lNH
%cF'5P0bUSO/JK]^EIp`\1+cq?Y'j=k>`1g#O`rdC=&`Q2-72@ih%&f?^3$I4#t2"AM&]8DG/M]10Cm"0LAY_JiN%5#1lG`5N=uc)
%cJ,68"7tZs[S_ItFIsU!GFIp2CL(nG2=ku7W`0*1#PMq4"!$Hc/IQg%TIFfb*XnRnRHr_;>086S&jTeIO*j93[deALY>7(U)#DWX
%0jMbni+>OqV+'@ll-##')o8QUE9["(<-R7Q^j8=>In[jB8a9!6a!n#<%]:!/l)'F--a=8i+;f*:%6"eH=.*HM4+7U9I2bLYU*c"B
%/H[EHA<4jL4/`a1402dO&FK\R\F>V%9eJ@!dI^n#+&+G:VajYoY2VB91<tM2:U@^KDjtE;l+V;?25[RGm*k"Q:31iW<P2<^^p-(t
%HVo\.b9FmSU:fMSTge6q/98csWpk<Q2D5At$+:#d&M6g[7ILF&W\d4P2MJPu1ETT@&/K]qL^i)&W!o80Nc&snWN*q])SFG*=gZDW
%jTBRJTEIWs#UEEPX*P,D',[?PRV<(_&RIYQMfebCkd:Pk`K(((!9HtiJ'^Zh*Y3aDFJV]=D2tN<Sq!i(C_&:F%%/Y&qTYKW&CD./
%D:>[e`9jNu&I_u&;KHppU`N)pMQl&]l;0$?TEDgrb6A[X@b4F6/Eb;A<EQeF<gGMB'_NWB1HrNVFr'QN>Qs1RWS2`nA5bO0NF%Rn
%^f;M\,'V9(iqr>6cH/-KXS2AGd11]7nB*lo;sAG:5Xs:.pONaa\*aBdA8g?5\2E-U)r?!C]R<<.m5OJ?*;=C/'iJ7CZS+!rYM'kl
%QcbjW`iY9sMa'N(lh>!f,=@o$3GUI0Q5>``8M^K`m1rqWKhI-Aa'&(V$>C%tMK.2?[/Aj%Db@:/<#C,S,,`!ZM_95g@$lnY7\TPp
%M?;pNk"%D.:4u+-UqgQfS1nIn!6.?&U^%+'gZTeKNRVsR-\QJLS<0gBn-N*Z/O^j6Tj<WF2E3fQ"r!43<4`D9I$.p^igi15$M`5X
%kXT)S$'@pBJL?Y>/c%$<B-O*@\Q#[\-kuTi4I&/NE])Z&>=LQI[8bm4)%3#>NIm\HT_1]4HX[X%#JP#@"<rsUj25]NqDJ[/,Q_dU
%6FVLoai:Vf"Qu`9Vk2aLWfLi<;9XB`8PK;_15k$n<P^*K<lf9C%d!GHe-T+B&7p1:Q@29lPb(e49a>=]RNgVod<1G)a<J@=P"i<b
%MklJE&P.]r+Eb?V];L(b+cR+kSYHepM9>8-^*DmT46ThrilM0Zp9S7+b(p=/[M$^"W,M5LL'gO*GHAhiXC?>QJQ]J@,I`b\CH4+#
%a#6K;:ZrI5<%NS+`u^/,iT)2_/J&E6k?(h`M6L0U'h_`a$sr;N:;I)2,_(B0eX5ZZjY=hUTVsgo;_$?'BpL+WWuLr6o0fJ;%`0N<
%6jI,OG2J:@:%&2PU=a=L:s4pV`aLe9q.gN=O.T\5]Q-sm\2/%cT6qHb`Fq29K4b5R-5'I#=!.MR^Y>%)M`W2/G[URaCOKuV._so\
%kpV[Q:PG_USpGp3b\>2HE.ToF))@-ZLmCMf#+dB<'FgHf313D2G8I*L8H\3*,0&aJCou@I[@8St2Tms[=9Dg*_b[cjC_igf9XBQW
%DTbPpAg!cfV3q]<,6bGHe10'%C!CoB<mQjm8uXShGi0&T`J?gT*?'b``HG[@H$NVQjqpXZ=j728#uLo&[J;u>F?JF80MeUNN'$":
%aMJPN]-fVioYea'P[4_n'b4ZBpm-XB3&=CbKdgo]Pq<+!6)shnQV&e"<,65[#E"t`]:8nfYrasHhuLo8Nq"C]0mQ)3MhB;440cAP
%ICX9o!g6`N'G5c7g5O!>QFWQkLlt=;WnmdMC0l/44f'BI^Z0c3$\/JG_/6*Cn;A\n:E@RKO:/5*-fG:\q6K4`bQKm<SaHh5!qHTf
%F,D&UGCicliaj@3h$F\SeIR+W%C`Y(m\UpW(JE@eFIpET(1gYfTul\sEkkPb([`,2OtK?\j<[I-!ed!&76I4J6*8AM+/Z.rnH>bX
%&tG=T@193p'T<15,24;D:/.qm9iJc_3"':7+`Y;8*`d9;]!4!rL>]^:3nA8Z"'g!'g!bB,?;CE*/<oknZC2mgMaKEB3mi\gYYN"`
%0\df%,[9$gWX^%PYoThT<@VrV.prURM&(p]#I57:5et1('e1acp`NH$e;q_SBj6/0qJN7JMS++/kEfZ1O[^hq!DFIRIhau4RNBf_
%([2:JLr:(t.%\Wl=n+tGkc1uPKDYer5g5n_onP%W`g!c*/0"RkdRkQ%N)W%tp5#[$_Mo(d8efMR;h%VQB-s'6pX#XU87T[86jE&?
%C7;\96?9qKc%;N]+AD8?>;fBa"P?&`eAh%ZQ<OiaLR+nHF\[d>0X-$p$:$E'BEFL2SGs^/XW#Rme*!C1kC`\AJ_7.FA6!U,rM`<m
%'\YR++29LTJ@]Y!=Bi22L':2Jb4?dYB3aBF-nCrL(\a6&Bneth]Go-t,U8F\>H/U+Otj7Xol>Su8<>8$27L/R"kHpVY*5Z<\hN&"
%T4E)p<__'$^M#k^;]?W;FSXh)n];keVudo3LU\=V;jO<S@S1iOG'.Q'?KRoQM6m<2hdj*V.*NEoErk\IjrC'+_47Bp6P0KU(PZmT
%J1DdG&`k*<)(#\5BjmU>-s$DgY=cZd[MG).L[C0#$5Op[juADmIf^E]-L76;7iaSjGHT'WlO\^pTEKXKV@.S/qBJA9RXkg2;1pRO
%,4i]<s*o5RmOndo^2D_%Y384prG?9/e8$7F:.3)5;t7^(&BV!e._0_gUSlRV66H+\nB7Z$lJL2rZd0u"`SHP[\[B!F;b[u4aLWZc
%GmC6Sbp:b9%PkSs7sZV79sV9Cqh&]tA92,a"50jM`CLfe3f9^J,\lg])$e2+MF[eqa[]UOgE%ZcaRFp4en4*_"RSA-1?9_4&uo0P
%h^C+V`l(U=kZJmV_j\k(qen7U123.'Et=4D#'4!Jd6jf7gl\p;6hD'6ICMPM2+U+E:%^DX7_Jt,XrbMP($1'PAggOW3m2m*7,X[g
%#tVU3aLG]b&:BXW%G)W,P&Cq`:POZQh^51Rfi#oQoZM*/R-+Ypo-=c/.U<T`*:U%>0O.<YM2>i^NuEh3'iVm\eLCRI1seO=DsoS:
%R?kaK%YE3^0uY:9gN0Ua(iRT:@PT1#9NoP;mQBk,VX-!U+i2]Xi/?d1"V*>0C93He,YEV[^AIU:M@`2^9Q*D2*V^e.o<!<T7LU_H
%NZmf2:mF\4APNK:(4&Nk\e5@,d9(M70$7:lj[i(j*i7&WQRE=[ocY@m'HJ0/#XHn_Pa7h_dKB.1DuU/os1\hh2`&,-;I'Vb$&E><
%HbD./F(g=N)sk%7rK['U8`jHI&"?O/6S=*-L4.s4"8cZ5_i]<*^km'hmC7:s*&p_(Xa!EMhaq/fV41Q&-!8Dj&6U?9`9kYteI4p;
%^Hd$&3I(h)X:bPfH5(]b+VjC[3H#8tJJ\@+f7+eSY])ptr`k#4%D$ea_d[;5"Q[$H2"U$G(5O7D"1bPH0;XUp"Alo8<l;*.)2CB-
%TS#Tr8:jXBrc73-YV3_J8h\0A+9PJ@,-OCc"d.=0>:o-)::T+/:A,_Y1gZoJ:rZ0#=^#gH*#H+cP1VKhOVh.'8RdXOb<.[;C[4=0
%b\]L&.`9,_I/:'"1RPX[+\/qpAG0cW83jm%>Zq]eVQh&&U[@8L'b)S!#_lQZje,$8oP#i'p]RU]-???ABIAO**Q)%h'n2[S1FOL(
%S!Ah_!aRWZ5h73'0Q66L2BR`0LL')=B;!jPp0I)9_K7KOkI1$]ZA.7)5T$2SOSa;'`FprqLk=#"r^OFREOM[(KCfC"ed<uNCq&se
%/AkJ^3J86]TN_YEg2L@+EP%ls(@*br-0Wd1D./[*W*cm%>V'Po=BjQ)&W,A%b\cbTcU^f*OR)DW'3!^arB-JpP?ZHZ=cCh*jm!TI
%=au8BnjH?2;$QANd^)ab(f_PA,+O%IoP?QE#be)KKAn*8g5?6+#"(JVg*Bh=Ejjiu*/e%:M:K(+:P8dMcs`Ad)2olW6`J;oFppiG
%C'n*?j_H87TZ/0s=sc<lb3tJi.Zg*X<3j%0APJ<OT#<-i4"Bl);6'pB13:$qr*!/0j)c<n4*e$e9c;.02;V==H%Vsk=c,"l8j>!b
%CmBB%gmuC1)")q6_U.&+PU/<=W"`WY>-Q[1CYd6/K/=lgeaU>II\>p`""u",T%j4tP83P<)AoCfj<2MD!aLkX%Sb):!cKeVMaO`S
%cuMg.8l?!<4Fki35d8Y#cCC71fX-_YG@?HAiblfu1`B6['Ir&*:]$XClETND-$>C2M#q+CnjPP1=TAob$CPC#fRs)gcm1Y&BL.Ok
%PU19R<naAu7YkG0`^NZ:mG)-8CRb\s*&`YCA>N4%ZnoPsRDl%d;DcpR;Bl9$[AbbQP%$7.Mhs(/&eaD2!Aj5OaEpMT>1(42fSoL3
%_gt,U(kiT$<7t>7N>CWZl(^'11_=_O)JY_Q/8i>I;Ab"#KPjH#PlqrrFolhRV_H^1cLHM]p;)-HYCepa'n9eGc"4,GRuF94PcaSZ
%@Ef]0!^3jH/[S!g,$_&;'H)IEo+JZUdHNP#1Eamm9i<9f?_P@YP.>'l[mM5+P8+W@=fEiS3<`h57Zqt*LmY8q43%)&K,+F(D)Fj0
%6r>l64LS\C"l2,5gI^fNa]_p!r)D#qQCF+Y)&NA'Hu=](r1Lc&-K`K(bkfKY1N1W@#ci7G&-Ed$XcP/M_,1?[]SfORTLa$9JN/^$
%l#^ttP+oh/:XY!b0u1;<i%gTL&ImYjg<Rb@_M]rQChV+hg$DS+`"/f4N9,ca$ZNp6(G[1m;pW5s-4Zj^5@76>`B!78d\6`e$N,,+
%Ij(Ij='k\>^jk7#8011CKeMEMR[(:PLG^&B3XV:?E7TimQ\fW'pC[?fF0KU@*&#=C3`L?'m%fl1[C.qB_b131%GG].O_oD8;,anA
%s6tZG&)0WV\EPOu6>h(nOY!EH6HrR?T@H)f$65-b85BQ_5rt$4S^5A+N\!<M`?"*J8+r=Z1lPG6q1#.eTCh!=rXC?*9p#a@[E3]\
%YS?H+^4,lop/[[=aJ1^YU5E,C(8q;0eB0-bJuP#Tb$M(u0i`A[5na+9-W)^%h<9Bg$gNQ,7"GiKqJ!ffLn%VLoY'G<lIG+-]$50d
%V,!U7QO\L!WHeW`N:JKe+K(JUN4$6V)N=-95O?5=_aHV!XCK(>+k"c'N1PthqZU7C>H(Zl<jZK<i`]B7r+G[g,\b@GRM`?0Fea(0
%l^*cXc%L7CQg'R]Q,1]J/bSeM*;m&gX!Xsn3u_F@.ug($1Qoq`O#;9cVH%)JfOJ&+lJ&A04Ajg$ESRBj@!m5h(M@jO@aMGOB%/VH
%XqIYcZNC1rpsprOG,#$GqC#8=R4*6*Z.,%%E;4WT;`:%,[0aE;2V,_3]fc3O!D/W9e-4lul#;&()+S/`6a?GS2;<>pY_pHo?<FtV
%C"X&ekb@#[s*CSDKGe6^VC1`FGeQb-HS>NCPs-u":Dq>d?[mFbC5eE1R&`F'Cn+Tc8<;;8')'FL10mkmF5^X%2Z`[gj/2f;)(hcb
%=7R0MqHM'j.f3!Z]4YH".'H,D4PTiVj0,0k29Dr>7VY;28Nkdb9/FC.@PW('2c4E=.4a;T*A57`#P*Y%C$,UZ<Zdi?[CVW"=!C[.
%6bAjfXjnh*+.U]#I>;tZH!a^WB'I`k0Q'u+%%TP;h*n6T*HoK/oXd758Q)rQA$.\O\HUE-T9/!^?L5Yg7)U#G,E.?^`a5tQ2WWB<
%><7_a].6',qp/Dn4ITW&nF:PtVtNuQE@1#('!VGW9O7;sF*-Z&PNK8dA\U)F?^@cs(O:dYQR2:j[s#/T$A464(e_:80TP,L$H$Gq
%)p,2O*%A)i"507oRZmDRqD$aYVYgSOQ]NLc$I?='NUg=u50K.>J$Br;SXO5S/`5W7PpRqq,&r<p5g76(;FCkL5\q8a+C]-nRN%SM
%LLt'QU-_QhB`^7lYu.CC#1@tQ,%@:QRB46Xn]CJkccO*=>03PX!BER]e&0/n-J2di+eVj.iE&0)2a6\p^\kLZ-QpLJZ8RkG[%qjj
%>VaNW+=(DP5"o3G=n/dYkVn$*-+Sfr;Cte.8Vi5]PK8Rm%mnp720>!-OGn#&=Lag=osq0R*eMb!0hb4`M7&8mFB4-5:aOh@`X.$j
%e#U;l5QgbXCSqkeohHC"n&)3!4@<2G"m$VR38YkFK(q02),\>QX`1KNX)(b?nL89_YqWKVBtL$g9'**)4_QOrARMBlPag2l\G/X(
%o[\`.kjhb;]$sTQ).C$Mc(c0?Z(S6OJ(F`2gdg\^,\86R(`l+"TYZLn&E#Kt9ITI2&7WsL*KA6V"KL<-!qk9YF8_r0F7h6LED/;(
%-b&8ZU&rmYE;*%\[IUVL&e!;<XWCF`_%R,=G6PXFHNaT*E+S!cH!VeNcmG>i0`gCQS!13[\>`t)&.*6\Ji0e12m+qPFPJF-(nm(l
%Q<RlCX12i]Z3sgIX['.J&LEr6E[SNMF,P$@!CIT#iL%T<*@!r'Eo?QOMD5oN8eb8c"8FBE>,`>feL\^s0Uc"D0$>V4/.#>7`?iYf
%DG/$=Ipl#KlB_MW)P7Q0,^61e<s*Ym8=-XqJt0d@P#dFujlh^!a7=)<!R/b['r3/84]sT?#KLg.jTd.fi#Wge\Hol=INQK5jidH"
%88CZ^al=jONF@XdfYj23j!b`_#oJ['G\*jVeGU'?"@W9JH33INH`SAHT4=sS=SNL?)GbX*Q[&]2M8`Qd?I/=%biDOV2(Hn9?t-YB
%PpM0\bb/.MMg.68V!9(=",@R1RrFBtgV^!"N5m,p$J6Xs<S,/5"e'S$38hk^6rZUV7?[F!U+*rhrqN3;2(^76T+rA[Zrm,q\B>7'
%6V'D[dH';]A=5k+KC,Gq8m9^Xf(Ob0dX#-:JIMMha"CP^71=-pSgLJjjo_21c;Hr]Y1oJp<PaR>"WXupm_l1?%l$D%''#jth&Gsm
%LZtFD)t_M%[#/p8,V@Kf2(>uBl@'A]\-uZY`a[%5p_k>("#?0ETRX_TDBu'0fluSM[^S8Jgp@Z-`CC=5I&A"*A4XAIBYIhPa,+q=
%&b]fZ6PWVui+6/T[Kj:h>dc)i@^XIkq-iMj*M(/cd>);e[3ZW3?#UcKK,_09hbB$C>HjT9Z\cb5fhE@&A/OCM5b'DZ`-53V'cG(k
%Ht_:nH"`$e?PeqZ[YRMHDkW9**%2?Q%'p.r&9.khi@?d*q6V2B.9bS4-?!<jQcn%t>[da$XGIrdo066eM_g_3LH-9.o,0ZNVL8=N
%^@t1sWqlO94X8#+OKY4;5M]sVktp`Y6h-QL/qsLT*lIS?Qf[F"Q<=2?V4_kBXp2g$);.M@_3<,6A+h5*Y)!*3Z4%TA:fruCEde7h
%oaZeHO5"S6eM><fElciBkUu]2SSK5jPl[<(kTsI!\/br%LD#rRAK&[oaIrYjPHpXe*a(Qs3R(aT`46:c$gb<S\-H>UK,1gGr_*_T
%A/U22b/-1g0m(1MK)pmmjuj>i)?ClpCkm'@APB0uTt;kD@X-YVo;Odr,5KrlZ6A6(SCk-j@X7Yj6L"_U:'e!<!DLQ1(^(sJBr<Ku
%hQ;\5-^0O'1+:2t^_:bnEL7q4VKad\AZ2KUcldOC>4Ip`/srDP4[1$K>nC@-7KJ;H*j&gd%`MIW@!PtYU5#CM'J5cRYH4b[%cb;C
%5_m=91uZe!WP$#&$KUiS2;2"&7>S6;r;G#j)'eVX)=Q\J=9,mAN^!,`)'(dF^3YS:i:j3HS$(`i2$Dfe.'sHi`ZeV<XqD0m_QncX
%:%HskK-Fl.D35B*<=VhSKJFXOeOa'bXtK2F:mP"e<X2_Oped;Q0`67Ad8.`ND`o2;A)$kib@nEjWC@L@S!<im1ICFlJ[K4j-3cJf
%^b`pQFe'k;^"S,P+m"WB^"Np*1UD!V=PFb?%Q]-K2HgB36N`6MOOYbre,#aNrJ\>addrHA%"s#G._7?%SkUcU(Y34($O10Z%Q@,?
%*MR@Lobq/2<c,P_c.%G=.,EZp*a/"57"Z5/12\#<!%d>r&bP>_>>J<t4pK]R@27U#E6i1j*b+_gR/XKE?(i`&04a18;T@^gW_/n3
%)<"F-F[PR2dLXnu`PrKlJbMGpY@n3`7]<9@Id-)Hb4dWQ:3,RiI8oui$N7T,UHIpJdcNoU1\e53G\Jr6k6+hIUH.:V'W;[_,3k:b
%f-t0U8puijTM@RB=UIt16E#'<'&^RW(IccUfV(tO[G$$FL!J9f>Nftp0+1&>>+RcpZ*pD*3[.#@Nd,PV]>(BGGV[rHcVMG;q*)AR
%AnN5]Mho\ER9#&k:^r*YVF[=1Jj#R5>o@0rGa^OMY[Hnbc:_HS:':iUP/.b>O;&Cbk+5/>>CS^MaHLJ;c;[0=fkiMT=`T_iMdi0a
%9tR`J[++:J=jhma!q!oCm)iU']g(-sl7rAqUCV\l)8`/:hDLeIC1e=ATMn_rjeh)$F*/Q\iaa.GRe']Eoa]On4]#*@jakk!"QBgO
%8^T6qEc=@[!r7raG/^&jm=]^'T0qnAW^ACC!73LXkF$%)7?9?=E[i)g2\7!FZkqt0'04sd2k=;@GLD4_8DeRXKi3F0)Y29-.UG'C
%0Y(G_r!,CS8qq.m4phLUa?_9u="JA?KOVhj0GT"6J;/^WQNH/o//LgDLX\X!-hC1=VQka]*m%#hBmM3^XcsQ'AH3*^apQQhjQ$=(
%^B2aZV39V(#tR!>."I)g-4$+<T]bKbku^5Y%Um^,c2SI?*jC[Kb0V7f1Omc`bWHI.WN*k('mU,/:+ui3#V:T9=]@!TgMB$BpU)rk
%=b3P_')7@Wii"K)Sp^8/2V:#eq8ujm#K`@NL@5F&Ji*E5[q+O!oNr-FVmS/bS:8/WVC,n*[s$9mo>s&%'Y\arI^,JLp[Os\EWjf]
%!4Kq].+hZpO+`l(MCE=@??'fK*$q(0F9s^#+;Us%.fE"[\&/`6MtTV>rZYp>TE8(2YjJ(Lobh8)\=rEgUPT5>?k)#De:O]E&dF'^
%G01G]q>$`(F@S&q46i"DG^Ounek\cc.I/7VLTG,q<Y`m65h-0`))@M:VQ?jh4@'r$Kk0B:m4b.SaS3!/`1pn]dr;EP><&LuDBkAX
%.+96Z_2^l<+`WW7SPg@ImgUJ+^,el&>DOn#+&%i#o9Yb)e:rdW4?k;Q>;M2sA,bGV00L>LF=3Q7F(f3-kCp<]!/Bd,JQ=l9KdA#C
%G<*&e.TpNra)3W.d\<kd<g"II/_751CE"Cd)0>YcL-8\@L!5W7J"NQfae4>'N^!-cBM/"RRY\,m2;$<9>/aBY=B=$:pAoh>-p:Ht
%J>#\#9!kNm=dsR=q$R>'cY:pJ/D?(Q8)u9I]QMTo&#t\$5?&7k?X>6fJV_\'m&aTDl1l7/PKem]O9;%K`;ZrU#h`DR6]d/X_je71
%pb\)a1&C8c8PZk&(nf/Pp'+FA>`fV^MO6B!9,(4nQsQ0<P`cqQ/eDKET_*a)f>/<t6.M:MqF-s&R0""TXP^3,Rq8A4^FAbVVOA4N
%$ZjHX>6$r"?0B5%^K;:f+*NrT%FY(;]oQ0kBMq]\Bs4*5UKqJZ3:Sah<-LlU,SQH^SS%P1I^t]3/[PdA;c=`nd=&B&B;-]-Znc1a
%:_nt,/aV`Y(#d:<3H98PB!ZRMWTVJ!5.8s<]`$O%U[r4P<Gl>Q*/`bY1>t:_%."?O;Pdio<%JWI>),)@^^O<t:%h1VBO0?"Y#\f5
%5^FFRq`c*Nl1kV@-PCIZ2G3_KS5+OkFi7-T#2a@B<\&3A5k4Dsfj;aTVZW(B^p+jP"pPiomDL.1lo:!d(au\&'8Wj!fm6p="!.]8
%:@.BaR;#fc<nI;$J^pong%>*s\1*W_>]m^]_s_TNhT,d7%(YDimD5TJ:eJO`WJIP]ZA57@7#[Zp_(*R@S^JEg%FtEI2)?M/'[EdM
%OakG+CBQu=R]jGjB^nLS3m@:dN1KBW&%rWO95ubnEAl7h/IJ;"gb;,joVKM"nnWeee'F_4#sgh=.(1R-.bQpM#gB\iJbtUn"X!'o
%X7J5qn55i(T\WOQ:HIVdo(XE.R\+\m<!p"27b3M&&pn-VlK$nhl[dn%b]7eJ%BcMlH?3fJejEk.'YXt.LXc;.f+PFrMp^B6ddoia
%:,*Z.DWF[u=TlO0SFpUL8`]">IH_+b%K?MTXFTIAs/;[ZcmE60eETaVfrh,TnTPZ`O#o&oR'$hTD9U!g=`R\/,9-S(A.uW@*,@;D
%nfC<TCg(G)XU83g/Hdi.jZAeE=Jq6Q(#X/k"^>M.d:95BO[e*'[plb&4i@X/ODYU=KmZJ?]aRehH`K03Wutm8d99!;Y9)MlZfi+\
%R<2IKQK<e;iIQA5qCFESOo0/THDgI]HHF#*GBJAJe+es3G[s&K*XO*H._7L'Q/560aAbu2q',&qIR*N.Yp[V=AB#43#9QNFdX,:6
%i[>8@S(PA%+IOmG'rHO[,VF+nZGR4rXsWN7*&Fu<&[8_#*+oJMC2$q9-Bkn!cNSf"i)Id*!(&HhqBBuH.%K*7idW3Cec%XSP;q2#
%_W8Qr]Q&F@rGNL>/S.hD(%4tVhA"c'QP'PORb4J(iDRH*hCDGdG]AI[rS5']$KeU1_ZSj/esV\5h3o0T:-(2uq>bDT>mc5u0>bYD
%+:;M-&:EmJL0[<c2B,76UG2O,VH"=(7%-/GD!1XAbQ._Jl\6)>3YqQ!G:"#j5\<?&9sK`"VP'e`UAF'$AhoGIUJaFCb\tg)/?oo%
%Jp..qZ7jH+R3MuJOR\^:@qE+=]e"h\Cs$#s9RA7kFV.iljeF7H9R'aM.YD.%6EoA)Vfu0("(0qYft7$pkEE()%YTo%on_FalK-ZJ
%H=;\k-Lu,q?W\@>9Bg-7n['68_R/_g'd%uXAD]d9A4L5u\ZauS.t'hCcf,"&c:3:thq[S#S)&;$8T-QZd>!/8A@Ocg?9Vp1:SWP@
%CHL3U3!!;ig\%OMehK6MYcgjqgN3DgE]CWt%W7`Q)sQSS]"-`/01%A?5g#Ngr"2D)\Wo]?ol.=l5967!-bKE*EOS53mh08k8?\3V
%/qUsY6)hq'it`e<<+9`3!uc]=bK0Y"S=')6K[=s[N+bJsNgtS;CM4E`[$2:\_=F6A@%effMV_'hF0oAt1J=2p:fgAu$)`6AE<XJl
%iLK[2k3V&s+j]S?Fbo)$2CjcmL@><J9E6pPSTrZQ;aiFt$etUiF?p"1,b7boGs4Dli-qRI'N&EbgJeV[0/Ga>'7&4r;ldHDWe0<,
%*A_1<BQ`lg)Q@h0/HaS?Pf)+l`XCXs;R0(6N-\2U1)HES<[GX:3M.X8D1#pCb@<8bCp&l\P)H`9oeQ=8l19a>bR!UpW9<?-FW[O?
%bO1bm.MA79h#[IQQH=]3%VD+7s.n[I,841Prj)_E&KGf[b+YH))Pj0A*Ct^H]-i,9Q*&Hh*;p!"j9(c]aLEfl$G>P[/>4QD%Zl9@
%!;nXP<J,e.d7i*n:Q+/,pRo[nW3<#+EE<4(`'ttMR=H]\A#ZfecSS&U<R9!hr'!<YpS!(UrI>1dh2'%tS&!dR65=iFj<apm50Lo3
%Q2kuL=AG![Vd.g3c7FI^<i^lK/$lE6>6,]RK&$/)p>B7!2Hjt-F)*[<"&;e;5gufQCsa;^WML?/-#`r)D,Y@+=q&fOpmr(c!-6ic
%o?$i%]1_07h5,:G^,("/Ka7U'ks;l$C5:M47i9`6,*o4u9tE5DG^2n<fqP`pl%-a6=4@[8k7\^Uo'P4E>5`?hB(NZ8B3S`nft$CS
%an==LGNu#R#o[Y2Y0h8Q:no&eoqL[X/F%A[>&Bb^p"El$D<>l3B$3`0<81E^[Ib44G]'\=#1r_D6e$%20]3f>308S.f@L\g$sfKJ
%jd7pa9m;"FR\A3';nS0pn76s]5"Bp%R`MT:J.?#0Z.KO#TOjn[:hJN07i+,Q.`g/GV]B>!F-!]i$EC`$T6]E-Pp4]h!+_$H'UTOA
%[45!m9T)q@E$m+fhoK_hgBFCX[*<P%9P/^8!L7t$,Hm5B14YaOR7eQ/*)C+d+$Jk>_/Z1Eaf*-G#U$"D6-%3b&o&X855FHQ=/X2_
%\.;C9US"2;i\jo_"fVCYiW^JMO91`6>Lcul"Q,rW0LL/+7!AR.Ht+?%EnUR02DNR>4\ZFn1Qg&uUoC-,PZ;e^HMA+ls2:i=pkrp.
%kR#m<-WN3D[-E3%!)c5pb>SoJ#8nf">Y%DW\Yh.R_BF"8&%$/DK79@e_L8'_@RK;X7fKRq\Ub=tV[f#+#4pEPIA;KL@?"#T!=.GD
%TZO-/Z)/]i#u"34:mEVRZDKE^ppVpph'-4!Ce:)2`VNFG'=,a5"+4fXb8H+.6SCeE"eL'"AV)JmJhYL8gK!)TIIbq&Tqh0`iRS'A
%Oj,!5CpAlfJ;",TF<7iR78>#,fal%jYA/AFj_b:sm?jG?i4\(=co0Y:=gco>TML=FMk2`c_tcme0!0N/R4]lZq.)h,DN'Y-b/n>p
%V9Otg.Pp,GrE#bemucE59f*gQAi.[lJ[bsf6Ist-]E,+$S@%^!X`]mu<^>Uqj*n[oVU+GeN`gdq-HmU@-J?Y#gT3+F$LUceM>H52
%PoidrBj4J4q/(50>FO)ZbND%";\C-<aBago$M)DW(D3Fn"L!B`2J583OI<'nPCc-VD4M.@`[Qqu'8^V]54?t6P3*$jVfmX6EOj^Q
%Oo.pHN:gQKHAr-[GYo3oiKnF]5pc5=:3Sq[[XI#1qZ&N]gsP^E+L'bM480kt51,<@,kRh6K)\W$X@9mn4FD?#XGVHR/,Hf8!P$gm
%qbU+!(j%5oB2K9DlJYki5?r&u?^&CAB4K_QDun>"A@YN]mCo>4IYDMjTU`!r1m7;;gKfB@/`:EAM8F9gc$]mH;8<8-$rl/(B<*Si
%8C/;1+,u.,[M^a0@-'fPH5(&u18g4=qK1M"c2#Phnrd0T_Qn^3CM/'d58parK2+YO_6DDMFYrUc_pQj&&+:B`IcJiFo+1;XJE,Lm
%1Z/4dB-9D9mGE?l_tO\@c/tkthJ7UHQI$pCTi:RHW!!WdSWc<<&jF*;7u79f5H(&A0750IMcO>hOM5YK5r2]NFUof#+12jh3=hu7
%d6T[I)1jZ0ZP//`0O-`a-l-=W4ULX+fEE`5cr1*+k<]9ASAOnco\`it62)#h`JSWs`jkF(f`=-@dP&@Q*^R,o#OScmKA\a<0,ute
%\B-cHc0kU&)a>I#Ym!/+!Qm/N?3sZqL+K+SH,nWeg!kH2kp[5O!^tl5-j#ho6$:7WqLLM`-WpjSPsfR?0`O#Ang[lo]So+OM9;;K
%Qi\VM4S>MVAZHEu.D1ZcbP2L8Fr"XtW$X<[4&L!m"$^4NR=Fb(];H>7P03ZE'=:QJ9@;Os/AT."$M?A4;8[Z9(VLJ]'1;h;NXZ-L
%HCS0D,c,cEPA!4n&F*i.0jgg&9o7UIVL4L@Q9g(<`aCQa<?U!3Ml.eB1';\g$5X)2DC%ue!eZF(&I;"q#[b[M1uNU7ScZ\73MV^e
%=N;\=<h>5,q?P+Q&=cndA!s2F<+-FI4,2Qc7BWo\kA1^O#t`Y6QWd-]Z6U4ndefTp"E&@e!?q6h<\*cV9M_"mIB^a^f)5QIao,`P
%Gr<<sJ!oiGN2OV=$7fT0qPI]9:U#J+haFi4#5MX4-NJ.H-pqC5[*ejGd]?,e#Ak9!G_k1rU;TS2C[,fHJa%,uFM0Yq"A]hu#IJ>X
%:t"*q:P[k7\Z3EQ]<C=.Lp)W5s0I.REh_<D2I,Wb[n$d\/Y:`81]Tn!eja#J>nc*PIG1fMZ)nGS"L:3S8'f6ZEMZ!ObGPmGY5BLL
%MMfjj+'/_,_?l>j"S<c>pE#CM54-dhlo]YiA_JtiG(MX(nZl#"SrW;DR-R8n`(8&qm_^&0YjP&9aLQ)-Q!Q=rg8"OIH,8'<;%b)U
%,H3%tHcRD;M<`W:dQei!C/pgRKloh9PV"/7Q!.KAlDEgPDN0#)dZ(+BI16-$@%lCDf2B#[l'D7WLkc?5o%QfrES"+m[D;Ru#N]gW
%Vd6l4mMe:]L"m*-p$m@]4@'6)I->)uG?B>[jsa*tadDMYoHA,uapodpKfNiCZq#?2^lii#5\YUl?bIe;ACak,'.b/8qt/ON^rV28
%U)fAMc'*Nu704NkgHP#QSPm,1SS1Q:66fHefh(m&Ji'6F?s4Bi1.*<%I4;[[f+(KmA(V(;^;o9B:]#:4`%6;sU?HPUZWQC\3NHhT
%;,+KGNrf;C2M&9UX[c"&`htJUA7,4`eb!R:mKBiB_)DtQkk<carV2R]Ac,AP>MhV$$Q9>#P0H?#\1P+*e9tY&^bmfeg%9!^m\EI:
%"tK,`K&[QeE/rdf]$1K0@B/-TBMfM2<0l`]WcR3jl9YRq@Q.In`E-oKG3NmZ`"4t`DM_KnDIPo<X@'Loih&sV8/)[Z#M4l1-oDlU
%@B;<"2_CZqkAE>6.():$Q5rs'ch?=]3AZ=B!71FRIdX:9!#Om)D^JFJTiMHADnn1O&">cMd%)rhD'pM*9U?sgQl8=:K3XrT%qPFR
%F1*Ec>.TKO'iEbeO0ff1QOk2.Ghi!q^\XM<lun\iU(P;ti9i+,,;LKcL,W_*lOaA:Cj#g?-`16JMqp#/4/bK$M/ShHmFL+cLi1Ra
%SAurQ8WF.__7m1n*>`&s?k\3L.i5)PG=.?@)f"F#^23YQ6h^rKrn9QC#t5Eb?C*nl+-M[.&[AIB&+KEN]aNV7EQrB[d!hiQ&A%1*
%[r%c2lV>"o^8B+gK3VIf4g;>O@LWh#Z6;,l'f74BG19W@1mHi;88>e[oW%0)*o5#Yi[7/Ed]+7VM14\5;1I6WQ(okae8e0jVmkSE
%f[/:UYRY/+-a$W:mF@cKB`S;cX=^VRb0cC'ao8;=$QP1:A#gDM+\Dt5\r+<78c1#`0cW5ne+@@8rkb&Br[LJ!bHE#ETW`kD<IhK$
%q;(!3lf>:(+W+fKOrB-^)K?eH!>DJb,tYKNjT],bS_"Yj[%GPt%R^%V%9YMn&09;7`r4<50F2\D-C0EbO*q,G+u,LjP+2t[*AUR(
%_-X*s8e=ObY.d)W]4Y";:,)GE7cu,B*:ZCL`]#V*,*LQ7Jk'4H(QWINIp">i\MiGh/!H>/8^s-3bqcfg&K1)]=F*t9rEElGQRO/=
%LJPmS61-s"%A5ALD2fiW=]A)**XUpCg%"02!"5sGJhGK7KH_uNkTT3kQP&6gOd&C!-QA1FoTJ@NU60NHE2'#60Rj9!?]lU4YmELP
%C"73,L51q"@b,)aHRU4j!=i-<Tdr5Y(DlZWW1F_si$VJU=,3b%V/TleBSV5JOR,$tg5fhOh:Y8&PC9SLkLj:jmY*RCBi1g/3k$^W
%oqGG!D5]:3<$AUM=*;j/#(RdO3k.?2jE`^=\",W2"\C^:ap#2DaPUG*pVcm`9ta/1SNFE=P:kj+R]8\H;q*]ro`KH-X#Uni4[Zqp
%>KeY/XU9;X\F9uLHQ^JMGF-htZY2X$0[L"G:DT6A[2>;`AT5+<W%KfJJsDk:]+Cd=g0LY:XX1T\ZruZ49T-!=a<[NOp@&'H"@!nH
%&Y3PDmY6t#<aBZN7^/+ho-SPo&:k4]--B6"C=m!q,Xl,SCgAjJDC4Rh1#8laaEnTLO^?^#\k93^nrN&eQHImDP?>Io:$8sIe%X^0
%:]8b3pX4T?l)%lpM=GO)fP/dL(?EG/&E>\0mUFY6*f.DINTYWhPG-UL\S_1b,jn*>qt;Q:)AiV69h#QrKB'l!ILLhlMb)bb2M_2a
%!uZ5^]3EbGUR@ib2+7c</jI4>%CnnVQF"a#fsXnF!J\#W3RW?SJ\SD[Sh<;oQcJ-I4rs<CC#9^L&.Xi-C3@?gKeX\rVD3cn#8Tca
%@HrS;Gaq8=q]tSKABs-r?2frgEB9MPhKI7WhL\35a5SP+$o&FYs&(R$(-:oMBjJO.pZ_HG:P\7<XY6cme^IS3iCa3%QK'gE%'F3#
%d[KS*A#ba;1#aU`6NfBlcP>\M#`CZp:[HQYfDFdOeh[Q1bi1BgPlY2r#:_PA;)4uePu[&-Mb]&d?67)%%(i3mcu"Dtj+LCugdtqa
%!t&`V<-@.[Ci'DkDt5]Y*$VBA-4@FEallg%XFX067SkO70&lR<:-3nH^Z15a8:-U:F-!VK;MpkGJS7e;%P5E^Otom#Bt#M6"p717
%.%>IaZ(49d2f"**ouH+$:C$Q!/>+tRM;&1L.h/hMTcbpj;3gB%]Q>(1[8XhL`K9a("sMp/7N)Wk4<Ct[etm\r;?sErVNT)sEgejY
%3%:6];NUA/SsKY^Ug!`-R(DH=+mq>$itt^$`E-oKG3N<c6Ke]C$7G5-(>$/A(93mWWBQ=b!_ZS$SGZP[>K&I_`AOr5iHCDi[=-c*
%HP'b2+9K/FIZ%bl6NLr0RMjuaq7i"62Odik]eLZ:X9srg%ugIoboZ4WYocB"7=q-qWk]7;TM8u#aL4-@_T11b#F:Aq=+I%M'hZ;*
%2%1U/L7g[H?ZP#.n<rfbddRih28W1hAho^pq_o\s.qKl/HP*AA8qoCE!DAms@t65#Zu'?bF5&!aQMelbhe=`r8Ms7!`H$0pFp>k=
%aL_?)Cn>8?(B`p`L?KoaFgk-OfN0*oE.?:KA'NtG#iF@W(/U]@3O#cij&W_:[=a8\TqWW.LB`LcA7Aa(>qooq"X"RER8$Kj1Qr0O
%Q/%HOa@eB`DF??S)RHCbRNWGp;CWk3Ko,(Dc3=2dqtN1=c&R:9`/bg8B9=Jo$Q!H[lV<C.X\"5`5U'=odE!_j0Uup\e?5dlEB5+c
%F9Vh&O3rc;`AonnM'\O*FpA>RYn2d0ZB7")ltuMuE]'_P8/bP\/M`0'C%]\:)Ic#e5)m,NN%O%@<%cXJeuGBs-)ue_Mo,m9%+RmP
%r`*1og('cO*:ARt-SnAT#Nkt[F*#G`4:'<$=d4Y]W.9e%!PAF9c88pJkXKnD[/ssFES>qF^_>%3O+buGk[#gE5Wr,"fk'4s8[4e)
%96C\Ig1V>nNQD`ZX1c>;]MYbmhAka%e+@@0rk\gm:2AP?[0SSIjOLf3=R,\7`.:NL!pMFtK^_n)-L3.4N&nsfE_8=Ql`.!!77\ln
%*)in6_aG5"PeUE)1@D`\asuDB)BuQcZak(`o)hR7\G!7Kd$*B[q6=`W,o`j?&`S&;AgWZ(%'Ze3EWK=H.Kpo,UfS.9;$u;UoaAtV
%r\GXKI\Df95p)+NI6W!9_4upu3&-Wh^?s&\9Ef+@$71fR="J0Y2<Ls%Ul'I)aW8i;#14d,T[;tK&kna'<e>NbD^QZ*SRt\4S+t8l
%Rot7K,sbObCPo!f"$mqo#o"ir$7V.V'q%8j-^57)1e*+ljT(_.M,N8t-:gnt3FcEMj+f:nRNB4Q<]Lm3nIZ'Zr05JP3N))NFRjRL
%Y:+HDLL#=>FY>Tmf)jmR,.*\F7RgUu=_g1KW]!+]%aKqI=7q+Ah6J2n!;Z1D`[Q5:UQ'=aRSaT4ap\7#@co/UCK-BO"_NUTM%n<_
%bH^a,c7tDUJg?X&K*h+j`Nc#MR#nu[*"9k)IIHP9dV&7oWCR:.:Qf!s:/$j:FC*JkRZ06mL`RpY9%dXgo^Yf<C+;b,U^so7rW!QG
%LLrWtDIcY'qW9891_(Mr"Ml2olqh6^4B89#Wc8oM!45&#ok:X]c(_q^D$*/G\ZhBLn<5%k-mMhDKgdC:.<&#4TJ\o9FE'9_;';>f
%DHX6uiTj"?RYO>5j'YE0M>>7Gl"JJ=39u;Pm'YQiTdNuA(KmsF9#]"TA+OFrcY+us9?''!Hu&a3]Gak>@U'sb-J!";i'S\WYVQh5
%hnccfD%<IH`7[0gS:on1iR9m^-.("?p*['g<\fQ5i[*5"*jaS3DG%SI$I(&3J-\ZNjf%CbJg;!@#<-"K^]H5V((u0h&u&<nQG2@>
%a@$KJDcM.jIKff$["6.n<]C<HU/sHN.]%Yg2mHBe.^Z1\8`[;QADMh)U$`J",#"(Jd712++^*D<K.P'.?R"$2UCg,O;M^P-C*D^g
%8qjQ@CLPnlrS_FK:RC?>/s3?/g>HPgTNJ*,&$]dg4kMRq?#qL<B!\h6>XPeTpc;q^lTa&WPf8]U86"i(K';;AOn^o)ot.)5Mh<Wh
%?>jms42kZ9),G.aoka;fQWu(K2af<6R)e=RG6pG4q"p]^:"uV4rgTEu"4UaOSDj-nP-(P":5cQ:rsp<=$=u$2_SbK#je&juC/)!(
%7TF-)_1OMIa:bKspd5X0e_5SBe5aVtU1ee;XH0b/+uo/!NGN&q,@'mjlKBOTp@PE"q#S6H,G!5nmH;`25M,3bqK8F^gYPVLWl]9"
%:eu6lRC4p%AF[<"9dUR5C3$R%57.AV#[./Q\la<Ml`j?igXV;01s9Vs%Pd69)It<!`&MVGp0`U0K7'&j7u,]8,f8-9l06/6>>W`k
%b2%;.g8k$1;f^#R*iHt\83+D6d2q#(IhB!m7/*,D51pLl.RHRdaNt(<@4)9s2-LXK:6#0;FC669N>b+e,\+@YKq<RI_;$V_bN3lo
%0P.K*Ys'GS[T%3$UTU9#$ciGt[h0T"N0Sp56^@)$\V84WAlWnB+mTkbC++&HAFWm^:tN0H,Q8XqmPlNOTGkH]HPa8V0rM0heg)AI
%eOeD'EhgGY&7"g=5q&!oB:*K";7g0X1RD86A3)a`HJVth<-oaj/<C=/5_kR9Uk4a\<bEF.hp.YDnbT1HBooTo$Y69<9Ng1^D>/AH
%?[!JAI/[!%S,fJr^]R-#Q$A8j0Kht'LF\e/bX'S'%]qF0Mo1GSaG"/gK80l5cI/<20M)(!3h8%oY!fO;qEU1UMUZKl:f\<--?]n\
%^9/:>l"5@kLTq9`f+]9Rs/g7pm:YbYU.Sh;Blo['S-.#j+q9<e0Y<O<TV_!C&-Egh?Uk03.2nnEN8p`@l\%#=5qO;9j%q1(Uf'&r
%6Ag"I05p%,CrrJLO8$GfJ&?Wk@_Mg8hr&fF;]Eo<W7.qRZ1kQ46,"(d/\Bq<mR8%]U'YN?Na$1I&6J8M:8]eYp8XYfO5g@o36pP:
%2\q4QS+3jO>fHY2r?e^E#ZH(P#D-Wg)V2ld:^Tem.Us1d43\NXm]*;I"8..gQS?8tmG6&Z]BSA?r4Ek*s/Pn"0;`330jOFOL)+#%
%g+,]/Q1Ln^GBMpXUoPOL'iKcsHL.@L;B0O>1LB#p`A4Ar0c+F?VaF/-f!&'Dn0j-&/B]EkC.2qK^@YC(Ike\:<<Mm!IWQ?4In?WS
%_bS;2JX4#8`0#<R1(aseioUP,&/Xk4Fen,'&hLt"ba$[\W*fVc_e:onjIBc45]OCmCaKdpNpFcU?C;S3gE*d99f5_A3/!(8O>]fp
%!aZh:_dF^-eqI9'=Re2<3CFGQm&T9W_l(t4-NjF)K0a%P!#D*:c>=3TSST(DGr0Lm4A8kX_%2oJB*PZT(or9_jaL$NVH>9CM!:=k
%fK%g8W`@83$R,gB*NV/XYqWOm_94m0mr3kuFIOU)1*#erqD8r+&.(jKJdmAm1TqUV-E\K0gMo1lrd6B+_LOF<jbqM4!u"-(NNGTY
%WLik$Q)2'\!0@"[<C3rgHs+#g>l'2hXJ!hI$bS5d/P-AcP_E;Gp6kW-_gbL`J?Id$6;eGH*b9$kE\BN8XElIE&G@VOM5<]IH2U$g
%i09Y#`=<D>H?SZ<q`lN84Os"r<Vbq8LL:&@IsLsAJ+Mu]?Tn>SDk;FQ4t^I2IsCbC^\^_6s0Oo%r5BSuY;Is$8C")Y(g+n[LR('e
%F=2"*'c!iE1W^Y$0H)0Ci*r@;YB6$]1Hg("&,R]E#l&J4[he]ns)kuf(ScT6EmX2XXMM,aq]C$UU0ZN/D@c3JC98QNs66&Um?`19
%__;&U%mU#RcVHe'q"rCP[rqGi\%hdihgbCV\,Z$>cb$"Yl/T7&rqo"\q3um0r2X3'kAS*7rHFl`r3,!?J$t45;S0l!bhZI[Ica_H
%qZ";.rD3H0%?2'rL?7X@:S5E%l19u9\3@N`21,;mZbNhZ&_tO@FL(k/s7u8qJ,&3!r5".qrl6+0\7t<A+.iK3s7Pb$]t`O1+lA`<
%p\c2Jqn0?2S*tj<HLNlNJ,@^(hgG1Us7FS)J,JI+T2$@(LMoEWrV+(a2u2HSs7<."oBi1J%l[G]&)[<[c1<#app5h#EQ7OG$%8ne
%D0VfnOXg*EB3tPu%=8a>C%'`GTFZA+rZni:4*TlpRGT[$"aAX^J),_VY.!8KW\Ij[F0IpI40#G;/*);g&W/7_V\@U<K2Ycdi_%\G
%_Sm'B\GW'<oJ"'b!($^oH_SGM,AC<EY\</oL'r,XKl8?WFq'X(?Idb9@)$INpa3,!6pZJ3TL>l\6kT57+j*eB?[#CIGn,H*6TRe,
%0p.$CYf]@AMR`RUs7CFu9I;%-f&cSPD.!^$/=-tgmn_!QE,%3MEtMXti>7\_-;4RO6:V*8:N@_[-3cL9k(KRGacW$Q^3+ZRZ\b.o
%/(p^8^uEOfm:f&JnZcG])Lg=1K1!Vhm)t"jLfZdmR&X(<6jPp`>d6l:'_3uGICU-re-Q,o,kIOsq]2-fZ5sS:7>9EcN"Z2E/'YFq
%cD@)$ifQ=und?K6(j#^e(IJ-U9s)UjDEM6^fjOrXi1c4s\6/.gX/S2R1**\]>SQt@2$bR^/[hqOGnX\m_G[d1]rlL$FLN5`[dE+^
%PA5l5\8-%:ZCbI4ZD:l\R*,ZJ2$]11B:\DVLL%@CGk9qB?!j\PUMc^Elcr2)?`Z)V=6%[>7XWd3/4r=a8S8;!#5KS_Nt)HS?F1f8
%9a]BSd<Jc7=llfhL;PNL"m0BTrH$&Xb,+H.]9$mEHQfgNgbn<o39p&0U-,b'NT]Dt1X-2[-4/2[.po,O;4alGJ4"!'\Qi&cm;gV@
%>,qXY[!(8jjOiXGEpkHbMan/l3HOOj]T?EYUPnf-q\Hjq8"Dgca0V3@^NeH'H-Ag!adrMi3*fFGWV4ek5fdeS*Wu8/OQF)fcJ@b\
%biS?;.G9STdc`0u*0?/144C$.a+9pE1`-gPT*'>`CmS["N"5#5>gB+ti=Uk/*&3-\IX8F.-6i@W+?;6\o&Uj)QX=5Xc:T?tD81=;
%l!T4?NX_#aW`=SaP.)8m?'&[ul$/$0n)uQ,j"2kLTk^I+CKtDV3]=#AX6Vc;d:iTdJ@P74jU7YQ-9;8DXs`ZdA>9g'P<aDR*5Dm7
%J8(M\&6EnRce]WW[)e?g\qoqJ8*6jK"M!N'V<$dJ-ZJ,B+XAu`r!cP%:Js6QrrBZ)+9d4L3"!+935HkeWb!IXZHJ'a,5+?BR)-e4
%rlH'g#iPn?51=)Wau%euW43&?8&IUM0q+&h(Ek?c7HQ^D#tpJs%PcYs+J-E]KGIa3nRPdm8@Sf;5:toTD#aH(RES`?"8$.(./F6p
%'q=PLj)(0iIFOuq`H@?4%1,96r,oq+1U%+JTP?)e4@dmS5;"R\D^uY:%4O<"=bE$TS3^_IkLg%AZ@'*$?]D4O_cf.X^,-s=W`D]J
%YN`)^4/cY=-!PVQ&fiOdo>C!T']tj0?3b22/t,WC@(V$6:22_gWMg!a[(XP^Mbi[3EFf.;V*I6(p"cHrZY?<kmq(+;b5/&SMR%$f
%6FM<)?-Z?XYDb+N>F5&-[WVL]LsCeUbX0!`oN%+j"t#rU^b@5g0@:mO;gcam-lPQHO:GR1"e7E#3co0[CN5^0:6$<+k#W[DTS!L0
%"8>VF3q>=^!-'[QfOk=F6b7X^\I-S&?CTaWr>V?p1gB'4-mqU0Y$',c#V<[d"rDT[K7ECan@m(]ZNoO["kR[<*K?3W[giW<l7[&o
%Aele@k<Q@!co[#OI<k!`T6TnOa*Qp_WG>al^GkQO;3fh8A*i<6X=lE8R&f>d)l,c_9kYPM$G!677?EW.9g4-1mP8"[e\02AJ4eNj
%*-(-4"P_W="MA%>^<-$=gUF>HmQ8%hGq];,>1CT'6V!(2G^-FkntlG"mA"k70o?p`CQS>umi1Dqja9,30.c;1\2sR?aT(T2n_))A
%;^&`TUYK<6f*L%;GS#fNnm3^b$&6H9QOb;C]SCgdlqZd%TGD]k!#DMEm[D*Z4%ldF^;5M@7/I4-&+@-C2L@+f?X2)n5+7BuI6>SP
%IsKKsF(;k(T\7=HLRP.>3sYY)BqP:?%[M9_C\X@45Sfj>k;f`c?CZQq2@R`7%`AG5CZ'+6PRR!"WhMT5o)i?IfaFLJ:/GcX\//(6
%SKQ1VHgrAQUr<4-m:H9"oWN/l(^-sPX51:>Gl/g0-(nUd9QY:"<,a;g$9u/I>H@/ukX_lBG(A^M2_$6,_pH@1SWm:YP$D.)O%X'p
%K2#gO`MsFKW?=[$p/I3GPF5fI7gmnR<Zg!!K'R?*n>B_)0HlFn*N+Q]@V@S3Ds-Z>QaZOe?l2j9Nn2;%+*O^Gl7['Y-b+R7<sk\(
%moh6?R<5rBd.4g"$blG-/&k>^pT,5R:@DCEVe=K3U:IDXFruX#o/'SFL%0n^>S#YI#@P,$[#I1&bPD4XJ^gKSU3RPADXkg]<dQRN
%Srn-%H_VB4rP!!>Wta@GI!]W@H9U9X(VfCT-Z]=`Vf!%64(YN8%D]_Y=A;'fU#SE:77]XpiA-\Yi;[pj5?IRS<>#14G%Hg9)UUd+
%kT=j_*a1$`qsX@lDqT\$1uGVEAZ!+Q(Xc'(h`gtQ".o>S7f2qbd9\S/R<PBjel=Zoq+=u0kn'be58f.lV%]\obuZdDB!_l:4@h2!
%^Nqj^g<hOBh$O$!eA=tP8Eokfd;0$]::g?+P<E&Jb!1)uFPku`c%A=WU8@^d,42a-%nHE[05hb=.UhccA[_-3EFr#'2q"V(i7UBQ
%/o&FZ>m<S3Q^uN!hGT)j@tU9ra]<@@>sk?#e)pqtr.E0UaiCb.?3:LVmc*O\!@jYNFH/RF0<3gEKX.rikj5YAQOlrOC!'9>!7,9k
%#A;:M"51U5E><Q=9lcBdVa)HBcY?U[!0W;1Qh=p9[WNEp#L\&SG/:->"9DAWS022I.E,I]4o4:CcUHHh=U>p[n#80gU\$mV=oqKX
%K6mqJ%A1jA1s@QRS!1g#aa=o22&ce21>k-^eUM?MnjO[<0WZAIO:eZ,6es"29:&tHS<$rkk!\!!jR'%@#'Q#PCff2D"N)eE<&(rS
%fu1!eT>KptX>#=WIB]qXoP3&+,cKe2p<5+n#YVPG!g$U7@Y^V*D!#aYb(b:#Gu1C]L8CgjbLQkIrt7Y<qn;1+57>W+*/(Mq;":HQ
%aB7bYnGooK)tW@8*&.i$R?_JNPq7Yh4d)iiI>8Tm;1&d&^+k//KD9AVYJd!Bc1D88+p:LR(.GrK3Xo,X\Ro"kT"q2GE\c?JDf7;6
%+6KW)'JrC#q<_?QL"T51h=eH5e+R'3EI2fnM77`ZkqCjsYN%r'+6`*B?N&i`LK*,g2\%<DI`J\`gYXfkB@kYt\F-N!Z6Pi`T<A<?
%Ys;5(l[9GMPESj"Zs6@$6]m+F^##)+-ja_":/1^Y:A/O:<l'6m]5X7)[Ahu`X?V$Af[oTHc,n\!h439mpkt(/eOnQSBO:YrX2e.>
%kF4pTYJ,EYh8/jJ;*A4L?`0"al&?8W`&l%UIrh3n\;@bR@D,(X*0A#A)"GRuR*6Rj!f4C/U1P*Rj4=M0UAZ!;V=8Z&me*_CcrV[d
%AN(bZHa6b^IH1%bee`8pW7tZajKBd+oVg?cOC%nElNbsf.rQD.]`!kA[4(b'L\>hdTB_&!?Kc>]m:PT8$J$!\<CA%"(#]QDV.@?V
%F@nnNY\6t!X9_\3PCZ-S@9,HE9(W;qX(Q!u!#cST+phhaCe@CpAB;M*a46q]o1,+J`o3LL;NB\e@nd0'%#>uN8Xi0F^`K>j#WCAj
%.Ll`//7N-qGZi2)dW8^R+O"[f1aFH<C=s))s(6"-A?\0:\EHgEj&jSa"sD2-KjYLNVUL/^Q<\5;[k,Tba<q;A,^nR_'S4uApu$)M
%.4T)@3*F^hCGH:@:Ynt.e4Da.%=S<;'ZDlnd0?Y7>7./b3FBpr\<5@o?&[d_bhPQG9NJ-JN(hY2KuVmU'0Y#^";7m(*mCQS-:uK>
%,m1^%L47fSpX*iDDh4#24cb?AWMH&UoECPdMMDrlbh6=NC(L'/m!q^(4QFeNYQM2mao&Bf)H'K6]_o./apdE605.SlKpT`VI@0kc
%D%.^]>f\aW,t]KeIVKj5*Sngs4?iA+(o=Qjm?'.t_#tq&_pOeMin8fnZX'+"LW9`$n;[U)n%\$V@0>sY<7o"2Z!sB!gOmKEE-nro
%4)[;fX<Y3pM[f4L!HTF@NYmZ2EQIYJpDc!?O1-2ff"bLN)B5#%*]DUJS)_M-C:=G.rSdIkZ'O6mkj53kGJ7=bP*c3Q*Bgh`hgY@Q
%MLY6fF/g=QSNaM@miC?54'4T?QcG)3KJc2(E-IfeO?JZJj(sobkXV+eJ!c3f'`5jX2J-\7+)^_GdFu6\Zm2E[?63Zsa`8,%lUOC#
%CiK6r:f^jmX=W0)2/asB,JNnA7@L'tb>W5UR-3!Kf&uPoB;ZraoL^(fR7m#qnWfP2]Zen4f'/m@35JjAV'``t426kg'DpneKrH]p
%5Y\77kKD<^"b:l@lqX`YG+g7"ipH)I./cuGcE7rUj-OLYA"hk>PH,/[4k+gi$;4d_jf"dU)p]m5/h[\kf6i/i<gS+F0WiLs]?la4
%d9/,`/=(12f12-$gpO$?i[^kH(<&r+.p].+<\BE5.(e[%\D#'u]$a?d*EM318BQ25:90idi9?I.nB=UTU0t[<J2/UE]\5Grl-Z)q
%h$^A%9hRQ9Ie`J0;_jMN`\5@?8<9`&JP<?fg2VNT<;W>ZI(X,N/nY3Zn<AO%Q2,nGc_=7AFHh3cla+3!\Gb.%0BfS/R.^1U\-Q9V
%V=?SJW1BB(4D'ZsN#Egb8)nd_phho@Rbs)Fj@>sMq9etC4Fcl]LLYRP!T.Yu&&!.-'\!Z0kWgA.W^AaG#nFm\F.tKa]j*"=&PZbp
%fKJ!YCm*<&?$aRYN>+9$o6g'VbKH(mm\8D%g"e%2IdS"Ri,O1=GHJZu6%f)Kf_.sKho!Y#\+/+[^Df:kO+pI#P1p#MI/`,H%L;NG
%$/TA)?\#%*4#E%s',d#DS1[e4g2a76^f9!E]M#m9l>lQZB7#dKgD$L?_eFD+R\I/Hh3RA<qXrBXYOE%:GT,Y+Km*#Ue(_e;n$r>]
%0.t4R<os',`>8`>IlJ?1r8D;hY?oicjmjdBK?-7s%3oSk%L2LhL!+Bq*6ckXH)Ip[?'=^X>_5UZ"D-9(nLN2D9Be"#E<27n]l9-e
%`1>Mt5";f9FY9Xu4LZ_tRHj7pfNuE:jf>F=UMroIK558`:Bf<srDf1Hl$Mg`[cc3oCouOcoi115VkJsi$@YfFTh1uoj7B)]%NhpF
%<KIlu%rfq77FdkBFq]9//j^pNM?IgkrI_%s`t\*H\P6VLbBGlo(_?\_h_hlVXW[)gs/q3MoZdAdl[rD#f&glHHTl\Pei!.oMq.C#
%QW)\d-p)Dn,OY_Ycm4bYT3kuEmrt&?W-p=7,K_%:HPEEMcn:gCAG5=bG1:EhOD"X_ROkD@:bR=SA5@AdqM/sLmec6ChXpbo,gUR^
%ioXG,iO7O-X:kGY,@7NQ"AgVm3[VD4RLO<b:e7_8[:UWVU]S3X0:kNg/Xf,?k4US0Z<lD+8;!_C]J_aHke$Q'lnZ8fIcKkDXY3n:
%2r-Y>`)Bu#3pdQ<Uq!/hHmJt]75oa=VW/9"7rC_F/V\&_,S>6gqZ<d4kNj6!";kIP\;KX^T0/D^.;[dM/dH<u5uA_j5A`.dQ2+L!
%O)DYaR_7n[q(SE%8&),IKNDa^^7*8(]g-1fo$jl<S]Cc?#la6Noq26_qqjVeo<4d9r:",,r;7YNq8;CqkJqMTrU09<5Ppp7r:-7@
%It%1TqsSO6If>\q:ChsMnadiPqVfK@%tFN?+9!'%G\MTbk<K"Ds7W(6p,E!j9HnrT~>
%AI9_PrivateDataEnd
