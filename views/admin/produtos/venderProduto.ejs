<%- include('../../partials/header.ejs'); %>

<style>
  /* Estilo geral */
body {
    font-family: 'Arial', sans-serif;
    background-color: #f4f4f4; /* Fundo leve e neutro */
    color: #333;
  
}
/* Estilo do botão principal */
.btn-main {
    background: linear-gradient(135deg, #007bff, #0056b3); /* Gradiente de azul vibrante */
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 18px;
    cursor: pointer;
    border-radius: 12px;
    transition: all 0.4s ease;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    outline: none;
    position: relative;
    overflow: hidden;
}

.btn-main::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 300%;
    height: 300%;
    background: rgba(255, 255, 255, 0.3);
    transform: translate(-50%, -50%) rotate(45deg);
    transition: all 0.4s ease;
    z-index: 0;
}

.btn-main:hover::before {
    width: 0;
    height: 0;
}

.btn-main:hover {
    background: linear-gradient(135deg, #0056b3, #003d80); /* Inverte o gradiente para tons de azul mais escuro */
    transform: translateY(-4px); /* Leve elevação */
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.4);
}


/* Estilo do modal */
.modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-box {
    background: #ffffff;
    padding: 40px;
    border-radius: 12px;
    width: 80%;
    max-width: 600px;
    max-height: 80%;
    overflow: auto;
    position: relative;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
    transform: scale(0.95);
    transition: transform 0.3s ease-out, box-shadow 0.3s;
}

.modal-box.show {
    transform: scale(1);
    box-shadow: 0 18px 36px rgba(0, 0, 0, 0.25);
}

.modal-close {
    position: absolute;
    top: 20px;
    right: 20px;
    cursor: pointer;
    font-size: 24px;
    color: #333;
    transition: color 0.3s;
}

.modal-close:hover {
    color: #ff0000;
}

/* Estilo do jumbotron */
.jumbotron {
    background-color: #ffffff; /* Fundo branco */
    border-radius: 12px;
    padding: 40px 20px;
    margin: 40px auto;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
    text-align: center;
    max-width: 800px;
    box-shadow: 0px 20px 40px rgba(0, 0, 0, 0.5);
    position: relative;
    overflow: hidden;
    z-index: 1;
    max-width: 50%; /* Limita a largura do conteúdo */
    text-align: center;
    position: relative;
    left: 200px;
}
/* Imagem grande à direita */
.jumbotron-image {
    max-width: 35%; /* Ajuste a largura máxima conforme necessário */
}

.jumbotron-image img {
    width: 100%;
    height: auto;
    border-radius: 15px;
    
    position: relative;
    top: -450px;
}

/* Estilo do h1 no jumbotron */
.jumbotron h1 {
    font-size: 42px;
    margin-bottom: 20px;
    font-weight: bold;
}

/* Garantia de que o layout é responsivo */
@media (max-width: 768px) {
    .container {
        flex-direction: column;
        align-items: center;
    }

    .jumbotron, .jumbotron-image {
        max-width: 100%;
        text-align: center;
    }

    .jumbotron-image {
        margin-top: 20px;
    }
}

.jumbotron p {
    font-size: 18px;
    line-height: 1.6;
}

.jumbotron hr {
    border-top: 2px solid #ddd;
    width: 60%;
    margin: 20px auto;
}
/* Estilo do card de formulário */
.form-card {
    border: none;
    border-radius: 20px;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.3);
    transition: all 0.3s ease;
}

.form-card:hover {
    box-shadow: 0 18px 36px rgba(0, 0, 0, 0.35);
    transform: scale(1.03);
}

/* Estilo dos inputs e selects */
.input-icon {
    background: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
    position: relative;
}

.form-input {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px 15px;
    width: calc(100% - 40px);
    font-size: 16px;
    transition: all 0.3s ease;
}

.form-input:focus {
    border-color: #007bff;
    box-shadow: 0 0 8px rgba(0, 123, 255, 0.5);
    outline: none;
}

.form-select {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px 15px;
    width: calc(100% - 40px);
    font-size: 16px;
    transition: all 0.3s ease;
}

.form-select:focus {
    border-color: #007bff;
    box-shadow: 0 0 8px rgba(0, 123, 255, 0.5);
    outline: none;
}

.form-label {
    font-weight: bold;
    color: #333;
    margin-bottom: 8px;
}

/* Estilo dos botões secundários e de submissão */
.btn-secondary {
    background: linear-gradient(135deg, #28a745, #218838);
    color: white;
    border: none;
    padding: 12px 20px;
    font-size: 16px;
    cursor: pointer;
    border-radius: 12px;
    transition: all 0.4s ease;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    outline: none;
}

.btn-secondary:hover {
    background: linear-gradient(135deg, #218838, #1e7e34);
    transform: translateY(-4px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
}

.btn-submit {
    background: linear-gradient(135deg, #007bff, #0056b3);
    color: white;
    border: none;
    padding: 12px 20px;
    font-size: 16px;
    cursor: pointer;
    border-radius: 12px;
    transition: all 0.4s ease;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    outline: none;
}

.btn-submit:hover {
    background: linear-gradient(135deg, #0056b3, #003d80);
    transform: translateY(-4px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
}

/* Container principal */
.custom-container {
    padding: 0;
    margin: 0;
}

/* Layout com imagem e conteúdo */
.custom-row {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.image-container {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

.img-fluid {
    border-radius: 15px;
   
    max-width: 100%;
    height: auto;
    object-fit: cover;
}

.welcome-text {
    flex: 1;
    padding: 20px;
}

.welcome-text h1 {
    font-size: 3rem;
    font-weight: 800;
    color: #212529;
    text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.2);
    margin-bottom: 20px;
    line-height: 1.2;
}

/* Estilo para o cartão */
.custom-card {
    border: none;
    border-radius: 15px;
    background: linear-gradient(145deg, #ffffff, #e6e6e6); /* Gradiente de fundo */
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
    padding: 20px;
    transition: all 0.3s ease; /* Transição suave */
    position: relative;
}

.custom-card:hover {
    transform: scale(1.03); /* Efeito de zoom no hover */
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.3);
}

.card-body {
    padding: 30px;
}

.card-title {
    font-size: 2rem;
    font-weight: 700;
    color: #007bff;
    margin-bottom: 20px;
    text-align: center;
    border-bottom: 2px solid #007bff;
    padding-bottom: 10px;
    position: relative;
}

.card-title::after {
    content: '';
    position: absolute;
    left: 50%;
    bottom: 0;
    width: 50%;
    height: 4px;
    background: #007bff;
    transform: translateX(-50%);
}

/* Estilo do botão do cartão */
.custom-button {
    width: 100%;
    font-size: 1.3rem;
    border-radius: 12px;
    padding: 12px;
    background-color: #007bff;
    color: #fff;
    border: none;
    transition: background-color 0.3s, box-shadow 0.3s, transform 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
}

.custom-button i {
    margin-right: 8px;
}

.custom-button:hover {
    background-color: #0056b3;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    transform: scale(1.05); /* Efeito de zoom no hover */
    cursor: pointer;
}

/* Estilo do modal */
.custom-modal .modal-content {
    border-radius: 12px;
    overflow: hidden;
    background: linear-gradient(145deg, #ffffff, #e6e6e6); /* Gradiente de fundo */
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
}

.modal-header {
    background-color: #007bff;
    color: #fff;
    border-bottom: none;
    padding: 20px;
}

.modal-title {
    font-size: 1.8rem;
    font-weight: 700;
}

.modal-body {
    background-color: #fff;
    padding: 30px;
}

/* Estilo dos campos do formulário */
.form-control {
    border-radius: 8px;
    border: 1px solid #ced4da;
    box-shadow: none;
    padding: 10px;
}

.form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
}

.btn-success {
    width: 100%;
    border-radius: 8px;
    padding: 12px;
    font-size: 1.2rem;
    background-color: #28a745;
    border: none;
    color: #fff;
    transition: background-color 0.3s, box-shadow 0.3s, transform 0.3s;
}

.btn-success:hover {
    background-color: #218838;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    transform: scale(1.05); /* Efeito de zoom no hover */
    cursor: pointer;
}

/* Estilo para o fundo escuro do modal */
.modal-backdrop.show {
    background-color: rgba(0, 0, 0, 0.8);
}

/* Estilo personalizado para o select */
.custom-select {
    background-color: #fff;
    border: 1px solid #ced4da;
    border-radius: 0.375rem; /* Arredondamento de borda */
    padding: 0.5rem 0.75rem; /* Espaçamento interno */
    font-size: 1rem; /* Tamanho da fonte */
    color: #495057; /* Cor do texto */
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.125); /* Sombra leve */
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.custom-select:focus {
    border-color: #80bdff; /* Cor da borda ao focar */
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25); /* Sombra ao focar */
}

/* Estilo da opção selecionada */
.custom-select option {
    padding: 0.5rem;
}

/* Estilo para a seção de checkboxes */
.checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 20px; /* Espaçamento entre os checkboxes */
    border: 2px solid #007bff;
    border-radius: 12px;
    padding: 20px;
    background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    transition: background 0.3s, border-color 0.3s;
}

.checkbox-group:hover {
    background: linear-gradient(135deg, #e2e2e2, #f5f5f5);
    border-color: #0056b3;
}

/* Estilo para cada item do checkbox */
.form-check {
    display: flex;
    align-items: center;
    position: relative;
    padding: 15px 25px;
    border-radius: 10px;
    background-color: #ffffff;
    transition: background-color 0.3s, box-shadow 0.3s, transform 0.3s;
    cursor: pointer;
    border: 2px solid transparent; /* Borda que se torna visível ao selecionar */
    gap: 10px; /* Espaço entre o checkbox e os controles de quantidade */
}

.form-check:hover {
    background-color: #e9ecef;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    transform: scale(1.02);
}

/* Estilo para o input do checkbox */
.form-check-input {
    position: relative;
    margin-right: 15px;
    cursor: pointer;
    width: 24px;
    height: 24px;
    accent-color: #007bff; /* Cor do checkbox */
    border-radius: 50%; /* Tornar o checkbox arredondado */
    transition: transform 0.3s, box-shadow 0.3s, background-color 0.3s;
}

.form-check-input:checked {
    transform: scale(1.3);
    box-shadow: 0 0 15px rgba(0, 123, 255, 0.5);
    background-color: #007bff;
}


/* Estilo para os controles de quantidade */
.quantity-controls {
    display: flex;
    align-items: center;
    gap: 10px;
    background: #f8f9fa;
    border-radius: 8px;
    padding: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: background 0.3s, box-shadow 0.3s;
}

.quantity-controls:hover {
    background: #e9ecef;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.quantity-btn {
    background: linear-gradient(145deg, #007bff, #0056b3);
    border: none;
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 20px;
    font-weight: bold;
    transition: background 0.3s, transform 0.2s;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.quantity-btn:hover {
    background: linear-gradient(145deg, #0056b3, #003d7a);
    transform: scale(1.1);
}

.quantity-btn:active {
    background: linear-gradient(145deg, #003d7a, #002b5d);
}

.quantity-btn:disabled {
    background: #c0c0c0;
    cursor: not-allowed;
}

.quantidade-input {
    width: 60px;
    height: 40px;
    border: none;
    border-radius: 5px;
    padding: 10px;
    text-align: center;
    font-size: 18px;
    font-weight: bold;
    color: #333;
    background: #ffffff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: border-color 0.3s, background-color 0.3s, box-shadow 0.3s;
}

.quantidade-input:focus {
    outline: none;
    background: #e9ecef;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

/* Animação de disparo com efeito de explosão */
@keyframes explode {
    0% {
        transform: scale(1) rotate(0deg);
        opacity: 1;
    }
    50% {
        transform: scale(1.5) rotate(15deg);
        opacity: 0.5;
    }
    100% {
        transform: scale(1) rotate(0deg);
        opacity: 1;
    }
}

.explode {
    animation: explode 0.5s ease-out;
}

/* Efeito de sombra e brilho */
.explode:after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 120%;
    height: 120%;
    background: radial-gradient(circle, rgba(255,255,255,0.5) 0%, rgba(255,255,255,0) 70%);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    opacity: 0;
    pointer-events: none;
    z-index: 0;
    animation: explode 0.5s ease-out;
}


.error-message {
    color: red;
    font-size: 0.875rem;
    margin-left: 8px;
    display: none; /* Inicialmente escondida */
    transition: opacity 0.5s ease-in-out;
}

.quantity-controls .error-message {
    display: inline;
    opacity: 1;
}


.quantity-controls {
    position: relative;
    display: flex;
    align-items: center;
}

.quantity-container {
    position: relative;
    display: flex;
    align-items: center;
    margin: 0 10px;
}

.error-message {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: #f8d7da;
    color: #721c24;
    padding: 5px;
    border-radius: 4px;
    font-size: 0.75rem;
    white-space: nowrap;
    opacity: 0;
    transition: opacity 0.5s ease, transform 0.5s ease;
    z-index: 10;
    display: inline-block;
}

.error-message.show {
    opacity: 1;
    transform: translateX(-50%) translateY(-10px);
}

.quantity-btn {
    position: relative;
}


</style>

<div class="jumbotron">
  <h1 class="display-4">Faça a venda de um produto</h1>
  <i class="fas fa-user"></i><br><br><hr class="col-6">
  <p class="lead">clique no botão abaixo!</p>
  <!-- Botão para abrir o modal -->
  <div class="schedule-container mt-5">
    <div class="text-center">
      <button class="btn-main" id="showFormButton">vender um produto</button>
    </div>
  </div>
</div>

<!-- Imagem grande à direita -->
<div class="jumbotron-image">
  <img src="/img/bla/3947116.jpg" alt="Imagem Grande">
</div>


 <!-- Modal para o formulário de cadastro -->
 <div class="modal fade custom-modal" id="cadastroModal" tabindex="-1" aria-labelledby="cadastroModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content custom-modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cadastroModalLabel">Venda de produto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
           

                <form action="/vender-produto" method="POST" id="cadastroForm">
                    <div class="mb-3">
                        <label for="nome" class="form-label">Nome do cliente</label>
                        <input type="text" name="nome" class="form-control" id="nome" required>
                    </div>
                    <div class="mb-3">
                        <label for="nif" class="form-label">NIF</label>
                        <input type="text" name="nif" class="form-control" id="nif" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="produto" class="form-label">Selecione os produtos e quantidades</label>
                        <div id="produtoCheckboxes" class="checkbox-group">
                            <% produtos.filter(produto => produto.quantidade > 0).forEach(produto => { %>
                                <div class="form-check">
                                    <input type="checkbox" name="produtos[]" value="<%= produto.id %>" id="produto_<%= produto.id %>" class="form-check-input">
                                    <label class="form-check-label" for="produto_<%= produto.id %>"><%= produto.nome %></label>
                                    
                                    <div class="quantity-controls">
                                        <button type="button" class="quantity-btn" data-action="decrement" data-product-id="<%= produto.id %>">-</button>
                                        <div class="quantity-container">
                                            <input type="number" name="quantidades[<%= produto.id %>]" id="quantidade_<%= produto.id %>" class="quantidade-input" min="0" value="0" data-quantidade="<%= produto.quantidade %>" disabled>
                                            <span id="error_<%= produto.id %>" class="error-message"></span>
                                        </div>
                                        <button type="button" class="quantity-btn" data-action="increment" data-product-id="<%= produto.id %>">+</button>
                                    </div>
                                    
                                </div>
                            <% }) %>
                        </div>
                    </div>
                    
                    <!-- Campo oculto para quantidades -->
                    <input type="hidden" name="quantidadesJson" id="quantidadesJson">
                    
                    <button type="submit" class="btn btn-success"><i class="fas fa-share-alt"></i> Vender</button>
                </form>
                
                
                
                
                
                
                
            </div>
        </div>
    </div>
</div>




<%- include('../../partials/footer.ejs'); %>

<%- include('../../partials/modalProdutos.ejs'); %>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const checkboxes = document.querySelectorAll('.form-check-input');
        
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                const quantityInput = document.querySelector(`#quantidade_${this.value}`);
                quantityInput.disabled = !this.checked;
                if (!this.checked) {
                    quantityInput.value = 0;
                }
            });
        });

        const quantityBtns = document.querySelectorAll('.quantity-btn');

        quantityBtns.forEach(btn => {
        

            btn.addEventListener('click', function () {
    const action = this.getAttribute('data-action');
    const productId = this.getAttribute('data-product-id');
    const quantityInput = document.querySelector(`#quantidade_${productId}`);
    const maxQuantity = parseInt(quantityInput.getAttribute('data-quantidade'), 10);
    const errorMessage = document.querySelector(`#error_${productId}`);
    const productName = document.querySelector(`label[for="produto_${productId}"]`).textContent.trim();

    // Adiciona a classe de animação de disparo
    quantityInput.classList.add('explode');

    let currentQuantity = parseInt(quantityInput.value, 10);

    if (action === 'increment') {
        if (currentQuantity < maxQuantity) {
            quantityInput.value = currentQuantity + 1;
            errorMessage.classList.remove('show'); // Remove a mensagem de erro
        } else {
            errorMessage.textContent = `Quantidade máxima para ${productName} acabou.`;
            errorMessage.classList.add('show'); // Exibe a mensagem de erro
            setTimeout(() => {
                errorMessage.classList.remove('show'); // Esconde a mensagem de erro após 3 segundos
            }, 3000);
        }
    } else if (action === 'decrement') {
        quantityInput.value = Math.max(0, currentQuantity - 1);
        errorMessage.classList.remove('show'); // Remove a mensagem de erro
    }

    // Remove a classe de animação após o tempo da animação
    setTimeout(() => {
        quantityInput.classList.remove('explode');
    }, 500);
});


        });

        // Adiciona um evento de submit para preparar os dados
        const form = document.getElementById('cadastroForm');
        form.addEventListener('submit', function (event) {
            // Coleta as quantidades
            const quantidades = {};
            document.querySelectorAll('.quantidade-input').forEach(input => {
                if (!input.disabled) {
                    quantidades[input.id.replace('quantidade_', '')] = input.value;
                }
            });

            // Adiciona as quantidades como um JSON ao campo oculto
            document.getElementById('quantidadesJson').value = JSON.stringify(quantidades);
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const showFormButton = document.getElementById('showFormButton');
        const cadastroModal = new bootstrap.Modal(document.getElementById('cadastroModal'));

        showFormButton.addEventListener('click', () => {
            cadastroModal.show();
        });
    });
</script>


</body>
</html>
